<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[左轮]]></title>
  <link href="http://ypengju.github.io/atom.xml" rel="self"/>
  <link href="http://ypengju.github.io/"/>
  <updated>2015-03-06T11:14:01+08:00</updated>
  <id>http://ypengju.github.io/</id>
  <author>
    <name><![CDATA[左轮]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cocos2d-x -- 富文本RichText]]></title>
    <link href="http://ypengju.github.io/blog/2015/03/05/cocos2d-x-fu-wen-ben-richtext/"/>
    <updated>2015-03-05T14:45:11+08:00</updated>
    <id>http://ypengju.github.io/blog/2015/03/05/cocos2d-x-fu-wen-ben-richtext</id>
    <content type="html"><![CDATA[<p>cocos2d-x在3.X版本中增加了富文本控件，使得处理游戏中多颜色字体及图片方便很多，这篇文章就学习总结下富文本控件RichText。RichText继承自Widget类，每个具体节点由RichElement的子类RichElementText，RichElementImage，RichElementCustomNode来处理文字，图片和自定义节点。当我们生成好RichElement的子类时，将其添加到RichText中，来进行富文本显示，像下边这样显示两种颜色文字。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">auto</span> <span class="n">rich</span> <span class="o">=</span> <span class="n">RichText</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'><span class="n">rich</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">rich</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">auto</span> <span class="n">element1</span> <span class="o">=</span> <span class="n">RichElementText</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="n">Color3B</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">123</span><span class="p">),</span> <span class="mi">125</span><span class="p">,</span> <span class="s">&quot;Hello world&quot;</span><span class="p">,</span> <span class="s">&quot;Arial&quot;</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'><span class="n">rich</span><span class="o">-&gt;</span><span class="n">pushBackElement</span><span class="p">(</span><span class="n">element1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">auto</span> <span class="n">element2</span> <span class="o">=</span> <span class="n">RichElementText</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mi">101</span><span class="p">,</span> <span class="n">Color3B</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">255</span><span class="p">,</span> <span class="s">&quot;Hello cocos2d-x&quot;</span><span class="p">,</span> <span class="s">&quot;Arial&quot;</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'><span class="n">rich</span><span class="o">-&gt;</span><span class="n">pushBackElement</span><span class="p">(</span><span class="n">element2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>先来看看RichElement和它的几个子类。<!--more--></p>

<figure class='code'><figcaption><span>RichElement</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">CC_GUI_DLL</span> <span class="nl">RichElement</span> <span class="p">:</span> <span class="k">public</span> <span class="n">Ref</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">enum</span> <span class="k">class</span> <span class="nc">Type</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">TEXT</span><span class="p">,</span>
</span><span class='line'>        <span class="n">IMAGE</span><span class="p">,</span>
</span><span class='line'>        <span class="n">CUSTOM</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">RichElement</span><span class="p">(){};</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">RichElement</span><span class="p">(){};</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="nf">init</span><span class="p">(</span><span class="kt">int</span> <span class="n">tag</span><span class="p">,</span> <span class="k">const</span> <span class="n">Color3B</span><span class="o">&amp;</span> <span class="n">color</span><span class="p">,</span> <span class="n">GLubyte</span> <span class="n">opacity</span><span class="p">);</span>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Type</span> <span class="n">_type</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">_tag</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Color3B</span> <span class="n">_color</span><span class="p">;</span>
</span><span class='line'>    <span class="n">GLubyte</span> <span class="n">_opacity</span><span class="p">;</span>
</span><span class='line'>    <span class="k">friend</span> <span class="k">class</span> <span class="nc">RichText</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>RichElement是父类，记录了子类一些公有的属性，类型，标签，颜色，透明度等。 <br/>
RichElementText添加了字体文本，字体，字体大小属性。  <br/>
RichElementImage添加了图片路径属性。 <br/>
RichElementCustomNode添加了一个Node节点，自定义的一些内容，都存储在这个节点中。 <br/>
其实单独看这几个类也没干什么，只是包装了一些信息，而具体的操作，都在RichText类中。</p>

<figure class='code'><figcaption><span>RichText</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">CC_GUI_DLL</span> <span class="nl">RichText</span> <span class="p">:</span> <span class="k">public</span> <span class="n">Widget</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">RichText</span><span class="p">();</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">RichText</span><span class="p">();</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">RichText</span><span class="o">*</span> <span class="nf">create</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//对Vector进行操作</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">insertElement</span><span class="p">(</span><span class="n">RichElement</span><span class="o">*</span> <span class="n">element</span><span class="p">,</span> <span class="kt">int</span> <span class="n">index</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">pushBackElement</span><span class="p">(</span><span class="n">RichElement</span><span class="o">*</span> <span class="n">element</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">removeElement</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">removeElement</span><span class="p">(</span><span class="n">RichElement</span><span class="o">*</span> <span class="n">element</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//设置行间距</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">setVerticalSpace</span><span class="p">(</span><span class="kt">float</span> <span class="n">space</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//设置锚点</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">setAnchorPoint</span><span class="p">(</span><span class="k">const</span> <span class="n">Vec2</span> <span class="o">&amp;</span><span class="n">pt</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//获取content大小</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Size</span> <span class="n">getVirtualRendererSize</span><span class="p">()</span> <span class="k">const</span> <span class="k">override</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//格式化文本</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">formatText</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//设置为false时，setContentSize才有效</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">ignoreContentAdaptWithSize</span><span class="p">(</span><span class="kt">bool</span> <span class="n">ignore</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//获取描述</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">getDescription</span><span class="p">()</span> <span class="k">const</span> <span class="k">override</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">CC_CONSTRUCTOR_ACCESS</span><span class="p">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">init</span><span class="p">()</span> <span class="k">override</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">adaptRenderers</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">initRenderer</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">pushToContainer</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">renderer</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">handleTextRenderer</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">text</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">fontName</span><span class="p">,</span> <span class="kt">float</span> <span class="n">fontSize</span><span class="p">,</span> <span class="k">const</span> <span class="n">Color3B</span><span class="o">&amp;</span> <span class="n">color</span><span class="p">,</span> <span class="n">GLubyte</span> <span class="n">opacity</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">handleImageRenderer</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">fileParh</span><span class="p">,</span> <span class="k">const</span> <span class="n">Color3B</span><span class="o">&amp;</span> <span class="n">color</span><span class="p">,</span> <span class="n">GLubyte</span> <span class="n">opacity</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">handleCustomRenderer</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">renderer</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">formarRenderers</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">addNewLine</span><span class="p">();</span>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>    <span class="c1">//标记是否格式化文本</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">_formatTextDirty</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//存储RichElement的容器，所有RichText添加进来的RichElement都存储在该容器中</span>
</span><span class='line'>    <span class="n">Vector</span><span class="o">&lt;</span><span class="n">RichElement</span><span class="o">*&gt;</span> <span class="n">_richElements</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//_elementRenders中的每个Vector&lt;Node*&gt;中的节点，是每行的所有节点</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Vector</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">*&gt;*&gt;</span> <span class="n">_elementRenders</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//每行剩余宽度，在需要换行时使用</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">_leftSpaceWidth</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//行间距</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">_verticalSpace</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//代表Rich的节点，所有的RichElement都添加在该节点下</span>
</span><span class='line'>    <span class="n">Node</span><span class="o">*</span> <span class="n">_elementRenderersContainer</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先来看添加删除的几个方法</p>

<figure class='code'><figcaption><span>RichText</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">RichText</span><span class="o">::</span><span class="n">insertElement</span><span class="p">(</span><span class="n">RichElement</span> <span class="o">*</span><span class="n">element</span><span class="p">,</span> <span class="kt">int</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_richElements</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">element</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_formatTextDirty</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">RichText</span><span class="o">::</span><span class="n">pushBackElement</span><span class="p">(</span><span class="n">RichElement</span> <span class="o">*</span><span class="n">element</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_richElements</span><span class="p">.</span><span class="n">pushBack</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_formatTextDirty</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">RichText</span><span class="o">::</span><span class="n">removeElement</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_richElements</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_formatTextDirty</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">RichText</span><span class="o">::</span><span class="n">removeElement</span><span class="p">(</span><span class="n">RichElement</span> <span class="o">*</span><span class="n">element</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_richElements</span><span class="p">.</span><span class="n">eraseObject</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_formatTextDirty</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看这几个方法就会发现，添加和删除其实都是在操作_richElements容器，并标记需要格式化文本。  <br/>
拿来看看添加后格式化文本干了什么</p>

<figure class='code'><figcaption><span>formatText()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">RichText</span><span class="o">::</span><span class="n">formatText</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//判断是否需要格式化文本</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_formatTextDirty</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">//清除_elementRenderersContainer节点下的所有子节点</span>
</span><span class='line'>        <span class="n">_elementRenderersContainer</span><span class="o">-&gt;</span><span class="n">removeAllChildren</span><span class="p">();</span>
</span><span class='line'>        <span class="n">_elementRenders</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">//判断是否忽略content大小</span>
</span><span class='line'>        <span class="c1">//默认为true，此时调用setContentSize()无效，文本不会换行，否则会根据设置宽度对文本换行</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">_ignoreSize</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">//此时不进行距离计算，遍历_richElements，根据类型还原RichElement子类，</span>
</span><span class='line'>            <span class="c1">//调用pushToContainer()添加到_elementRenders渲染容器中。</span>
</span><span class='line'>            <span class="n">addNewLine</span><span class="p">();</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">ssize_t</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">_richElements</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">RichElement</span><span class="o">*</span> <span class="n">element</span> <span class="o">=</span> <span class="n">_richElements</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>                <span class="n">Node</span><span class="o">*</span> <span class="n">elementRenderer</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>                <span class="k">switch</span> <span class="p">(</span><span class="n">element</span><span class="o">-&gt;</span><span class="n">_type</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">case</span> <span class="n">RichElement</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="nl">TEXT</span><span class="p">:</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">RichElementText</span><span class="o">*</span> <span class="n">elmtText</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">RichElementText</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="n">FileUtils</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">isFileExist</span><span class="p">(</span><span class="n">elmtText</span><span class="o">-&gt;</span><span class="n">_fontName</span><span class="p">))</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="n">elementRenderer</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithTTF</span><span class="p">(</span><span class="n">elmtText</span><span class="o">-&gt;</span><span class="n">_text</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">elmtText</span><span class="o">-&gt;</span><span class="n">_fontName</span><span class="p">,</span> <span class="n">elmtText</span><span class="o">-&gt;</span><span class="n">_fontSize</span><span class="p">);</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="k">else</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="n">elementRenderer</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithSystemFont</span><span class="p">(</span><span class="n">elmtText</span><span class="o">-&gt;</span><span class="n">_text</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">elmtText</span><span class="o">-&gt;</span><span class="n">_fontName</span><span class="p">,</span> <span class="n">elmtText</span><span class="o">-&gt;</span><span class="n">_fontSize</span><span class="p">);</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">case</span> <span class="n">RichElement</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="nl">IMAGE</span><span class="p">:</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">RichElementImage</span><span class="o">*</span> <span class="n">elmtImage</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">RichElementImage</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>
</span><span class='line'>                        <span class="n">elementRenderer</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">elmtImage</span><span class="o">-&gt;</span><span class="n">_filePath</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">case</span> <span class="n">RichElement</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="nl">CUSTOM</span><span class="p">:</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">RichElementCustomNode</span><span class="o">*</span> <span class="n">elmtCustom</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">RichElementCustomNode</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>
</span><span class='line'>                        <span class="n">elementRenderer</span> <span class="o">=</span> <span class="n">elmtCustom</span><span class="o">-&gt;</span><span class="n">_customNode</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">elementRenderer</span><span class="o">-&gt;</span><span class="n">setColor</span><span class="p">(</span><span class="n">element</span><span class="o">-&gt;</span><span class="n">_color</span><span class="p">);</span>
</span><span class='line'>                <span class="n">elementRenderer</span><span class="o">-&gt;</span><span class="n">setOpacity</span><span class="p">(</span><span class="n">element</span><span class="o">-&gt;</span><span class="n">_opacity</span><span class="p">);</span>
</span><span class='line'>                <span class="n">pushToContainer</span><span class="p">(</span><span class="n">elementRenderer</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">//因为要根据contentSize进行换行，所以要根据RichElement内容进行长度计算，调用对应handleXXXRenderer方法进行计算</span>
</span><span class='line'>            <span class="n">addNewLine</span><span class="p">();</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">ssize_t</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">_richElements</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">RichElement</span><span class="o">*</span> <span class="n">element</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">RichElement</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">_richElements</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">));</span>
</span><span class='line'>                <span class="k">switch</span> <span class="p">(</span><span class="n">element</span><span class="o">-&gt;</span><span class="n">_type</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">case</span> <span class="n">RichElement</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="nl">TEXT</span><span class="p">:</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">RichElementText</span><span class="o">*</span> <span class="n">elmtText</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">RichElementText</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>
</span><span class='line'>                        <span class="n">handleTextRenderer</span><span class="p">(</span><span class="n">elmtText</span><span class="o">-&gt;</span><span class="n">_text</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">elmtText</span><span class="o">-&gt;</span><span class="n">_fontName</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">elmtText</span><span class="o">-&gt;</span><span class="n">_fontSize</span><span class="p">,</span> <span class="n">elmtText</span><span class="o">-&gt;</span><span class="n">_color</span><span class="p">,</span> <span class="n">elmtText</span><span class="o">-&gt;</span><span class="n">_opacity</span><span class="p">);</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">case</span> <span class="n">RichElement</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="nl">IMAGE</span><span class="p">:</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">RichElementImage</span><span class="o">*</span> <span class="n">elmtImage</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">RichElementImage</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>
</span><span class='line'>                        <span class="n">handleImageRenderer</span><span class="p">(</span><span class="n">elmtImage</span><span class="o">-&gt;</span><span class="n">_filePath</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">elmtImage</span><span class="o">-&gt;</span><span class="n">_color</span><span class="p">,</span> <span class="n">elmtImage</span><span class="o">-&gt;</span><span class="n">_opacity</span><span class="p">);</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">case</span> <span class="n">RichElement</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="nl">CUSTOM</span><span class="p">:</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">RichElementCustomNode</span><span class="o">*</span> <span class="n">elmtCustom</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">RichElementCustomNode</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>
</span><span class='line'>                        <span class="n">handleCustomRenderer</span><span class="p">(</span><span class="n">elmtCustom</span><span class="o">-&gt;</span><span class="n">_customNode</span><span class="p">);</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">formarRenderers</span><span class="p">();</span>
</span><span class='line'>        <span class="n">_formatTextDirty</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>formatText()主要对_richElements容器内的元素进行分类，text其实就是一个Label,image是Sprite,而custom就是一个Node节点。忽略content大小的比较简单，直接添加节点就好了，而计算的就比较麻烦了，可以看看对text的计算方法，image和custom类似。</p>

<figure class='code'><figcaption><span>handleTextRenderer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">RichText</span><span class="o">::</span><span class="n">handleTextRenderer</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">text</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">fontName</span><span class="p">,</span> <span class="kt">float</span> <span class="n">fontSize</span><span class="p">,</span> <span class="k">const</span> <span class="n">Color3B</span> <span class="o">&amp;</span><span class="n">color</span><span class="p">,</span> <span class="n">GLubyte</span> <span class="n">opacity</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//先判断是否存在字体文件，然后调用不同的Label方法</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">fileExist</span> <span class="o">=</span> <span class="n">FileUtils</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">isFileExist</span><span class="p">(</span><span class="n">fontName</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Label</span><span class="o">*</span> <span class="n">textRenderer</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">fileExist</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">textRenderer</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithTTF</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">fontName</span><span class="p">,</span> <span class="n">fontSize</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">textRenderer</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithSystemFont</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">fontName</span><span class="p">,</span> <span class="n">fontSize</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//获取文本宽度</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">textRendererWidth</span> <span class="o">=</span> <span class="n">textRenderer</span><span class="o">-&gt;</span><span class="n">getContentSize</span><span class="p">().</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//计算一行剩下的宽度</span>
</span><span class='line'>    <span class="n">_leftSpaceWidth</span> <span class="o">-=</span> <span class="n">textRendererWidth</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//如果剩余宽度小于0，就需要对文本进行换行，创建新的Label</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_leftSpaceWidth</span> <span class="o">&lt;</span> <span class="mf">0.0f</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">//计算超出文本的比例</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">overstepPercent</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="n">_leftSpaceWidth</span><span class="p">)</span> <span class="o">/</span> <span class="n">textRendererWidth</span><span class="p">;</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">curText</span> <span class="o">=</span> <span class="n">text</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//计算原始文本长度</span>
</span><span class='line'>        <span class="kt">size_t</span> <span class="n">stringLength</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">::</span><span class="n">getCharacterCountInUTF8String</span><span class="p">(</span><span class="n">text</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//计算未超出长度</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">leftLength</span> <span class="o">=</span> <span class="n">stringLength</span> <span class="o">*</span> <span class="p">(</span><span class="mf">1.0f</span> <span class="o">-</span> <span class="n">overstepPercent</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//未超出文本</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">leftWords</span> <span class="o">=</span> <span class="n">Helper</span><span class="o">::</span><span class="n">getSubStringOfUTF8String</span><span class="p">(</span><span class="n">curText</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">leftLength</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//超出文本</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">cutWords</span> <span class="o">=</span> <span class="n">Helper</span><span class="o">::</span><span class="n">getSubStringOfUTF8String</span><span class="p">(</span><span class="n">curText</span><span class="p">,</span> <span class="n">leftLength</span><span class="p">,</span> <span class="n">stringLength</span> <span class="o">-</span> <span class="n">leftLength</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//对未查出文本生成的Label</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">leftLength</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Label</span><span class="o">*</span> <span class="n">leftRenderer</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">fileExist</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">leftRenderer</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithTTF</span><span class="p">(</span><span class="n">Helper</span><span class="o">::</span><span class="n">getSubStringOfUTF8String</span><span class="p">(</span><span class="n">leftWords</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">leftLength</span><span class="p">),</span> <span class="n">fontName</span><span class="p">,</span> <span class="n">fontSize</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">leftRenderer</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithSystemFont</span><span class="p">(</span><span class="n">Helper</span><span class="o">::</span><span class="n">getSubStringOfUTF8String</span><span class="p">(</span><span class="n">leftWords</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">leftLength</span><span class="p">),</span> <span class="n">fontName</span><span class="p">,</span> <span class="n">fontSize</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">leftRenderer</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">leftRenderer</span><span class="o">-&gt;</span><span class="n">setColor</span><span class="p">(</span><span class="n">color</span><span class="p">);</span>
</span><span class='line'>                <span class="n">leftRenderer</span><span class="o">-&gt;</span><span class="n">setOpacity</span><span class="p">(</span><span class="n">opacity</span><span class="p">);</span>
</span><span class='line'>                <span class="n">pushToContainer</span><span class="p">(</span><span class="n">leftRenderer</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">//换行，递归调用handleTextRenderer()对超出文本进行计算</span>
</span><span class='line'>        <span class="n">addNewLine</span><span class="p">();</span>
</span><span class='line'>        <span class="n">handleTextRenderer</span><span class="p">(</span><span class="n">cutWords</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">fontName</span><span class="p">,</span> <span class="n">fontSize</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">opacity</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">textRenderer</span><span class="o">-&gt;</span><span class="n">setColor</span><span class="p">(</span><span class="n">color</span><span class="p">);</span>
</span><span class='line'>        <span class="n">textRenderer</span><span class="o">-&gt;</span><span class="n">setOpacity</span><span class="p">(</span><span class="n">opacity</span><span class="p">);</span>
</span><span class='line'>        <span class="n">pushToContainer</span><span class="p">(</span><span class="n">textRenderer</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上边方法处理了RichText文本宽度问题，那高度问题是怎么处理的，那就得看formarRenderers方法了</p>

<figure class='code'><figcaption><span>formarRenderers</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">RichText</span><span class="o">::</span><span class="n">formarRenderers</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_ignoreSize</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">//不需要换行的，以所有元素中高度最高的为_elementRenderersContainer节点的高度</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">newContentSizeWidth</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">newContentSizeHeight</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Vector</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">*&gt;*</span> <span class="n">row</span> <span class="o">=</span> <span class="p">(</span><span class="n">_elementRenders</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">nextPosX</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">ssize_t</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">row</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Node</span><span class="o">*</span> <span class="n">l</span> <span class="o">=</span> <span class="n">row</span><span class="o">-&gt;</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>            <span class="n">l</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="o">::</span><span class="n">ZERO</span><span class="p">);</span>
</span><span class='line'>            <span class="n">l</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">nextPosX</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">);</span>
</span><span class='line'>            <span class="n">_elementRenderersContainer</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="n">Size</span> <span class="n">iSize</span> <span class="o">=</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">getContentSize</span><span class="p">();</span>
</span><span class='line'>            <span class="n">newContentSizeWidth</span> <span class="o">+=</span> <span class="n">iSize</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>            <span class="n">newContentSizeHeight</span> <span class="o">=</span> <span class="n">MAX</span><span class="p">(</span><span class="n">newContentSizeHeight</span><span class="p">,</span> <span class="n">iSize</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>            <span class="n">nextPosX</span> <span class="o">+=</span> <span class="n">iSize</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">_elementRenderersContainer</span><span class="o">-&gt;</span><span class="n">setContentSize</span><span class="p">(</span><span class="n">Size</span><span class="p">(</span><span class="n">newContentSizeWidth</span><span class="p">,</span> <span class="n">newContentSizeHeight</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">//需要换行的，需要计算每行最高的外，还需要加上行间距</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">newContentSizeHeight</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">float</span> <span class="o">*</span><span class="n">maxHeights</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">float</span><span class="p">[</span><span class="n">_elementRenders</span><span class="p">.</span><span class="n">size</span><span class="p">()];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">_elementRenders</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Vector</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">*&gt;*</span> <span class="n">row</span> <span class="o">=</span> <span class="p">(</span><span class="n">_elementRenders</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">maxHeight</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">ssize_t</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">row</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Node</span><span class="o">*</span> <span class="n">l</span> <span class="o">=</span> <span class="n">row</span><span class="o">-&gt;</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>                <span class="n">maxHeight</span> <span class="o">=</span> <span class="n">MAX</span><span class="p">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">getContentSize</span><span class="p">().</span><span class="n">height</span><span class="p">,</span> <span class="n">maxHeight</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">maxHeights</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">maxHeight</span><span class="p">;</span>
</span><span class='line'>            <span class="n">newContentSizeHeight</span> <span class="o">+=</span> <span class="n">maxHeights</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="kt">float</span> <span class="n">nextPosY</span> <span class="o">=</span> <span class="n">_customSize</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">_elementRenders</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Vector</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">*&gt;*</span> <span class="n">row</span> <span class="o">=</span> <span class="p">(</span><span class="n">_elementRenders</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">nextPosX</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>            <span class="n">nextPosY</span> <span class="o">-=</span> <span class="p">(</span><span class="n">maxHeights</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">_verticalSpace</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">ssize_t</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">row</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Node</span><span class="o">*</span> <span class="n">l</span> <span class="o">=</span> <span class="n">row</span><span class="o">-&gt;</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>                <span class="n">l</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="o">::</span><span class="n">ZERO</span><span class="p">);</span>
</span><span class='line'>                <span class="n">l</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">nextPosX</span><span class="p">,</span> <span class="n">nextPosY</span><span class="p">);</span>
</span><span class='line'>                <span class="n">_elementRenderersContainer</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                <span class="n">nextPosX</span> <span class="o">+=</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">getContentSize</span><span class="p">().</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">_elementRenderersContainer</span><span class="o">-&gt;</span><span class="n">setContentSize</span><span class="p">(</span><span class="n">_contentSize</span><span class="p">);</span>
</span><span class='line'>        <span class="k">delete</span> <span class="p">[]</span> <span class="n">maxHeights</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//清除_elementRenders容器元素</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">length</span> <span class="o">=</span> <span class="n">_elementRenders</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Vector</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">*&gt;*</span> <span class="n">l</span> <span class="o">=</span> <span class="n">_elementRenders</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="n">l</span><span class="o">-&gt;</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">l</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">_elementRenders</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_ignoreSize</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Size</span> <span class="n">s</span> <span class="o">=</span> <span class="n">getVirtualRendererSize</span><span class="p">();</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">setContentSize</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">setContentSize</span><span class="p">(</span><span class="n">_customSize</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">updateContentSizeWithTextureSize</span><span class="p">(</span><span class="n">_contentSize</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_elementRenderersContainer</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">_contentSize</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mf">2.0f</span><span class="p">,</span> <span class="n">_contentSize</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mf">2.0f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
以上就是RichText富文本处理过程了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS -- 编译静态库]]></title>
    <link href="http://ypengju.github.io/blog/2015/01/27/ios-bian-yi-jing-tai-ku/"/>
    <updated>2015-01-27T16:47:25+08:00</updated>
    <id>http://ypengju.github.io/blog/2015/01/27/ios-bian-yi-jing-tai-ku</id>
    <content type="html"><![CDATA[<p>今天项目接第三方静态库被坑了一下，模拟器编译错误，真机编译通过，原来不懂，以为项目路径等问题，查了半天，没发现问题，后来才发现是第三方静态库的问题，被坑也叫坑，有坑赶紧填，填了就是路，上！  <br/>
原来ios静态库分为两种，模拟器和真机的，两个静态是不一样的，原因在于模拟器用的是i386框架的，真机使用的arm6,arm7框架的，上边的坑就是这样埋下的。下边来从一个新的静态库工程开始，看看静态库的创建过程。</p>

<h4>创建静态库工程</h4>

<p>如下图开始创建静态库工程
<img src="http://ypengju.github.io/images/libstatic/1.png"></p>

<!--more-->


<p>为了方便，只定义了两个方法<code>printHelloWorld</code>和<code>printABCD</code>
<img src="http://ypengju.github.io/images/libstatic/2.png"><br/>
编译之前，我们需要选择是真机库还是模拟器库，如下图，IOS Device就是真机，模拟器编译出来的就是模拟器的，但需要注意的是模拟器用4S编译的库在使用的时候，如果用5以上的模拟器，会报错，所以编译模拟器库的时候最好选择5以上版本进行编译。
<img src="http://ypengju.github.io/images/libstatic/3.png"> <br/>
此时直接编译会出错
<img src="http://ypengju.github.io/images/libstatic/4.png">
我测的是debug静态库，需要进行如下签名设置，release版本也需要进行相关签名设置
<img src="http://ypengju.github.io/images/libstatic/5.png">
编译通过后，在Products文件夹下回出现.a文件，右键->Show in Finder，Debug-iphoneos文件夹下的就是真机库，Debug-iphonesimulator文件夹下的就是模拟器库。
<img src="http://ypengju.github.io/images/libstatic/6.png"> <br/>
如果你将真机的库在模拟器上使用就会报找不到i386,找不到文件，这就是我在项目中遇到的坑了，其实我们可以使用<code>lipo</code>命令来查看.a文件的信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Debug-iphoneos$ lipo -info libHelloStatic.a 
</span><span class='line'>Architectures in the fat file: libHelloStatic.a are: armv7 arm64 
</span><span class='line'>Debug-iphonesimulator$ lipo -info libHelloStatic.a 
</span><span class='line'>input file libHelloStatic.a is not a fat file
</span><span class='line'>Non-fat file: libHelloStatic.a is architecture: i386</span></code></pre></td></tr></table></div></figure>


<p> <br/>
这样可以可以看出模拟器的是i386的，真机是arm的。但是分两个总是很麻烦，我们可以用lipo命令将两个包合并成一个包，这样两个都就可以使用了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ lipo -create ./os/libHelloStatic.a ./similator/libHelloStatic.a -output ./libHelloStatic.a</span></code></pre></td></tr></table></div></figure>


<p>前两个是文件路径，最后一个是输出路径，合并后查看信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ lipo -info libHelloStatic.a 
</span><span class='line'>Architectures in the fat file: libHelloStatic.a are: armv7 i386 arm64 </span></code></pre></td></tr></table></div></figure>


<p>填坑结束！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS -- 本地通知]]></title>
    <link href="http://ypengju.github.io/blog/2015/01/08/ios-ben-di-tui-song/"/>
    <updated>2015-01-08T11:33:25+08:00</updated>
    <id>http://ypengju.github.io/blog/2015/01/08/ios-ben-di-tui-song</id>
    <content type="html"><![CDATA[<p>为了提高用户的关注度，我们经常会推送一些新的内容给用户。ios中主要有两种推送，一种是远程通知，一种是本地通知，远程通知是和服务器端配合完成的，这里暂不说明，这篇文章主要说下本地通知。 <br/>
本地通知是在ios4.0之后添加的，但是在ios8之后，在设置通知之前，需要先对通知进行注册，注册需要的通知类型，否则收不到响应类型的通知消息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">//ios8需要注册推送</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="bp">UIApplication</span> <span class="nl">instancesRespondToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">registerUserNotificationSettings</span><span class="p">:)]){</span>
</span><span class='line'>    <span class="c1">//通知类型</span>
</span><span class='line'>    <span class="n">UIUserNotificationType</span> <span class="n">types</span> <span class="o">=</span> <span class="n">UIUserNotificationTypeBadge</span> <span class="o">|</span>
</span><span class='line'>    <span class="n">UIUserNotificationTypeSound</span> <span class="o">|</span> <span class="n">UIUserNotificationTypeAlert</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//设置通知类型和动画</span>
</span><span class='line'>    <span class="n">UIUserNotificationSettings</span> <span class="o">*</span><span class="n">mySettings</span> <span class="o">=</span>
</span><span class='line'>    <span class="p">[</span><span class="n">UIUserNotificationSettings</span> <span class="nl">settingsForTypes</span><span class="p">:</span><span class="n">types</span> <span class="nl">categories</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//注册</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">registerUserNotificationSettings</span><span class="p">:</span><span class="n">mySettings</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>上边注册了Icon角标，声音，和警告通知，当程序第一次调用<code>registerUserNotificationSettings</code>的时候，程序会询问用户是否允许程序发送通知，在用户选择之后(不管是同意与否)，程序会异步调用<code>- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)</code>函数。所有的注册类型都会可通过<code>currentUserNotificationSettings</code>变量获得。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="bp">UILocalNotification</span> <span class="o">*</span><span class="n">notification</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UILocalNotification</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">notification</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//设置时区</span>
</span><span class='line'>    <span class="n">notification</span><span class="p">.</span><span class="n">timeZone</span><span class="o">=</span><span class="p">[</span><span class="bp">NSTimeZone</span> <span class="n">defaultTimeZone</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//设置推送的时间点</span>
</span><span class='line'>    <span class="bp">NSDateFormatter</span> <span class="o">*</span><span class="n">formatter</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSDateFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">formatter</span> <span class="nl">setDateFormat</span><span class="p">:</span><span class="s">@&quot;HH:mm:ss&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSDate</span> <span class="o">*</span><span class="n">date</span> <span class="o">=</span> <span class="p">[</span><span class="n">formatter</span> <span class="nl">dateFromString</span><span class="p">:</span><span class="s">@&quot;09:00:00&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">notification</span><span class="p">.</span><span class="n">fireDate</span><span class="o">=</span><span class="n">date</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//通知重复提示的单位，可以是天、周、月</span>
</span><span class='line'>    <span class="n">notification</span><span class="p">.</span><span class="n">repeatInterval</span> <span class="o">=</span> <span class="n">kCFCalendarUnitDay</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//推送的内容</span>
</span><span class='line'>    <span class="n">notification</span><span class="p">.</span><span class="n">alertBody</span> <span class="o">=</span> <span class="s">@&quot;this is a notificaiton&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//推送声音</span>
</span><span class='line'>    <span class="n">notification</span><span class="p">.</span><span class="n">soundName</span> <span class="o">=</span> <span class="n">UILocalNotificationDefaultSoundName</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//应用右上角红色图标数字</span>
</span><span class='line'>    <span class="n">notification</span><span class="p">.</span><span class="n">applicationIconBadgeNumber</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//自定义信息</span>
</span><span class='line'>    <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">infoDict</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSDictionary</span> <span class="nl">dictionaryWithObject</span><span class="p">:</span><span class="s">@&quot;two&quot;</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;one&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">notification</span><span class="p">.</span><span class="n">userInfo</span> <span class="o">=</span> <span class="n">infoDict</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="bp">UIApplication</span> <span class="o">*</span><span class="n">app</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">app</span> <span class="nl">scheduleLocalNotification</span><span class="p">:</span><span class="n">notification</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>本地通知是通过<code>UILocalNotification</code>类来完成的，首先需要通过<code>fireDate</code>设置通知的时间点，还可设置通知的内容，声音，角标数等。除此之外，用户还可通过<code>userInfo</code>设置自定义数据。具体可参考<a href="https://developer.apple.com/library/ios/documentation/iPhone/Reference/UILocalNotification_Class/index.html#//apple_ref/occ/cl/UILocalNotification">UILocalNotification官方文档</a></p>

<p>当程序正在运行时，收到通知时，会调用<code>application:didReceiveLocalNotification</code>方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="bp">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didReceiveLocalNotification:</span><span class="p">(</span><span class="bp">UILocalNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">notification</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">infoDict</span> <span class="o">=</span> <span class="n">notification</span><span class="p">.</span><span class="n">userInfo</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">[</span><span class="n">infoDict</span> <span class="nl">objectForKey</span><span class="p">:</span><span class="s">@&quot;one&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">str</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;two&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;--------yes  equal&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;--------no &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>取消通知时，可以使用<code>cancelLocalNotification</code>取消具体某个通知或者通过<code>cancelAllLocalNotifications</code>取消全部通知。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">cancelAllLocalNotifications</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们添加了角标，在通知之后，角标会一直存在，当需要取消角标时，可利用下边语句</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">setApplicationIconBadgeNumber</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>从ios8开始，通知添加了通知动作事件，如果有注意到，我们上边的进行注册的时候categories赋值为nil，此变量就是用来添加动作事件的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">//ios8需要注册推送</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="bp">UIApplication</span> <span class="nl">instancesRespondToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">registerUserNotificationSettings</span><span class="p">:)]){</span>
</span><span class='line'>    <span class="n">UIMutableUserNotificationAction</span> <span class="o">*</span><span class="n">acceptAction</span> <span class="o">=</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIMutableUserNotificationAction</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">acceptAction</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;accept_action&quot;</span><span class="p">;</span> <span class="c1">//ID</span>
</span><span class='line'>    <span class="n">acceptAction</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">@&quot;Accept&quot;</span><span class="p">;</span>             <span class="c1">//按钮内容</span>
</span><span class='line'>    <span class="n">acceptAction</span><span class="p">.</span><span class="n">activationMode</span> <span class="o">=</span> <span class="n">UIUserNotificationActivationModeBackground</span><span class="p">;</span>
</span><span class='line'>    <span class="n">acceptAction</span><span class="p">.</span><span class="n">destructive</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="n">acceptAction</span><span class="p">.</span><span class="n">authenticationRequired</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIMutableUserNotificationAction</span> <span class="o">*</span><span class="n">cancelAction</span> <span class="o">=</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIMutableUserNotificationAction</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">cancelAction</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;cancel_action&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cancelAction</span><span class="p">.</span><span class="n">title</span><span class="o">=</span><span class="s">@&quot;Cancel&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cancelAction</span><span class="p">.</span><span class="n">activationMode</span> <span class="o">=</span> <span class="n">UIUserNotificationActivationModeBackground</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cancelAction</span><span class="p">.</span><span class="n">destructive</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cancelAction</span><span class="p">.</span><span class="n">authenticationRequired</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// First create the category</span>
</span><span class='line'>    <span class="n">UIMutableUserNotificationCategory</span> <span class="o">*</span><span class="n">inviteCategory</span> <span class="o">=</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIMutableUserNotificationCategory</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">inviteCategory</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;INVITE_CATEGORY&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">inviteCategory</span> <span class="nl">setActions</span><span class="p">:</span><span class="l">@[</span><span class="n">acceptAction</span><span class="p">,</span> <span class="n">cancelAction</span><span class="l">]</span>
</span><span class='line'>                    <span class="nl">forContext</span><span class="p">:</span><span class="n">UIUserNotificationActionContextDefault</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSSet</span> <span class="o">*</span><span class="n">categories</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSSet</span> <span class="nl">setWithObject</span><span class="p">:</span><span class="n">inviteCategory</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//通知类型</span>
</span><span class='line'>    <span class="n">UIUserNotificationType</span> <span class="n">types</span> <span class="o">=</span> <span class="n">UIUserNotificationTypeBadge</span> <span class="o">|</span>
</span><span class='line'>    <span class="n">UIUserNotificationTypeSound</span> <span class="o">|</span> <span class="n">UIUserNotificationTypeAlert</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UIUserNotificationSettings</span> <span class="o">*</span><span class="n">mySettings</span> <span class="o">=</span>
</span><span class='line'>    <span class="p">[</span><span class="n">UIUserNotificationSettings</span> <span class="nl">settingsForTypes</span><span class="p">:</span><span class="n">types</span> <span class="nl">categories</span><span class="p">:</span><span class="n">categories</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//注册</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">registerUserNotificationSettings</span><span class="p">:</span><span class="n">mySettings</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="bp">UILocalNotification</span> <span class="o">*</span><span class="n">notification</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UILocalNotification</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">notification</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//时区</span>
</span><span class='line'>    <span class="n">notification</span><span class="p">.</span><span class="n">timeZone</span><span class="o">=</span><span class="p">[</span><span class="bp">NSTimeZone</span> <span class="n">defaultTimeZone</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSDateFormatter</span> <span class="o">*</span><span class="n">formatter</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSDateFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">formatter</span> <span class="nl">setDateFormat</span><span class="p">:</span><span class="s">@&quot;ss&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSDate</span> <span class="o">*</span><span class="n">date</span> <span class="o">=</span> <span class="p">[</span><span class="n">formatter</span> <span class="nl">dateFromString</span><span class="p">:</span><span class="s">@&quot;10&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">notification</span><span class="p">.</span><span class="n">alertBody</span> <span class="o">=</span> <span class="s">@&quot;haha&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">notification</span><span class="p">.</span><span class="n">fireDate</span><span class="o">=</span><span class="n">date</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//通知重复提示的单位，可以是天、周、月</span>
</span><span class='line'>    <span class="n">notification</span><span class="p">.</span><span class="n">repeatInterval</span> <span class="o">=</span> <span class="n">kCFCalendarUnitMinute</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//推送声音</span>
</span><span class='line'>    <span class="n">notification</span><span class="p">.</span><span class="n">soundName</span> <span class="o">=</span> <span class="n">UILocalNotificationDefaultSoundName</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//应用右上角红色图标数字</span>
</span><span class='line'>    <span class="n">notification</span><span class="p">.</span><span class="n">applicationIconBadgeNumber</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">notification</span><span class="p">.</span><span class="n">category</span> <span class="o">=</span> <span class="s">@&quot;INVITE_CATEGORY&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">infoDict</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSDictionary</span> <span class="nl">dictionaryWithObject</span><span class="p">:</span><span class="s">@&quot;two&quot;</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;one&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">notification</span><span class="p">.</span><span class="n">userInfo</span> <span class="o">=</span> <span class="n">infoDict</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="bp">UIApplication</span> <span class="o">*</span><span class="n">app</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">app</span> <span class="nl">scheduleLocalNotification</span><span class="p">:</span><span class="n">notification</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上就是一个动作的事件的注册过程，其中用到了<code>UIMutableUserNotificationAction</code>和<code>UIMutableUserNotificationCategory</code>具体用法可参考官方文档 <br/>
<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIMutableUserNotificationAction_class/index.html#//apple_ref/occ/cl/UIMutableUserNotificationAction">UIMutableUserNotificationAction</a> <br/>
<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIMutableUserNotificationCategory_class/index.html#//apple_ref/occ/cl/UIMutableUserNotificationCategory">UIMutableUserNotificationCategory</a> <br/>
这两个类，注册完之后，特别需要主意，要在本地通知中进行设置，否则没有效果。值为注册时category指定的ID</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">notification</span><span class="p">.</span><span class="n">category</span> <span class="o">=</span> <span class="s">@&quot;INVITE_CATEGORY&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样当我们收到通知，下拉一下就可看到动作事件，有事件，就有事件的回调函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="bp">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">handleActionWithIdentifier:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">identifier</span> <span class="nf">forLocalNotification:</span><span class="p">(</span><span class="bp">UILocalNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">notification</span> <span class="nf">completionHandler:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)())</span><span class="nv">completionHandler</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">identifier</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;accept_action&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;-----accept action&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">identifier</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;cancel_action&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;-----cancel action&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">completionHandler</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">completionHandler</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过id我们就可以区分不同的动作，然后对其进行相应处理，最后调用<code>completionHandler();</code>。</p>

<h3>参考</h3>

<p><a href="https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW26">官方文档:Local and Remote Notification Programming Guide</a> <br/>
<a href="http://www.cocoachina.com/ios/20141009/9857.html">iOS 8创建交互式通知</a></p>

<h3>源码</h3>

<p><a href="https://github.com/ypengju/IOSTest/tree/master/LocalNotification">https://github.com/ypengju/IOSTest/tree/master/LocalNotification</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式 -- 单例]]></title>
    <link href="http://ypengju.github.io/blog/2015/01/04/she-ji-mo-shi-dan-li/"/>
    <updated>2015-01-04T16:54:35+08:00</updated>
    <id>http://ypengju.github.io/blog/2015/01/04/she-ji-mo-shi-dan-li</id>
    <content type="html"><![CDATA[<p>单例可以说是我们最常使用的一种设计模式了，它使得我们在调用过程中始终保持一个实例，用来进行全局调用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//Singleton.h</span>
</span><span class='line'><span class="cp">#ifndef __Singleton__Singleton__</span>
</span><span class='line'><span class="cp">#define __Singleton__Singleton__</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Singleton</span><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Singleton</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">Singleton</span><span class="o">*</span> <span class="n">getInstance</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* defined(__Singleton__Singleton__) */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Singleton.cpp</span>
</span><span class='line'><span class="cp">#include &quot;Singleton.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">Singleton</span> <span class="o">*</span><span class="n">instance</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'><span class="n">Singleton</span><span class="o">::</span><span class="n">Singleton</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">Singleton</span><span class="o">*</span> <span class="n">Singleton</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">instance</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>   <!--more-->
* 私有构造，确保类不能被实例化，避免多个实例存在。
* 因为这个类其他地方不能实例化，所以需要类自己在静态方法中进行实例，这个方法是在new自己，因为其可以访问私有的构造函数，所以他是可以保证实例被创建出来的。
* 使用一个静态方法，对其进行实例化，先判断是否已经实例化，如果没有，创建实例，否则返回实例。
* 实例化保存在私有静态成员中。
* 然后在其他类中我们就可以使用Singleton::getInstance()来访问实例。</p>

<p>这是一个非线程安全的，没有考虑内存释放的粗糙版本，为什么，请看这篇文章<a href="http://blog.csdn.net/haoel/article/details/4028232">深入浅出单实例Singleton设计模式</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++11 -- 新特性]]></title>
    <link href="http://ypengju.github.io/blog/2015/01/04/c-plus-plus-11-xin-te-xing/"/>
    <updated>2015-01-04T09:41:02+08:00</updated>
    <id>http://ypengju.github.io/blog/2015/01/04/c-plus-plus-11-xin-te-xing</id>
    <content type="html"><![CDATA[<p>在cocos2d-x 3.X之后的版本中，可以看到很多关于c++11新特性的使用，这篇文章学习记录下c++11的新特性及使用方法。</p>

<h3>auto</h3>

<h4>变量初始化</h4>

<p>在c++11中，我们可以想其他动态语言一样，不需要指明一个变量的具体类型，直接对变量进行声明初始化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;hello world&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;CloseNormal.png&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
这样在声明变量时，我们不需要指明变量的具体类型，但是在使用auto时，我们必须对变量赋值。同时我们还可以使用在STL的迭代器中，使得代码更加简单易读。<!--more--></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">map</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">begin</span><span class="p">(</span><span class="n">map</span><span class="p">);</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">end</span><span class="p">(</span><span class="n">map</span><span class="p">);</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>函数返回值</h4>

<p>auto不能用来声明函数的返回值。但如果函数有一个尾随的返回类型时，auto是可以出现在函数声明中返回值位置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T1</span><span class="p">,</span> <span class="k">typename</span> <span class="n">T2</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">compose</span><span class="p">(</span><span class="n">T1</span> <span class="n">t1</span><span class="p">,</span> <span class="n">T2</span> <span class="n">t2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="k">decltype</span><span class="p">(</span><span class="n">t1</span> <span class="o">+</span> <span class="n">t2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">t1</span><span class="o">+</span><span class="n">t2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">auto</span> <span class="n">v</span> <span class="o">=</span> <span class="n">compose</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mf">3.14</span><span class="p">);</span> <span class="c1">// v&#39;s type is double   </span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
此时，函数的返回值类型取决于两个参数相加后的数值类型。</p>

<h3>nullptr</h3>

<p>以前都是用0来表示空指针的，但由于0可以被隐式类型转换为整形，这就会存在一些问题。关键字nullptr是std::nullptr_t类型的值，用来指代空指针。nullptr和任何指针类型以及类成员指针类型的空值之间可以发生隐式类型转换，同样也可以隐式转换为bool型（取值为false）。但是不存在到整形的隐式类型转换。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span><span class="p">(</span> <span class="nb">NULL</span> <span class="p">);</span> <span class="c1">// guess which function gets called?</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
func传入的参数为NULL空指针，按理我们应该调用第二个函数，但是由于NULL就是0，而0是一个整形，所以实际调用的是第一个函数。使用nullptr就避免了这种问题，他明确指的是一个指针，而不会隐式转换为整形。</p>

<h3>基于范围的for循环</h3>

<p>之前使用for语句，我们必须指明下标，访问元素的个数。新的for循环语句像其他语言foreach语句一样，我们只关心遍历了数组中所有元素，而不用关心是按怎么样下标顺序进行访问。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">map</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="n">map</span><span class="p">[</span><span class="s">&quot;one&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="nl">kvp</span> <span class="p">:</span> <span class="n">map</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">kvp</span><span class="p">.</span><span class="n">first</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">v</span> <span class="p">:</span> <span class="n">kvp</span><span class="p">.</span><span class="n">second</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>     <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">v</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">};</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span><span class="o">&amp;</span> <span class="nl">e</span> <span class="p">:</span> <span class="n">arr</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">*</span><span class="n">e</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>override和final</h3>

<p>在原来的情况因为疏忽或者不注意我们可能会造成一些微妙的错误。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">B</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">short</span><span class="p">)</span> <span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;B::f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">D</span> <span class="o">:</span> <span class="k">public</span> <span class="n">B</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;D::f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>
D::f 按理应当重写 B::f。然而二者的声明是不同的，一个参数是short，另一个是int。因此D::f（原文为B::f，可能是作者笔误——译者注）只是拥有同样名字的另一个函数（重载）而不是重写。当你通过B类型的指针调用f()可能会期望打印出D::f，但实际上则会打出 B::f 。 <br/>
另一个很微妙的错误情况：参数相同，但是基类的函数是const的，派生类的函数却不是。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">B</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;B::f &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">D</span> <span class="o">:</span> <span class="k">public</span> <span class="n">B</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;D::f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
同样，这两个函数是重载而不是重写，所以你通过B类型指针调用f()将打印B::f，而不是D::f。</p>

<ul>
<li>override 表示函数应当重写基类中的虚函数。</li>
<li>final 表示派生类不应当重写这个虚函数。</li>
</ul>


<p>使用上边两个新的标示符后，我们可以清晰的表达我们的意图。
可以使用override明确表明此方法是否是父类方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">B</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;B::f &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">D</span> <span class="o">:</span> <span class="k">public</span> <span class="n">B</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="k">override</span> <span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;D::f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>    <span class="c1">//OK</span>
</span><span class='line'>   <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">double</span><span class="p">)</span> <span class="k">override</span> <span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;D::f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span> <span class="c1">//Error</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你希望函数不要再被派生类进一步重写，你可以把它标识为final。可以在基类或任何派生类中使用final。在派生类中，可以同时使用override和final标识。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">B</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;B::f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">D</span> <span class="o">:</span> <span class="k">public</span> <span class="n">B</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="k">override</span> <span class="k">final</span> <span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;D::f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">F</span> <span class="o">:</span> <span class="k">public</span> <span class="n">D</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="k">override</span> <span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;F::f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
被标记成final的函数将不能再被F::f重写。</p>

<h3>强类型枚举</h3>

<p>传统的C++枚举类型存在一些缺陷：它们会将枚举常量暴露在外层作用域中（这可能导致名字冲突，如果同一个作用域中存在两个不同的枚举类型，但是具有相同的枚举常量就会冲突），而且它们会被隐式转换为整形，无法拥有特定的用户定义类型。</p>

<p>在C++11中通过引入了一个称为强类型枚举的新类型，修正了这种情况。强类型枚举由关键字enum class标识。它不会将枚举常量暴露到外层作用域中，也不会隐式转换为整形，并且拥有用户指定的特定类型（传统枚举也增加了这个性质）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">enum</span> <span class="k">class</span> <span class="nc">Options</span> <span class="p">{</span><span class="n">None</span><span class="p">,</span> <span class="n">One</span><span class="p">,</span> <span class="n">All</span><span class="p">};</span>
</span><span class='line'><span class="n">Options</span> <span class="n">o</span> <span class="o">=</span> <span class="n">Options</span><span class="o">::</span><span class="n">All</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Lambdas</h3>

<p>Lambda表达式是一种描述函数对象的机制，它的主要应用是描述某些具有简单行为的函数（Lambda表达式也可以称为匿名函数)</p>

<h4>语法</h4>

<ol>
<li>[ capture-list ] ( params ) mutable(optional) exception attribute -> ret { body }</li>
<li>[ capture-list ] ( params ) -> ret { body }</li>
<li>[ capture-list ] ( params ) { body }</li>
<li>[ capture-list ] { body }</li>
</ol>


<p>第一个为完整声明，根据需要参数，返回值等都可省略。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">auto</span> <span class="n">func1</span> <span class="o">=</span> <span class="p">[]{</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;hello world</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span> <span class="p">};</span>  <span class="c1">//省略参数的</span>
</span><span class='line'><span class="k">auto</span> <span class="n">func2</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">;</span> <span class="p">}</span> <span class="c1">// 隐式返回类型</span>
</span><span class='line'><span class="k">auto</span> <span class="n">func3</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">int</span> <span class="p">{</span> <span class="kt">int</span> <span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">;</span> <span class="k">return</span> <span class="n">z</span><span class="p">;</span> <span class="p">}</span> <span class="c1">//显示指定返回类型</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lambda函数可以引用在它之外声明的变量. 这些变量的集合叫做一个闭包. 闭包被定义在Lambda表达式声明中的方括号[]内. 这个机制允许这些变量被按值或按引用捕获。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="p">[]</span>        <span class="c1">//未定义变量.试图在Lambda内使用任何外部变量都是错误的.</span>
</span><span class='line'><span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">]</span>   <span class="c1">//x 按值捕获, y 按引用捕获.</span>
</span><span class='line'><span class="p">[</span><span class="o">&amp;</span><span class="p">]</span>       <span class="c1">//用到的任何外部变量都隐式按引用捕获</span>
</span><span class='line'><span class="p">[</span><span class="o">=</span><span class="p">]</span>       <span class="c1">//用到的任何外部变量都隐式按值捕获</span>
</span><span class='line'><span class="p">[</span><span class="o">&amp;</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span>    <span class="c1">//x显式地按值捕获. 其它变量按引用捕获</span>
</span><span class='line'><span class="p">[</span><span class="o">=</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">z</span><span class="p">]</span>   <span class="c1">//z按引用捕获. 其它变量按值捕获</span>
</span></code></pre></td></tr></table></div></figure>


<p>下边是一些列子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">begin</span><span class="p">(</span><span class="n">v</span><span class="p">),</span> <span class="n">std</span><span class="o">::</span><span class="n">end</span><span class="p">(</span><span class="n">v</span><span class="p">),</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;});</span>
</span><span class='line'>
</span><span class='line'><span class="k">auto</span> <span class="n">is_odd</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">n</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">1</span><span class="p">;};</span>
</span><span class='line'><span class="k">auto</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">find_if</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">begin</span><span class="p">(</span><span class="n">v</span><span class="p">),</span> <span class="n">std</span><span class="o">::</span><span class="n">end</span><span class="p">(</span><span class="n">v</span><span class="p">),</span> <span class="n">is_odd</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">pos</span> <span class="o">!=</span> <span class="n">std</span><span class="o">::</span><span class="n">end</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">pos</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在使用递归lambda时，我们不能使用auto来进行申明，因为auto对象类型由初始表达式决定，然而初始表达式又包含了对其自身的引用，因此要求先知道它的类型，这就导致了无穷递归。解决问题的关键就是打破这种循环依赖，用std::function显式的指定函数类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">auto</span> <span class="n">fib</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">fib</span><span class="p">](</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">);};</span> <span class="c1">//Error</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">lfib</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">lfib</span><span class="p">](</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">lfib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">lfib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">);};</span> <span class="c1">//OK</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<p><a href="http://blog.jobbole.com/44015/">C++开发者都应该使用的10个C++11特性</a> <br/>
<a href="http://blog.jobbole.com/55063/">C++11语言扩展：常规特性</a> <br/>
<a href="http://en.cppreference.com/w/cpp/language/lambda">Lambda functions</a> <br/>
<a href="http://www.cnblogs.com/pzhfei/archive/2013/01/14/lambda_expression.html">C++11中的匿名函数(lambda函数,lambda表达式)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2d-x -- TableView]]></title>
    <link href="http://ypengju.github.io/blog/2014/12/02/cocos2d-x-tableview/"/>
    <updated>2014-12-02T15:15:21+08:00</updated>
    <id>http://ypengju.github.io/blog/2014/12/02/cocos2d-x-tableview</id>
    <content type="html"><![CDATA[<p>TableView是在游戏开发中最常使用的之一，它是ScrollView的子类，采用委托代理，只将数据交给用户处理，具体布局，内存处理都有引擎包装完成，对于加载大量列表数据非常方便，使得我们只需考虑，每个条目数据处理。 <br/>
TableView位于extensions扩展包中，所以在使用的时候需要引入头文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &quot;cocos-ext.h&quot;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">extension</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
在使用TableView的类中，需要继承<code>TableViewDataSource</code>，<code>TableViewDelegate</code>两个类。这两个类中定义了一些纯虚代理方法，需要在类中继承实现，还有其他的几个方法，可以选择实现。  <!--more--></p>

<figure class='code'><figcaption><span>TableViewDelegate</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">TableViewDelegate</span> <span class="o">:</span> <span class="k">public</span> <span class="n">ScrollViewDelegate</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="c1">//点击时调用</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">tableCellTouched</span><span class="p">(</span><span class="n">TableView</span><span class="o">*</span> <span class="n">table</span><span class="p">,</span> <span class="n">TableViewCell</span><span class="o">*</span> <span class="n">cell</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//cell点下时调用</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">tableCellHighlight</span><span class="p">(</span><span class="n">TableView</span><span class="o">*</span> <span class="n">table</span><span class="p">,</span> <span class="n">TableViewCell</span><span class="o">*</span> <span class="n">cell</span><span class="p">){};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//cell点下释放时调用</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">tableCellUnhighlight</span><span class="p">(</span><span class="n">TableView</span><span class="o">*</span> <span class="n">table</span><span class="p">,</span> <span class="n">TableViewCell</span><span class="o">*</span> <span class="n">cell</span><span class="p">){};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//cell回收，在当前cell移除屏幕时调用，或者在reloadData()调用时，调用</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">tableCellWillRecycle</span><span class="p">(</span><span class="n">TableView</span><span class="o">*</span> <span class="n">table</span><span class="p">,</span> <span class="n">TableViewCell</span><span class="o">*</span> <span class="n">cell</span><span class="p">){};</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
TableViewDelegate继承自ScrollViewDelegate，除了上边的这些方法外，还可实现ScrollViewDelegate中的<code>scrollViewDidScroll</code>和<code>scrollViewDidZoom</code>代理方法。</p>

<figure class='code'><figcaption><span>TableViewDataSource</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">TableViewDataSource</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">TableViewDataSource</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//每个cell的大小，用于指定tableView中每个Cell的大小</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Size</span> <span class="n">tableCellSizeForIndex</span><span class="p">(</span><span class="n">TableView</span> <span class="o">*</span><span class="n">table</span><span class="p">,</span> <span class="kt">ssize_t</span> <span class="n">idx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cellSizeForTable</span><span class="p">(</span><span class="n">table</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//默认cell的大小</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Size</span> <span class="nf">cellSizeForTable</span><span class="p">(</span><span class="n">TableView</span> <span class="o">*</span><span class="n">table</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Size</span><span class="o">::</span><span class="n">ZERO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//索引index处的TableViewCell内容</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">TableViewCell</span><span class="o">*</span> <span class="n">tableCellAtIndex</span><span class="p">(</span><span class="n">TableView</span> <span class="o">*</span><span class="n">table</span><span class="p">,</span> <span class="kt">ssize_t</span> <span class="n">idx</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//TableView中cell的个数</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">ssize_t</span> <span class="n">numberOfCellsInTableView</span><span class="p">(</span><span class="n">TableView</span> <span class="o">*</span><span class="n">table</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
在使用时，必须实现上边两个类中的纯虚函数，这是布局时必须的一些数据。在TableView中每个cell我们会用到<code>TableViewCell</code>这个类，这个只有一个简单的成员变量_idx用来标记cell的索引，但是它继承子Node，每个cell中用到的控件元素都会添加到这个类实例中进行管理。 <br/>
下边一个简单例子说明TableView的使用</p>

<figure class='code'><figcaption><span>TableViewDataSource</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">bool</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">Layer</span><span class="o">::</span><span class="n">init</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Size</span> <span class="n">winSize</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getWinSize</span><span class="p">();</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">colorLayer</span> <span class="o">=</span> <span class="n">LayerColor</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">Color4B</span><span class="p">(</span><span class="mi">125</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">255</span><span class="p">));</span>
</span><span class='line'>    <span class="n">addChild</span><span class="p">(</span><span class="n">colorLayer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_tableView</span> <span class="o">=</span> <span class="n">TableView</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">Size</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">500</span><span class="p">));</span> <span class="c1">//指明此TableView的数据代理和可视区域大小</span>
</span><span class='line'>    <span class="n">_tableView</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">winSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>    <span class="n">_tableView</span><span class="o">-&gt;</span><span class="n">setDelegate</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">//指定代理为当前类，调用时调用我们申明的函数</span>
</span><span class='line'>    <span class="c1">//设置滑动方向，只有两个方向，垂直滑动和水平滑动，默认垂直滑动，设置方向必须在调用reloadData()函数之前。</span>
</span><span class='line'>    <span class="n">_tableView</span><span class="o">-&gt;</span><span class="n">setDirection</span><span class="p">(</span><span class="n">ScrollView</span><span class="o">::</span><span class="n">Direction</span><span class="o">::</span><span class="n">HORIZONTAL</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//设置TableView中元素的排序方式，更具索引有从大到小，或者从小到大的顺序,这里值得关注下，在此方法中会调用reloadData()进行加载数据</span>
</span><span class='line'>    <span class="n">_tableView</span><span class="o">-&gt;</span><span class="n">setVerticalFillOrder</span><span class="p">(</span><span class="n">TableView</span><span class="o">::</span><span class="n">VerticalFillOrder</span><span class="o">::</span><span class="n">TOP_DOWN</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_tableView</span><span class="o">-&gt;</span><span class="n">setBounceable</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span> <span class="c1">//设置滑动是否有惯性</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">_tableView</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//设置每个cell的内容</span>
</span><span class='line'><span class="n">TableViewCell</span><span class="o">*</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">tableCellAtIndex</span><span class="p">(</span><span class="n">TableView</span> <span class="o">*</span><span class="n">table</span><span class="p">,</span> <span class="kt">ssize_t</span> <span class="n">idx</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;-----------%ld&quot;</span><span class="p">,</span> <span class="n">idx</span><span class="p">);</span>
</span><span class='line'>    <span class="n">TableViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">dequeueCell</span><span class="p">();</span> <span class="c1">//对移除屏幕的cell进行重复利用，避免额外开销</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">cell</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cell</span> <span class="o">=</span> <span class="n">TableViewCell</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>        <span class="k">auto</span> <span class="n">sp</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;CloseNormal.png&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">sp</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>        <span class="n">sp</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>        <span class="n">sp</span><span class="o">-&gt;</span><span class="n">setTag</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'>        <span class="n">cell</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">sp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">auto</span> <span class="n">label</span> <span class="o">=</span> <span class="n">LabelTTF</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">StringUtils</span><span class="o">::</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">idx</span><span class="p">).</span><span class="n">c_str</span><span class="p">(),</span> <span class="s">&quot;Arial&quot;</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'>        <span class="n">label</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">sp</span><span class="o">-&gt;</span><span class="n">getContentSize</span><span class="p">().</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">sp</span><span class="o">-&gt;</span><span class="n">getContentSize</span><span class="p">().</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>        <span class="n">label</span><span class="o">-&gt;</span><span class="n">setTag</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>        <span class="n">cell</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">auto</span> <span class="n">label</span> <span class="o">=</span> <span class="p">(</span><span class="n">LabelTTF</span> <span class="o">*</span><span class="p">)</span><span class="n">cell</span><span class="o">-&gt;</span><span class="n">getChildByTag</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>        <span class="n">label</span><span class="o">-&gt;</span><span class="n">setString</span><span class="p">(</span><span class="n">StringUtils</span><span class="o">::</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">idx</span><span class="p">).</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//TableView中的数量</span>
</span><span class='line'><span class="kt">ssize_t</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">numberOfCellsInTableView</span><span class="p">(</span><span class="n">TableView</span> <span class="o">*</span><span class="n">table</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//每个cell的大小</span>
</span><span class='line'><span class="n">cocos2d</span><span class="o">::</span><span class="n">Size</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">tableCellSizeForIndex</span><span class="p">(</span><span class="n">TableView</span> <span class="o">*</span><span class="n">table</span><span class="p">,</span> <span class="kt">ssize_t</span> <span class="n">idx</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Size</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//cell点击调用</span>
</span><span class='line'><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">tableCellTouched</span><span class="p">(</span><span class="n">TableView</span><span class="o">*</span> <span class="n">table</span><span class="p">,</span> <span class="n">TableViewCell</span><span class="o">*</span> <span class="n">cell</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;--------you touch me!!! %ld&quot;</span><span class="p">,</span> <span class="n">cell</span><span class="o">-&gt;</span><span class="n">getIdx</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
实现这以上几个函数，既可以构建一个简单TableView，在调用过程中数据发生改变，我们只需调用TableView的reloadData()函数就可对数据进行刷新。还有其他几个函数可对TableView中指定索引元素进行更新，插入和删除操作。具体可见CCTableView.h中定义的接口。</p>

<p>在lua中使用时，在定义相应函数后，我们需要对其进行注册，具体如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">tableView</span><span class="p">:</span><span class="n">registerScriptHandler</span><span class="p">(</span><span class="n">TableViewTestLayer</span><span class="p">.</span><span class="n">numberOfCellsInTableView</span><span class="p">,</span><span class="n">cc</span><span class="p">.</span><span class="n">NUMBER_OF_CELLS_IN_TABLEVIEW</span><span class="p">)</span>
</span><span class='line'><span class="n">tableView</span><span class="p">:</span><span class="n">registerScriptHandler</span><span class="p">(</span><span class="n">TableViewTestLayer</span><span class="p">.</span><span class="n">scrollViewDidScroll</span><span class="p">,</span><span class="n">cc</span><span class="p">.</span><span class="n">SCROLLVIEW_SCRIPT_SCROLL</span><span class="p">)</span>
</span><span class='line'><span class="n">tableView</span><span class="p">:</span><span class="n">registerScriptHandler</span><span class="p">(</span><span class="n">TableViewTestLayer</span><span class="p">.</span><span class="n">scrollViewDidZoom</span><span class="p">,</span><span class="n">cc</span><span class="p">.</span><span class="n">SCROLLVIEW_SCRIPT_ZOOM</span><span class="p">)</span>
</span><span class='line'><span class="n">tableView</span><span class="p">:</span><span class="n">registerScriptHandler</span><span class="p">(</span><span class="n">TableViewTestLayer</span><span class="p">.</span><span class="n">tableCellTouched</span><span class="p">,</span><span class="n">cc</span><span class="p">.</span><span class="n">TABLECELL_TOUCHED</span><span class="p">)</span>
</span><span class='line'><span class="n">tableView</span><span class="p">:</span><span class="n">registerScriptHandler</span><span class="p">(</span><span class="n">TableViewTestLayer</span><span class="p">.</span><span class="n">cellSizeForTable</span><span class="p">,</span><span class="n">cc</span><span class="p">.</span><span class="n">TABLECELL_SIZE_FOR_INDEX</span><span class="p">)</span>
</span><span class='line'><span class="n">tableView</span><span class="p">:</span><span class="n">registerScriptHandler</span><span class="p">(</span><span class="n">TableViewTestLayer</span><span class="p">.</span><span class="n">tableCellAtIndex</span><span class="p">,</span><span class="n">cc</span><span class="p">.</span><span class="n">TABLECELL_SIZE_AT_INDEX</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
这些具体函数必须在reloadData()函数之前注册，因为在reloadData()需要对数据进行处理。具体使用可参考官方的例子程序。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2d-x -- LuaEngine调用Lua代码]]></title>
    <link href="http://ypengju.github.io/blog/2014/11/12/cocos2d-x-luaengine/"/>
    <updated>2014-11-12T21:39:06+08:00</updated>
    <id>http://ypengju.github.io/blog/2014/11/12/cocos2d-x-luaengine</id>
    <content type="html"><![CDATA[<p>cocos2d-x 3.2中，在命令行生成新项目时，我们需要使用<code>-l</code>参数指明使用的语言，如果使用c++语言，则默认不包含脚本库，如果使用lua语言，则项目默认生成lua环境，我们直接可以开始编写lua逻辑，无需关心引擎到lua的调用工作。为了了解引擎如何从c++调用到lua，z这篇文章以c++项目为例。    <!-- more -->
对新生成的c++项目，首先需要添加脚本库， 将引擎cocos目录下的scripting目录拷贝到新项目的cocos目录下与引擎原始目录结构保持一致即可。除了scripting还需要将external目录下的lua文件夹也一并考过来放在对应目录，需要的文件拷贝好之后，需要在项目中进行配置，右击项目->&ldquo;Add File to &hellip;&rdquo;,然后如下图添加脚本库 <br/>
<img src="http://ypengju.github.io/images/lua/1.png">  <br/>
<img src="http://ypengju.github.io/images/lua/2.png">  <br/>
添加成功后，如下将库文件添加到工程
<img src="http://ypengju.github.io/images/lua/3.png">
分别在&#8221;Target Dependence&#8221;和&#8221;Link Binary With Library&#8221;下，这里需要添加另外一个&#8221;MediaPlayer.framework&#8221;,否则会编译出错。 <br/>
添加好库之后，还需指明搜索路径
<img src="http://ypengju.github.io/images/lua/4.png">
这样在项目中就可以直接调用<code>#include "CCLuaEngine.h"</code>包含头文件，通过LuaEngine调用lua文件了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auto engine = LuaEngine::getInstance();
</span><span class='line'>ScriptEngineManager::getInstance()-&gt;setScriptEngine(engine);
</span><span class='line'>if (engine-&gt;executeScriptFile("hello.lua")) {
</span><span class='line'>    return false;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p> <br/>
cocos2d-x支持JS脚本和lua脚本，使用ScriptEngineManager来管理脚本引擎，如上边这个例子，我们获得lua引擎，然后将其设置到脚本管理类中，先来看看这个管理到底是干什么用的。</p>

<figure class='code'><figcaption><span>ScriptEngineManager</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">CC_DLL</span> <span class="n">ScriptEngineManager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="o">~</span><span class="n">ScriptEngineManager</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ScriptEngineProtocol</span><span class="o">*</span> <span class="nf">getScriptEngine</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_scriptEngine</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">setScriptEngine</span><span class="p">(</span><span class="n">ScriptEngineProtocol</span> <span class="o">*</span><span class="n">scriptEngine</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">removeScriptEngine</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">ScriptEngineManager</span><span class="o">*</span> <span class="nf">getInstance</span><span class="p">();</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">void</span> <span class="nf">destroyInstance</span><span class="p">();</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">bool</span> <span class="nf">sendNodeEventToJS</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">node</span><span class="p">,</span> <span class="kt">int</span> <span class="n">action</span><span class="p">);</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">bool</span> <span class="nf">sendNodeEventToJSExtended</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">node</span><span class="p">,</span> <span class="kt">int</span> <span class="n">action</span><span class="p">);</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">void</span> <span class="nf">sendNodeEventToLua</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">node</span><span class="p">,</span> <span class="kt">int</span> <span class="n">action</span><span class="p">);</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">ScriptEngineManager</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>    <span class="o">:</span> <span class="n">_scriptEngine</span><span class="p">(</span><span class="k">nullptr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">ScriptEngineProtocol</span> <span class="o">*</span><span class="n">_scriptEngine</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
ScriptEngineManager就是一个单例，帮助引擎保存ScriptEngineProtocol对象，ScriptEngineProtocol是LuaEngine的父类，类中声明一些纯虚方法。具体操作都由LuaEngine实现。其实LuaEngine也只是外层的一个包装，其中管理者一个LuaStack对象，所有栈操作都是在LuaStack中完成的。</p>

<figure class='code'><figcaption><span>ScriptEngineManager</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">LuaEngine</span><span class="o">::</span><span class="n">executeString</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">codes</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">_stack</span><span class="o">-&gt;</span><span class="n">executeString</span><span class="p">(</span><span class="n">codes</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_stack</span><span class="o">-&gt;</span><span class="n">clean</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">LuaEngine</span><span class="o">::</span><span class="n">executeScriptFile</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">_stack</span><span class="o">-&gt;</span><span class="n">executeScriptFile</span><span class="p">(</span><span class="n">filename</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_stack</span><span class="o">-&gt;</span><span class="n">clean</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">LuaEngine</span><span class="o">::</span><span class="n">executeGlobalFunction</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">functionName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">_stack</span><span class="o">-&gt;</span><span class="n">executeGlobalFunction</span><span class="p">(</span><span class="n">functionName</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_stack</span><span class="o">-&gt;</span><span class="n">clean</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
可以看到LuaEngine都是通调用LuaStack方法来实现的</p>

<figure class='code'><figcaption><span>ScriptEngineManager</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">LuaStack</span><span class="o">::</span><span class="n">executeString</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">codes</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">luaL_loadstring</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="n">codes</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">executeFunction</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">LuaStack</span><span class="o">::</span><span class="n">executeScriptFile</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">code</span><span class="p">(</span><span class="s">&quot;require </span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">code</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">filename</span><span class="p">);</span>
</span><span class='line'>    <span class="n">code</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">executeString</span><span class="p">(</span><span class="n">code</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">LuaStack</span><span class="o">::</span><span class="n">executeGlobalFunction</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">functionName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">lua_getglobal</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="n">functionName</span><span class="p">);</span>       <span class="cm">/* query function by name, stack: function */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">lua_isfunction</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;[LUA ERROR] name &#39;%s&#39; does not represent a Lua function&quot;</span><span class="p">,</span> <span class="n">functionName</span><span class="p">);</span>
</span><span class='line'>        <span class="n">lua_pop</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">executeFunction</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
<code>executeString</code>和<code>executeScriptFile</code>加载代码到栈顶，然后调用<code>executeFunction</code>函数，<code>executeGlobalFunction</code>将函数名压入栈顶，然后检查是否是是函数，如果是也执行<code>executeFunction</code>函数记者来看这个重要的函数：</p>

<figure class='code'><figcaption><span>ScriptEngineManager</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">LuaStack</span><span class="o">::</span><span class="n">executeFunction</span><span class="p">(</span><span class="kt">int</span> <span class="n">numArgs</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">functionIndex</span> <span class="o">=</span> <span class="o">-</span><span class="p">(</span><span class="n">numArgs</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">lua_isfunction</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="n">functionIndex</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;value at stack [%d] is not function&quot;</span><span class="p">,</span> <span class="n">functionIndex</span><span class="p">);</span>
</span><span class='line'>        <span class="n">lua_pop</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="n">numArgs</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// remove function and arguments</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">traceback</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">lua_getglobal</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="s">&quot;__G__TRACKBACK__&quot;</span><span class="p">);</span>                         <span class="cm">/* L: ... func arg1 arg2 ... G */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">lua_isfunction</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">lua_pop</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>                                            <span class="cm">/* L: ... func arg1 arg2 ... */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">lua_insert</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="n">functionIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>                         <span class="cm">/* L: ... G func arg1 arg2 ... */</span>
</span><span class='line'>        <span class="n">traceback</span> <span class="o">=</span> <span class="n">functionIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">error</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="o">++</span><span class="n">_callFromLua</span><span class="p">;</span>
</span><span class='line'>    <span class="n">error</span> <span class="o">=</span> <span class="n">lua_pcall</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="n">numArgs</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">traceback</span><span class="p">);</span>                  <span class="cm">/* L: ... [G] ret */</span>
</span><span class='line'>    <span class="o">--</span><span class="n">_callFromLua</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">traceback</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;[LUA ERROR] %s&quot;</span><span class="p">,</span> <span class="n">lua_tostring</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span>        <span class="cm">/* L: ... error */</span>
</span><span class='line'>            <span class="n">lua_pop</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// remove error message from stack</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>                                                            <span class="cm">/* L: ... G error */</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">lua_pop</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// remove __G__TRACKBACK__ and error message from stack</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// get return value</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">lua_isnumber</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">lua_tointeger</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">lua_isboolean</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">lua_toboolean</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// remove return value from stack</span>
</span><span class='line'>    <span class="n">lua_pop</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>                                                <span class="cm">/* L: ... [G] */</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">traceback</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">lua_pop</span><span class="p">(</span><span class="n">_state</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// remove __G__TRACKBACK__ from stack      /* L: ... */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ol>
<li>先判断栈顶元素是不是函数</li>
<li>先将<code>__G__TRACKBACK__</code>入栈，检查lua是否定义了此函数，如果没有定义，将<code>__G__TRACKBACK__</code>出战，如果定义了，将此函数插入调用函数之前，来跟踪调用顺序。</li>
<li>调用<code>lua_pcall</code>函数调用lua代码，如果调用函数出栈，将结果压入栈中，如果调用错误，将错误信息压入栈中。</li>
<li>对调用结果进行处理</li>
</ol>


<p>这样就完成了cocos2d-x的c++到lua代码的调用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua -- Stack]]></title>
    <link href="http://ypengju.github.io/blog/2014/11/11/lua-stack/"/>
    <updated>2014-11-11T21:32:01+08:00</updated>
    <id>http://ypengju.github.io/blog/2014/11/11/lua-stack</id>
    <content type="html"><![CDATA[<p>c++调用lua中一个很重要的概念就是栈，它是c++与lua交互的基础，所有的调用都是在这个栈上来完成的，所以我想在这片文章中记录下我对栈调用的一些理解。之前有读过子龙山人的关于lua文章，这里使用他的配置，具体见这片博文：<a href="http://4gamers.cn/blog/2014/06/28/embeded-lua-tutorial-one/">Lua教程: C++嵌入Lua脚本(1)</a>，我也是按照这篇博文进行配置，使用的lua版本为5.2.3。<!-- more --> <br/>
看lua的api可以知道，lua库提供的方法主要分为三个类：</p>

<ul>
<li>Lua functions     &ndash;lua代码中使用的函数库</li>
<li>C API             &ndash;c中使用的函数库</li>
<li>auxiliary library &ndash;辅助库，是对c函数的包装</li>
</ul>


<p>先来看一个简单的例子，看c++如何调用lua文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &quot;lua.hpp&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//1. 初始化Lua虚拟机，初始话新lua栈</span>
</span><span class='line'>    <span class="n">lua_State</span> <span class="o">*</span><span class="n">lua_state</span><span class="p">;</span>
</span><span class='line'>    <span class="n">lua_state</span> <span class="o">=</span> <span class="n">luaL_newstate</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//2. 打开所有的标准库</span>
</span><span class='line'>    <span class="n">luaL_openlibs</span><span class="p">(</span><span class="n">lua_state</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//3、运行hello.lua脚本</span>
</span><span class='line'>    <span class="n">luaL_dofile</span><span class="p">(</span><span class="n">lua_state</span><span class="p">,</span> <span class="s">&quot;hello.lua&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//4. 关闭Lua虚拟机</span>
</span><span class='line'>    <span class="n">lua_close</span><span class="p">(</span><span class="n">lua_state</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
首先在使用之前需要导入头文件，这里导入lua.hpp，同时导入如下三个类库：</p>

<figure class='code'><figcaption><span>lua.hpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#include &quot;lua.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;lualib.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;lauxlib.h&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
lua.h和lualib.h包含以lua<em>为前缀的C API库，lauxlib.h包含以luaL</em>为前缀的辅助类库。</p>

<ol>
<li>首先初始化lua虚拟机，也是就初始化一个新的调用栈</li>
<li>打开所有的标准库，也可以根据需要只导入需要的库</li>
<li>加载和运行lua文件</li>
<li>当调用完成后，需要关掉栈</li>
</ol>


<figure class='code'><figcaption><span>hello.lua</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">hello world&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>此时运行程序便可以看到调用lua文件打印的hello world。 <br/>
像上边程序一样，我们在进行c++调用lua之前都会创建一个新的栈，然后所有的操作都是通过栈来进行的，为什么需要这样做？ <br/>
因为lua是动态语言，c++是静态语言，lua的变量可能是任意一种类型，无法直接与c变量对应起来，而且lua是一种嵌入式语言，它不仅可以嵌套在c++中使用，也可能会嵌套在其他语言中使用，那这种对应关系就更复杂了。所以就采用了这种虚拟栈的交互方式，当c++和lua相互调用的时候，先将变量压入栈中，然后由另一端从栈中取出，然后转换成对应类型进行处理，所以lua提供了如下这些将不同类型压入栈的操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">lua_pushnil</span><span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="kt">void</span> <span class="n">lua_pushboolean</span> <span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="n">L</span><span class="p">,</span> <span class="kt">int</span> <span class="kt">bool</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">lua_pushnumber</span> <span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="n">L</span><span class="p">,</span> <span class="n">lua_Number</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">lua_pushinteger</span> <span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="n">L</span><span class="p">,</span> <span class="n">lua_Integer</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">lua_pushunsigned</span> <span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="n">L</span><span class="p">,</span> <span class="n">lua_Unsigned</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">lua_pushstring</span> <span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="n">L</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">lua_pushstring</span> <span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="n">L</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
另一个原因就是内存的管理，c++中是手动进行内存释放的，而在lua中是采用自动垃圾回收处理的，如果你保存一个lua的table在c++变量中，lua无法知道这个table在c++中是否使用，在lua中可能由于不使用而被标记为垃圾而回收。 <br/>
对于不同类型操作，lua不仅定义了上边的<code>lua_pushXXX</code>函数，还定义了<code>void lua_isXXXX(lua_State *L, int index)</code>等c函数库用来辨别栈中具体位置的变量是哪种类型。和<code>lua_toXXXX(lua_State *L, int index)</code>函数，将栈中对应位置的元素转换为具体类型返回。除了上边这些，lua还提供了一些对栈顶操作，替换栈内元素，删除等操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">lua_gettop</span> <span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">lua_settop</span> <span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="n">L</span><span class="p">,</span> <span class="kt">int</span> <span class="n">index</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">lua_pushvalue</span> <span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="n">L</span><span class="p">,</span> <span class="kt">int</span> <span class="n">index</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">lua_remove</span> <span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="n">L</span><span class="p">,</span> <span class="kt">int</span> <span class="n">index</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">lua_insert</span> <span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="n">L</span><span class="p">,</span> <span class="kt">int</span> <span class="n">index</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">lua_replace</span> <span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="n">L</span><span class="p">,</span> <span class="kt">int</span> <span class="n">index</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">lua_copy</span> <span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="n">L</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fromidx</span><span class="p">,</span> <span class="kt">int</span> <span class="n">toidx</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
下边具体看个例子，对栈的操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">lua_State</span> <span class="o">*</span><span class="n">lua_state</span> <span class="o">=</span> <span class="n">luaL_newstate</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">lua_pushboolean</span><span class="p">(</span><span class="n">lua_state</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">lua_pushnumber</span><span class="p">(</span><span class="n">lua_state</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="n">lua_pushstring</span><span class="p">(</span><span class="n">lua_state</span><span class="p">,</span> <span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="n">lua_gettop</span><span class="p">(</span><span class="n">lua_state</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;------first------</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">top</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">lua_type</span><span class="p">(</span><span class="n">lua_state</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">LUA_TSTRING</span><span class="p">:</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s  </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">lua_tostring</span><span class="p">(</span><span class="n">lua_state</span><span class="p">,</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">LUA_TNUMBER</span><span class="p">:</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%g  </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">lua_tonumber</span><span class="p">(</span><span class="n">lua_state</span><span class="p">,</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">LUA_TBOOLEAN</span><span class="p">:</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="n">lua_toboolean</span><span class="p">(</span><span class="n">lua_state</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">?</span> <span class="s">&quot;true  </span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">:</span> <span class="s">&quot;false  </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;-------second--------</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="o">-</span><span class="n">top</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">lua_type</span><span class="p">(</span><span class="n">lua_state</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">LUA_TSTRING</span><span class="p">:</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s  </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">lua_tostring</span><span class="p">(</span><span class="n">lua_state</span><span class="p">,</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">LUA_TNUMBER</span><span class="p">:</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%g  </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">lua_tonumber</span><span class="p">(</span><span class="n">lua_state</span><span class="p">,</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">LUA_TBOOLEAN</span><span class="p">:</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="n">lua_toboolean</span><span class="p">(</span><span class="n">lua_state</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">?</span> <span class="s">&quot;true  </span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">:</span> <span class="s">&quot;false  </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
运行打印结果为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">------</span><span class="n">first</span><span class="o">------</span>
</span><span class='line'><span class="nb">true</span>
</span><span class='line'><span class="mi">100</span>
</span><span class='line'><span class="n">hello</span> <span class="n">world</span>
</span><span class='line'><span class="o">-------</span><span class="n">second</span><span class="o">--------</span>
</span><span class='line'><span class="n">hello</span> <span class="n">world</span>
</span><span class='line'><span class="mi">100</span>
</span><span class='line'><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
首先生成新的栈，然后依次向其中压入true，100，&#8221;hello world&#8221;，采用<code>lua_gettop(luaState *L)</code>获取栈中元素个数，第一次遍历从栈底到栈顶，第二次遍历从栈顶到栈底。   <br/>
默认情况下，lua栈的大小为20个存储空间，大多数情况下足够程序使用，但有些情况下我们可能需要更多的栈空间，这时就可以采用<code>lua_checkstack(lua_State *L, int sz)</code>检查栈空间是否够用。由上边打印的结果可以看到，第一个push进去的值的索引为1，接着第二个位2，换句话说，从栈底到栈顶的顺序为1到n。同时栈顶也可以用-1索引访问，所以栈顶到栈底也可以用-1到-n遍历访问。在好多操作中，会经常看到用索引-1，访问栈顶元素。除了用-1索引操作外，我们还可以直接用<code>lua_settop</code>和<code>lua_gettop</code>函数操作栈顶。<br/>
以上就是对栈的一个简单操作，对于更加复杂的如对lua函数，Table操作等，也都是基于栈来操作的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2d-x -- Tinyxml2]]></title>
    <link href="http://ypengju.github.io/blog/2014/11/07/cocos2d-x-tinyxml2/"/>
    <updated>2014-11-07T22:27:16+08:00</updated>
    <id>http://ypengju.github.io/blog/2014/11/07/cocos2d-x-tinyxml2</id>
    <content type="html"><![CDATA[<p>tinyxml2是一个简单，高效的xml语言的库，它是一个开源项目，项目代码托管在github上，这个是它的github地址： <a href="https://github.com/leethomason/tinyxml2">tinyxml2</a>，在cocos2d-x中，已经集成了tinyxml2库，所以在使用的时候我们只要引入相应的类就可开始处理xml文件。在cocos2d-x中我们经常会用到的CCUserDefault操作者本地的一个xml文件，其实内部实现就有封装tinyxml2来实现的。<!-- more --></p>

<p>tinyxml2库位于external文件夹下，在tinyxml2中其实就一个.h和一个.cpp文件，非常简单。打开tinyxml2.h文件就可以看到下边几个类</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">XMLDocument</span><span class="p">;</span>       <span class="c1">//文件节点既根节点</span>
</span><span class='line'><span class="k">class</span> <span class="nc">XMLElement</span><span class="p">;</span>        <span class="c1">//元素节点  如&lt;dic&gt;&lt;/dic&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">XMLAttribute</span><span class="p">;</span>      <span class="c1">//属性值   如&lt;dic version=&quot;1.0&quot;&gt;&lt;/dic&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">XMLComment</span><span class="p">;</span>        <span class="c1">//注释     如&lt;!--注释--&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">XMLNode</span><span class="p">;</span>           <span class="c1">//XMLDocument，XMLAttribute，XMLComment，XMLText，XMLDeclaration，XMLUnknown的父节点</span>
</span><span class='line'><span class="k">class</span> <span class="nc">XMLText</span><span class="p">;</span>           <span class="c1">//值       如&lt;dic version=&quot;1.0&quot;&gt;the text&lt;/dic&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">XMLDeclaration</span><span class="p">;</span>    <span class="c1">//xml开头的声明，用于声明文件格式，版本信息，及编码   如&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">XMLUnknown</span><span class="p">;</span>        <span class="c1">//&lt;!unknown&gt;标签</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
这几个类就是我们直接操作的xml文件的元素节点及内容。接下来看看具体如何用tinyxml2生成一个xml文件。</p>

<h3>生成XML文件</h3>

<figure class='code'><figcaption><span>生成xml文件</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">addXML</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">XMLDocument</span> <span class="o">*</span><span class="n">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XMLDocument</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">nullptr</span> <span class="o">==</span> <span class="n">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XMLDeclaration</span> <span class="o">*</span><span class="n">dec</span> <span class="o">=</span> <span class="n">doc</span><span class="o">-&gt;</span><span class="n">NewDeclaration</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">nullptr</span> <span class="o">==</span> <span class="n">dec</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">doc</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">dec</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//根节点</span>
</span><span class='line'>    <span class="n">XMLElement</span> <span class="o">*</span><span class="n">root</span> <span class="o">=</span> <span class="n">doc</span><span class="o">-&gt;</span><span class="n">NewElement</span><span class="p">(</span><span class="s">&quot;root&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">root</span><span class="o">-&gt;</span><span class="n">SetAttribute</span><span class="p">(</span><span class="s">&quot;version&quot;</span><span class="p">,</span> <span class="s">&quot;1.0&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">doc</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XMLElement</span> <span class="o">*</span><span class="n">theKey</span> <span class="o">=</span> <span class="n">doc</span><span class="o">-&gt;</span><span class="n">NewElement</span><span class="p">(</span><span class="s">&quot;key&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">theKey</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">doc</span><span class="o">-&gt;</span><span class="n">NewText</span><span class="p">(</span><span class="s">&quot;key1&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">root</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">theKey</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XMLElement</span> <span class="o">*</span><span class="n">theValue</span> <span class="o">=</span> <span class="n">doc</span><span class="o">-&gt;</span><span class="n">NewElement</span><span class="p">(</span><span class="s">&quot;value&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">theValue</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">doc</span><span class="o">-&gt;</span><span class="n">NewText</span><span class="p">(</span><span class="s">&quot;100&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">root</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">theValue</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XMLComment</span> <span class="o">*</span><span class="n">comment</span> <span class="o">=</span> <span class="n">doc</span><span class="o">-&gt;</span><span class="n">NewComment</span><span class="p">(</span><span class="s">&quot;数组&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">root</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">comment</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XMLElement</span> <span class="o">*</span><span class="n">array</span> <span class="o">=</span> <span class="n">doc</span><span class="o">-&gt;</span><span class="n">NewElement</span><span class="p">(</span><span class="s">&quot;array&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">root</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">array</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">XMLElement</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">doc</span><span class="o">-&gt;</span><span class="n">NewElement</span><span class="p">(</span><span class="s">&quot;data&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">data</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">doc</span><span class="o">-&gt;</span><span class="n">NewText</span><span class="p">(</span><span class="s">&quot;arrayData&quot;</span><span class="p">));</span>
</span><span class='line'>        <span class="n">array</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//将xml文件存储在home目录下的text.xml中</span>
</span><span class='line'>    <span class="n">doc</span><span class="o">-&gt;</span><span class="n">SaveFile</span><span class="p">(</span><span class="s">&quot;~/text.xml&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//在控制台打印</span>
</span><span class='line'>    <span class="n">doc</span><span class="o">-&gt;</span><span class="n">Print</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
运行程序就可以在控制台打印信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;root</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>key1<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;value&gt;</span>100<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--数组--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;array&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data&gt;</span>arrayData<span class="nt">&lt;/data&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data&gt;</span>arrayData<span class="nt">&lt;/data&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data&gt;</span>arrayData<span class="nt">&lt;/data&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data&gt;</span>arrayData<span class="nt">&lt;/data&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/array&gt;</span>
</span><span class='line'><span class="nt">&lt;/root&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
首先使用<code>XMLDocument</code>生成文件，然后使用<code>NewDeclaration()</code>添加文件说明，在说明中我们可以传入字符串，指定格式，版本，字符编码等，如果为空，采取如上默认声明。之后就可以添加元素节点，所有节点都是由XMLDocument生成的，同时可进行嵌套。最后将生成的xml保存到text.xml文件中同时在控制台打印，就如同上边看到的一样。</p>

<h3>解析xml文件</h3>

<p>如上生成的xml文件保存在home目录的text.xml文件中，接下来我们在读取这个文件，然后在程序的解析使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">parseXML</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//解析text.xml文件到doc中</span>
</span><span class='line'>    <span class="n">XMLDocument</span> <span class="o">*</span><span class="n">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XMLDocument</span><span class="p">();</span>
</span><span class='line'>    <span class="n">doc</span><span class="o">-&gt;</span><span class="n">LoadFile</span><span class="p">(</span><span class="s">&quot;/Users/ypengju/text.xml&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XMLElement</span> <span class="o">*</span><span class="n">root</span> <span class="o">=</span> <span class="n">doc</span><span class="o">-&gt;</span><span class="n">RootElement</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">XMLAttribute</span> <span class="o">*</span><span class="n">firstAttr</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">FirstAttribute</span><span class="p">();</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot;--name %s, value = %s&quot;</span><span class="p">,</span> <span class="n">firstAttr</span><span class="o">-&gt;</span><span class="n">Name</span><span class="p">(),</span> <span class="n">firstAttr</span><span class="o">-&gt;</span><span class="n">Value</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XMLElement</span> <span class="o">*</span><span class="n">first</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">FirstChildElement</span><span class="p">();</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot;--- first element: name %s, text %s&quot;</span><span class="p">,</span> <span class="n">first</span><span class="o">-&gt;</span><span class="n">Name</span><span class="p">(),</span> <span class="n">first</span><span class="o">-&gt;</span><span class="n">GetText</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XMLElement</span> <span class="o">*</span><span class="n">second</span> <span class="o">=</span> <span class="n">first</span><span class="o">-&gt;</span><span class="n">NextSiblingElement</span><span class="p">();</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot;--- second element: name %s, text %s&quot;</span><span class="p">,</span> <span class="n">second</span><span class="o">-&gt;</span><span class="n">Name</span><span class="p">(),</span> <span class="n">second</span><span class="o">-&gt;</span><span class="n">GetText</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XMLElement</span> <span class="o">*</span><span class="n">array</span> <span class="o">=</span> <span class="n">second</span><span class="o">-&gt;</span><span class="n">NextSiblingElement</span><span class="p">();</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot;----array element: name %s&quot;</span><span class="p">,</span> <span class="n">array</span><span class="o">-&gt;</span><span class="n">Name</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">XMLElement</span> <span class="o">*</span><span class="n">ele</span> <span class="o">=</span> <span class="n">array</span><span class="o">-&gt;</span><span class="n">FirstChildElement</span><span class="p">();</span> <span class="n">ele</span> <span class="o">!=</span> <span class="n">array</span><span class="o">-&gt;</span><span class="n">LastChildElement</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">NextSiblingElement</span><span class="p">();</span> <span class="n">ele</span> <span class="o">=</span> <span class="n">ele</span><span class="o">-&gt;</span><span class="n">NextSiblingElement</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;----- name %s, value %s&quot;</span><span class="p">,</span> <span class="n">ele</span><span class="o">-&gt;</span><span class="n">Name</span><span class="p">(),</span> <span class="n">ele</span><span class="o">-&gt;</span><span class="n">GetText</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
控制台打印：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="nl">cocos2d</span><span class="p">:</span> <span class="o">--</span><span class="n">name</span> <span class="n">version</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="mf">1.0</span>
</span><span class='line'><span class="nl">cocos2d</span><span class="p">:</span> <span class="o">---</span> <span class="n">first</span> <span class="nl">element</span><span class="p">:</span> <span class="n">name</span> <span class="n">key</span><span class="p">,</span> <span class="n">text</span> <span class="n">key1</span>
</span><span class='line'><span class="nl">cocos2d</span><span class="p">:</span> <span class="o">---</span> <span class="n">second</span> <span class="nl">element</span><span class="p">:</span> <span class="n">name</span> <span class="n">value</span><span class="p">,</span> <span class="n">text</span> <span class="mi">100</span>
</span><span class='line'><span class="nl">cocos2d</span><span class="p">:</span> <span class="o">----</span><span class="n">array</span> <span class="nl">element</span><span class="p">:</span> <span class="n">name</span> <span class="n">array</span>
</span><span class='line'><span class="nl">cocos2d</span><span class="p">:</span> <span class="o">-----</span> <span class="n">name</span> <span class="n">data</span><span class="p">,</span> <span class="n">value</span> <span class="n">arrayData1</span>
</span><span class='line'><span class="nl">cocos2d</span><span class="p">:</span> <span class="o">-----</span> <span class="n">name</span> <span class="n">data</span><span class="p">,</span> <span class="n">value</span> <span class="n">arrayData2</span>
</span><span class='line'><span class="nl">cocos2d</span><span class="p">:</span> <span class="o">-----</span> <span class="n">name</span> <span class="n">data</span><span class="p">,</span> <span class="n">value</span> <span class="n">arrayData3</span>
</span><span class='line'><span class="nl">cocos2d</span><span class="p">:</span> <span class="o">-----</span> <span class="n">name</span> <span class="n">data</span><span class="p">,</span> <span class="n">value</span> <span class="n">arrayData4</span>
</span></code></pre></td></tr></table></div></figure>


<p>
首先根据路径加载xml文件，将其存在<code>XMLDocument</code>中，然后用其一次获得每个节点及属性值，这样我们在程序中就可以使用了。 <br/>
以上就是简单的tinyxml2的生成和解析xml文件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2d-x -- Http请求]]></title>
    <link href="http://ypengju.github.io/blog/2014/11/07/cocos2d-x-httpqing-qiu/"/>
    <updated>2014-11-07T21:40:47+08:00</updated>
    <id>http://ypengju.github.io/blog/2014/11/07/cocos2d-x-httpqing-qiu</id>
    <content type="html"><![CDATA[<p>cocos2d-x的网络请求相关代码是放在network目录下的，所以在使用的时候，首先要导入头文件。 <br/>
newwork目录下主要由这几个类</p>

<ul>
<li>HttpRequest</li>
<li>HttpResponse</li>
<li>HttpClient</li>
<li>SocketIO</li>
<li>WebSocket</li>
</ul>


<p>这篇主要总结下Http请求的处理过程。   <!--more-->
首先请求之前，我们需要组织请求数据，这个就是由HttpRequest来完成的。 <br/>
比如设置请求地址，请求数据，请求类型，响应回调函数等。如下例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">cocos2d</span><span class="o">::</span><span class="n">network</span><span class="o">::</span><span class="n">HttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">network</span><span class="o">::</span><span class="n">HttpRequest</span><span class="p">();</span>
</span><span class='line'><span class="n">request</span><span class="o">-&gt;</span><span class="n">setUrl</span><span class="p">(</span><span class="s">&quot;http://127.0.0.1:1337/&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">request</span><span class="o">-&gt;</span><span class="n">setRequestType</span><span class="p">(</span><span class="n">cocos2d</span><span class="o">::</span><span class="n">network</span><span class="o">::</span><span class="n">HttpRequest</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="n">GET</span><span class="p">);</span>
</span><span class='line'><span class="n">request</span><span class="o">-&gt;</span><span class="n">setResponseCallback</span><span class="p">(</span><span class="n">CC_CALLBACK_2</span><span class="p">(</span><span class="n">HelloWorld</span><span class="o">::</span><span class="n">onHttpRequestCompleted</span><span class="p">,</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'><span class="n">request</span><span class="o">-&gt;</span><span class="n">setTag</span><span class="p">(</span><span class="s">&quot;get request”);</span>
</span><span class='line'><span class="n">request</span><span class="o">-&gt;</span><span class="n">setRequestData</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buffer</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="n">cocos2d</span><span class="o">::</span><span class="n">network</span><span class="o">::</span><span class="n">HttpClient</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">send</span><span class="p">(</span><span class="n">request</span><span class="p">);</span>
</span><span class='line'><span class="n">request</span><span class="o">-&gt;</span><span class="n">release</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
上边例子我们处理了一个请求内容，设置请求数据的时候，我们还需要知道他的大小。 <br/>
请求方式有四种</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">enum</span> <span class="k">class</span> <span class="nc">Type</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">GET</span><span class="p">,</span>
</span><span class='line'>    <span class="n">POST</span><span class="p">,</span>
</span><span class='line'>    <span class="n">PUT</span><span class="p">,</span>
</span><span class='line'>    <span class="n">DELETE</span><span class="p">,</span>
</span><span class='line'>    <span class="n">UNKNOWN</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
有GET，POST，PUT, DELETE分别对应http请求类型，一般应该用得比较多的是GET请求和POST请求了。除此之外，我们还可以通过<code>void setHeaders(std::vector&lt;std::string&gt; pHeaders)</code>方法设置请求头信息。请求数据组织好了，我们就需要把它发送出去了，这个发送管理任务就由HttpClient来完成了，就像上边这句一样：
<code>cocos2d::network::HttpClient::getInstance()-&gt;send(request)</code>可以看到，他是一个单例。 <br/>
HttpClient用来管理请求的发送，设置连接超时时间，设置读取响应时间等，以及请求的线程管理等。HttpClient处理请求有两种方法，一种是send(),一种是sendImmediate()直接请求。 <br/>
先看看send()都干了什么</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">HttpClient</span><span class="o">::</span><span class="n">send</span><span class="p">(</span><span class="n">HttpRequest</span><span class="o">*</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">false</span> <span class="o">==</span> <span class="n">lazyInitThreadSemphore</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">request</span><span class="o">-&gt;</span><span class="n">retain</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">nullptr</span> <span class="o">!=</span> <span class="n">s_requestQueue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">s_requestQueueMutex</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
</span><span class='line'>        <span class="n">s_requestQueue</span><span class="o">-&gt;</span><span class="n">pushBack</span><span class="p">(</span><span class="n">request</span><span class="p">);</span>
</span><span class='line'>        <span class="n">s_requestQueueMutex</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Notify thread start to work</span>
</span><span class='line'>        <span class="n">s_SleepCondition</span><span class="p">.</span><span class="n">notify_one</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
首先调用了lazyInitThreadSemphore(),在这个方法中，初始花了请求与响应队列，新起了一个线程，用于请求响应工作。然后将请求数据，添加到请求响应队列中，然后通知线程工作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//Lazy create semaphore &amp; mutex &amp; thread</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">HttpClient</span><span class="o">::</span><span class="n">lazyInitThreadSemphore</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">s_requestQueue</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">s_requestQueue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">HttpRequest</span><span class="o">*&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="n">s_responseQueue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">HttpResponse</span><span class="o">*&gt;</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">s_need_quit</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>        <span class="k">auto</span> <span class="n">t</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">(</span><span class="n">CC_CALLBACK_0</span><span class="p">(</span><span class="n">HttpClient</span><span class="o">::</span><span class="n">networkThread</span><span class="p">,</span> <span class="k">this</span><span class="p">));</span>
</span><span class='line'>        <span class="n">t</span><span class="p">.</span><span class="n">detach</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
主要工作在networkThread中完成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">HttpClient</span><span class="o">::</span><span class="n">networkThread</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">HttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">auto</span> <span class="n">scheduler</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getScheduler</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">s_need_quit</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// step 1: send http request if the requestQueue isn&#39;t empty</span>
</span><span class='line'>        <span class="n">request</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">s_requestQueueMutex</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Get request task from queue</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">s_requestQueue</span><span class="o">-&gt;</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">request</span> <span class="o">=</span> <span class="n">s_requestQueue</span><span class="o">-&gt;</span><span class="n">at</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">s_requestQueue</span><span class="o">-&gt;</span><span class="n">erase</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">s_requestQueueMutex</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">nullptr</span> <span class="o">==</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Wait for http request tasks from main thread</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lk</span><span class="p">(</span><span class="n">s_SleepMutex</span><span class="p">);</span>
</span><span class='line'>            <span class="n">s_SleepCondition</span><span class="p">.</span><span class="n">wait</span><span class="p">(</span><span class="n">lk</span><span class="p">);</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// step 2: libcurl sync access</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Create a HttpResponse object, the default setting is http access failed</span>
</span><span class='line'>        <span class="n">HttpResponse</span> <span class="o">*</span><span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="n">request</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">processResponse</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">s_errorBuffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// add response packet into queue</span>
</span><span class='line'>        <span class="n">s_responseQueueMutex</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
</span><span class='line'>        <span class="n">s_responseQueue</span><span class="o">-&gt;</span><span class="n">pushBack</span><span class="p">(</span><span class="n">response</span><span class="p">);</span>
</span><span class='line'>        <span class="n">s_responseQueueMutex</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">nullptr</span> <span class="o">!=</span> <span class="n">s_pHttpClient</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">scheduler</span><span class="o">-&gt;</span><span class="n">performFunctionInCocosThread</span><span class="p">(</span><span class="n">CC_CALLBACK_0</span><span class="p">(</span><span class="n">HttpClient</span><span class="o">::</span><span class="n">dispatchResponseCallbacks</span><span class="p">,</span> <span class="k">this</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// cleanup: if worker thread received quit signal, clean up un-completed request queue</span>
</span><span class='line'>    <span class="n">s_requestQueueMutex</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
</span><span class='line'>    <span class="n">s_requestQueue</span><span class="o">-&gt;</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="n">s_requestQueueMutex</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">s_requestQueue</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">s_requestQueue</span><span class="p">;</span>
</span><span class='line'>        <span class="n">s_requestQueue</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">s_responseQueue</span><span class="p">;</span>
</span><span class='line'>        <span class="n">s_responseQueue</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
整个处理流程是这样的:</p>

<ul>
<li>先初始化请求和响应队列，生成新的线程，新线程中调用networkThread()函数</li>
<li>在networkThread()函数中有一个while(true)循环，用来检查请求队列是否有新的请求数据，如果有，处理之。</li>
<li>当在send()函数中，将请求数据加入请求队列后，networkThread()随后进行处理。</li>
<li>在networkThread()中，先将请求数据从请求队列中拿出来，然后此数据生成HttpResponse()响应。</li>
<li>在HttpResponse中保存有一个请求数据，然后调用processResponse()方法，进行响应处理。</li>
<li>在processResponse()方法中，先将response中的请求数据拿出来，根据请求类型，调用不同的方法。</li>
<li>processGetTask(), processPostTask(), processPutTask(), processDeleteTask()</li>
<li>分别用于处理GET,POST,PUT,DELETE请求。</li>
<li>在这些方法中，使用curl进行具体网络请求，链接等。并将结果存储到response中。</li>
<li>然后将response添加到响应队列中。用schedule调回主线程dispatchResponseCallbacks()方法进行处理。</li>
<li>在dispatchResponseCallbacks()中，先将响应从响应队列中取出。</li>
<li>得到response中的request请求，然后调用request中的注册的callback函数。</li>
<li>此时就可以在callback函数中，通过response中的响应数据进行处理了。</li>
</ul>


<p>这样就完成了一次具体的http请求。 <br/>
相比sendImmediate()请求就简单直接一些：</p>

<ul>
<li>在新线程中，调用networkThreadAlone()方法。</li>
<li>在networkThreadAlone()没有将request添加到队列中，而是直接生成response，采用processResponse()方法进行处理。</li>
<li>处理之后，schedule调回主线程，调用callback，进行数据处理。</li>
</ul>


<p>以上就是对cocos2d-x的Http请求的简单学习总结。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2d-x -- Jni调用]]></title>
    <link href="http://ypengju.github.io/blog/2014/10/28/cocos2d-x-jnidiao-yong/"/>
    <updated>2014-10-28T21:26:14+08:00</updated>
    <id>http://ypengju.github.io/blog/2014/10/28/cocos2d-x-jnidiao-yong</id>
    <content type="html"><![CDATA[<p>cocos2d-x要在android手机上运行，就需要在java和c++两种语言之间进行调用，在cocos2d-x中完成这个任务的就是jni，它可以使两者之间互相调用，从而让用c++开发的cocos2d-x游戏，在android上完美运行。 <br/>
cocos2d-x中封装了JniHelper类，方便通过c++来调用java方法，此类位于platform/android/jni/目录下，先来看看这个类都提供了哪些方法。<!--more--></p>

<figure class='code'><figcaption><span>JniHelper.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">JniMethodInfo_</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">JNIEnv</span> <span class="o">*</span>    <span class="n">env</span><span class="p">;</span>
</span><span class='line'>    <span class="n">jclass</span>      <span class="n">classID</span><span class="p">;</span>
</span><span class='line'>    <span class="n">jmethodID</span>   <span class="n">methodID</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">JniMethodInfo</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CC_DLL</span> <span class="n">JniHelper</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">void</span> <span class="n">setJavaVM</span><span class="p">(</span><span class="n">JavaVM</span> <span class="o">*</span><span class="n">javaVM</span><span class="p">);</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">JavaVM</span><span class="o">*</span> <span class="nf">getJavaVM</span><span class="p">();</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">JNIEnv</span><span class="o">*</span> <span class="nf">getEnv</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="kt">bool</span> <span class="nf">setClassLoaderFrom</span><span class="p">(</span><span class="n">jobject</span> <span class="n">activityInstance</span><span class="p">);</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">bool</span> <span class="nf">getStaticMethodInfo</span><span class="p">(</span><span class="n">JniMethodInfo</span> <span class="o">&amp;</span><span class="n">methodinfo</span><span class="p">,</span>
</span><span class='line'>                                    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">className</span><span class="p">,</span>
</span><span class='line'>                                    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">methodName</span><span class="p">,</span>
</span><span class='line'>                                    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">paramCode</span><span class="p">);</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">bool</span> <span class="nf">getMethodInfo</span><span class="p">(</span><span class="n">JniMethodInfo</span> <span class="o">&amp;</span><span class="n">methodinfo</span><span class="p">,</span>
</span><span class='line'>                              <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">className</span><span class="p">,</span>
</span><span class='line'>                              <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">methodName</span><span class="p">,</span>
</span><span class='line'>                              <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">paramCode</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">jstring2string</span><span class="p">(</span><span class="n">jstring</span> <span class="n">str</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="n">jmethodID</span> <span class="n">loadclassMethod_methodID</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">jobject</span> <span class="n">classloader</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">JNIEnv</span><span class="o">*</span> <span class="n">cacheEnv</span><span class="p">(</span><span class="n">JavaVM</span><span class="o">*</span> <span class="n">jvm</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="kt">bool</span> <span class="nf">getMethodInfo_DefaultClassLoader</span><span class="p">(</span><span class="n">JniMethodInfo</span> <span class="o">&amp;</span><span class="n">methodinfo</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">className</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">methodName</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">paramCode</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="n">JavaVM</span><span class="o">*</span> <span class="n">_psJavaVM</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
结构体JniMethodInfo中封装了Jni环境，java类，类中的方法。
JniHelper提供了获取Java虚拟机的接口，JNI环境的接口，以及获取Java静态方法，和普通方法的接口，我们最常使用的就是这两个方法了，以及提供了一个将java字符串与c++字符串转化的函数。</p>

<figure class='code'><figcaption><span>getStaticMethodInfo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">bool</span> <span class="n">JniHelper</span><span class="o">::</span><span class="n">getStaticMethodInfo</span><span class="p">(</span><span class="n">JniMethodInfo</span> <span class="o">&amp;</span><span class="n">methodinfo</span><span class="p">,</span>
</span><span class='line'>                                    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">className</span><span class="p">,</span>
</span><span class='line'>                                    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">methodName</span><span class="p">,</span>
</span><span class='line'>                                    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">paramCode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="k">nullptr</span> <span class="o">==</span> <span class="n">className</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>        <span class="p">(</span><span class="k">nullptr</span> <span class="o">==</span> <span class="n">methodName</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>        <span class="p">(</span><span class="k">nullptr</span> <span class="o">==</span> <span class="n">paramCode</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span> <span class="o">=</span> <span class="n">JniHelper</span><span class="o">::</span><span class="n">getEnv</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">env</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;Failed to get JNIEnv&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">jclass</span> <span class="n">classID</span> <span class="o">=</span> <span class="n">_getClassID</span><span class="p">(</span><span class="n">className</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="n">classID</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;Failed to find class %s&quot;</span><span class="p">,</span> <span class="n">className</span><span class="p">);</span>
</span><span class='line'>        <span class="n">env</span><span class="o">-&gt;</span><span class="n">ExceptionClear</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">jmethodID</span> <span class="n">methodID</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetStaticMethodID</span><span class="p">(</span><span class="n">classID</span><span class="p">,</span> <span class="n">methodName</span><span class="p">,</span> <span class="n">paramCode</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="n">methodID</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;Failed to find static method id of %s&quot;</span><span class="p">,</span> <span class="n">methodName</span><span class="p">);</span>
</span><span class='line'>        <span class="n">env</span><span class="o">-&gt;</span><span class="n">ExceptionClear</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">methodinfo</span><span class="p">.</span><span class="n">classID</span> <span class="o">=</span> <span class="n">classID</span><span class="p">;</span>
</span><span class='line'>    <span class="n">methodinfo</span><span class="p">.</span><span class="n">env</span> <span class="o">=</span> <span class="n">env</span><span class="p">;</span>
</span><span class='line'>    <span class="n">methodinfo</span><span class="p">.</span><span class="n">methodID</span> <span class="o">=</span> <span class="n">methodID</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>   <br/>
getStaticMethodInfo方法中，通过JNIEnv检查传进来的java类，方法等都是否存在，如果存在，最后将其分装在JniMethodInfo中，接下来看看具体的调用。最后一个参数paramCode是用来说明Java函数的参数类型个数及返回值。</p>

<h3>c++调用java</h3>

<p>我以cocos2d-x 3.2生成的例子为例，来看看c++和java的调用。</p>

<h4>调用静态函数</h4>

<p>c++端代码：</p>

<figure class='code'><figcaption><span>getStaticMethodInfo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">JniMethodInfo</span> <span class="n">info</span><span class="p">;</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">isHave</span> <span class="o">=</span> <span class="n">JniHelper</span><span class="o">::</span><span class="n">getStaticMethodInfo</span><span class="p">(</span><span class="n">info</span><span class="p">,</span> <span class="s">&quot;org/cocos2dx/cpp/AppActivity&quot;</span><span class="p">,</span> <span class="s">&quot;staticMethod1&quot;</span><span class="p">,</span> <span class="s">&quot;()V&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">isHave</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot; static void method if&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">info</span><span class="p">.</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">CallStaticVoidMethod</span><span class="p">(</span><span class="n">info</span><span class="p">.</span><span class="n">classID</span><span class="p">,</span> <span class="n">info</span><span class="p">.</span><span class="n">methodID</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot; static void method else&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
java端代码：</p>

<figure class='code'><figcaption><span>getStaticMethodInfo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AppActivity</span> <span class="n">extends</span> <span class="n">Cocos2dxActivity</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">staticMethod1</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">System</span><span class="p">.</span><span class="n">out</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;this is java static method&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
运行编译cocos2d-x代码，在android上运行，就可以看到c++调用java打印<code>this is java static method</code>。 <br/>
此处需要注意，在c++端需要先引进JniHelper的类，并判断是在android环境下运行，否则会报错。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)</span>
</span><span class='line'><span class="cp">#include &quot;../cocos2d/cocos/platform/android/jni/JniHelper.h&quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
c++端首先判断java端的函数是否存在，然后进行调用，主要就是getXXX方法的四个参数</p>

<ul>
<li>第一个参数 - JniMethodInfo对象，用来封装java类，方法等</li>
<li>第二个参数 - Java类的路径，以报名加类名的形式</li>
<li>第三个参数 - 方法名</li>
<li>第四个参数 - 函数的参数类型，个数及返回值类型</li>
</ul>


<p>这里第四个参数比较特殊，具体说明：
参数的格式为  <code>(参数)返回值</code> 括号内是参数类型和参数个数，括号外是返回值类型。具体与java类型对照图如下： <br/>
<img src="http://ypengju.github.io/images/jni/javapar.png"> <br/>
如果函数有多个参数，直接把简写并列即可，但是注意Object与Array型参数简写结尾的分号，示例：<br/>
IIII //4个int型参数的函数 <br/>
ILjava/lang/String;I //整形，string类型，整形组合 (int x, String a, int y)<br/>
所以上边例子第四个参数说明调用的是一个无参无返回值类型的函数。</p>

<h4>调用非静态函数</h4>

<p>c++端代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">JniMethodInfo</span> <span class="n">info</span><span class="p">;</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">isHave</span> <span class="o">=</span> <span class="n">JniHelper</span><span class="o">::</span><span class="n">getMethodInfo</span><span class="p">(</span><span class="n">info</span><span class="p">,</span> <span class="s">&quot;org/cocos2dx/cpp/AppActivity&quot;</span><span class="p">,</span> <span class="s">&quot;voidMethod1&quot;</span><span class="p">,</span> <span class="s">&quot;(II)I&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">isHave</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot; void method if&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">jobject</span> <span class="n">jobj</span> <span class="o">=</span> <span class="n">info</span><span class="p">.</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">NewObject</span><span class="p">(</span><span class="n">info</span><span class="p">.</span><span class="n">classID</span><span class="p">,</span> <span class="n">info</span><span class="p">.</span><span class="n">methodID</span><span class="p">);</span>
</span><span class='line'>    <span class="n">jint</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="n">jint</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>    <span class="n">jint</span> <span class="n">result</span> <span class="o">=</span> <span class="n">info</span><span class="p">.</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">CallIntMethod</span><span class="p">(</span><span class="n">jobj</span><span class="p">,</span> <span class="n">info</span><span class="p">.</span><span class="n">methodID</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot;------return result %ld&quot;</span><span class="p">,</span><span class="n">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot; void method else&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
java端代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">voidMethod1</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;this is java void method a + b = &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
编译之后在android上运行，就可以看到打印<code>this is java void method a + b = 30</code>和<code>------return result 30</code>，分别是c++端和java端打印。此处<code>info.env-&gt;NewObject(info.classID, info.methodID)</code>方法也会调用一次voidMethod1函数，此处暂未弄清楚原因。 <br/>
首先调用JniHelper的getMethodInfo函数确定是否存在调用的函数，如果存在，首先生成java类的对象，然后调用方法，并获得返回值。jni提供了一系列<code>CallXXXMethod()</code>的方法，用来调用不同返回值类型的函数。另外可看到，传入的参数和返回值类型都是用<code>jint</code>类型，这是jni提供的对应的java数据类型，对应关系如下： <br/>
<img src="http://ypengju.github.io/images/jni/javareturn.png"> <br/>
通过JniHelper提供的方法，我们就可以方便的调用java中的函数，来完成android的操作。</p>

<h3>java调用c++</h3>

<p>java端代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">staticMethod2</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">add</span> <span class="o">=</span> <span class="n">nativeMethod</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">8</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;--- add = &quot;</span> <span class="o">+</span> <span class="n">add</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">native</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">nativeMethod</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
c++端代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="n">jint</span> <span class="n">Java_org_cocos2dx_cpp_AppActivity_nativeMethod</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">thiz</span><span class="p">,</span> <span class="n">jint</span> <span class="n">a</span><span class="p">,</span> <span class="n">jint</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//......</span>
</span><span class='line'><span class="n">JniMethodInfo</span> <span class="n">info</span><span class="p">;</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">isHave</span> <span class="o">=</span> <span class="n">JniHelper</span><span class="o">::</span><span class="n">getStaticMethodInfo</span><span class="p">(</span><span class="n">info</span><span class="p">,</span> <span class="s">&quot;org/cocos2dx/cpp/AppActivity&quot;</span><span class="p">,</span> <span class="s">&quot;staticMethod2&quot;</span><span class="p">,</span> <span class="s">&quot;()V&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">isHave</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot; static void method if&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">info</span><span class="p">.</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">CallStaticVoidMethod</span><span class="p">(</span><span class="n">info</span><span class="p">.</span><span class="n">classID</span><span class="p">,</span> <span class="n">info</span><span class="p">.</span><span class="n">methodID</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot; static void method else&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>此处先从c++端调到java，然后再用java调到c++来实现两端互相调用。看上边代码可知，首先调用从c++调用java端的<code>staticMethod2</code>方法，在java端<code>staticMethod2</code>方法中，再调用<code>nativeMethod</code>方法，此方法具体在c++端实现，运行android程序后，可看到在控制台打印<code>--- add = 9</code>。说明成功调用。 <br/>
<code>nativeMethod</code>是在c++端进行实现的，java端相当于只进行了声明，但特别注意，在声明中要添加<code>native</code>关键字，以说明次函数为c++端函数。在c++端实现时，方法名具有一定的规则，首先是Java字段，然后是包名，类名，方法名，之间用下划线分开，在参数列表：第一个为Jni运行环境，第二个参数为调用对象，之后的为调用函数时的参数。</p>

<p>本例代码: <a href="https://github.com/ypengju/cocos2d-xTest/tree/master/JniTest">https://github.com/ypengju/cocos2d-xTest/tree/master/JniTest</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2d-x -- 多分辨率适配]]></title>
    <link href="http://ypengju.github.io/blog/2014/10/20/cocos2d-x-duo-fen-bian-lu-gua-pei/"/>
    <updated>2014-10-20T21:06:21+08:00</updated>
    <id>http://ypengju.github.io/blog/2014/10/20/cocos2d-x-duo-fen-bian-lu-gua-pei</id>
    <content type="html"><![CDATA[<p>多分辨率适配一直是cocos2d-x游戏关注的一个重点，所以搞清楚cocos2d-x适配方案尤为重要。 <br/>
假设不存在多分辨率适配问题，只有一种分辨率，那我们就为该分辨率设计大小和屏幕一样的图片就OK了，但是因为现在市场手机大小不一，苹果及安卓分辨率各种大小应有尽有。<!-- more -->在这种情况下，我们为每种分辨率适配各自大小的图片很明显是不太可能的，这样就会有应用程序安装包过大，设计任务过重等情况。这种问题在cocos2d-x中尤为突出，所以我们就想尽办法，让一套或者少量几套图就能适配各种分辨率，这样即省时又省力，也可应对未来分辨率增长变化。一般在游戏开发中，都是做一套图，然后来适配不同分辨率来解决此问题。 <br/>
了解之前需要理清几个分辨率概念</p>

<ul>
<li>Resource Resoluation: 资源分辨率，也就是我们常用到的图片分辨率</li>
<li>Screen Resolution: 手机真是屏幕分辨率</li>
<li>Design Resolution: 设计分辨率</li>
</ul>


<p>整个过程都是围绕这几个分辨率展开的，最终的目的是把资源分辨率完美的缩放致手机屏幕分辨率，从而使界面完美展现。而设计分辨率就是在这两种分辨率之间起一个桥梁作用。需要理解就是下边这几个函数</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>director-&gt;getOpenGLView()-&gt;setDesignResolutionSize(float width, float height, ResolutionPolicy resolutionPolicy);
</span><span class='line'>Director::getInstance()-&gt;setContentScaleFactor(float scaleFactor);</span></code></pre></td></tr></table></div></figure>


<p> <br/>
<code>setDesignResolutionSize</code>函数设置了设计分辨率及适配方案  <br/>
<code>setContentScaleFactor</code>函数设置了缩放因子  <br/>
所有屏幕大小及显示区域大小都是在<code>GLViewProtocol</code>类中完成的，此类位于cocos/platform目录中，可以看到，它是个平台窗口类GLView的基类，在GLViewProtocol中设置大小及适配方案，确保在所有平台都采用一套方案。</p>

<figure class='code'><figcaption><span>GLViewProtocol.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="p">......</span>
</span><span class='line'><span class="c1">// real screen size</span>
</span><span class='line'><span class="n">Size</span> <span class="n">_screenSize</span><span class="p">;</span>
</span><span class='line'><span class="c1">// resolution size, it is the size appropriate for the app resources.</span>
</span><span class='line'><span class="n">Size</span> <span class="n">_designResolutionSize</span><span class="p">;</span>
</span><span class='line'><span class="c1">// the view port size</span>
</span><span class='line'><span class="n">Rect</span> <span class="n">_viewPortRect</span><span class="p">;</span>
</span><span class='line'><span class="c1">// the view name</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">_viewName</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span> <span class="n">_scaleX</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">_scaleY</span><span class="p">;</span>
</span><span class='line'><span class="n">ResolutionPolicy</span> <span class="n">_resolutionPolicy</span><span class="p">;</span>
</span><span class='line'><span class="p">......</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
可以看到GLViewProtocol中又几个成员变量</p>

<ul>
<li>_screenSize 手机屏幕真实分辨率大小</li>
<li>_designResolutionSize 设计分辨率大小</li>
<li>_viewPortRect 显示区域大小</li>
<li><em>scaleX, </em>scaleY 宽高比</li>
<li>_resulutionPolicy 适配方式</li>
</ul>


<p>那么继续看设置设计分辨率大小和适配方式都干了什么</p>

<figure class='code'><figcaption><span>GLViewProtocol.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">GLViewProtocol</span><span class="o">::</span><span class="n">setDesignResolutionSize</span><span class="p">(</span><span class="kt">float</span> <span class="n">width</span><span class="p">,</span> <span class="kt">float</span> <span class="n">height</span><span class="p">,</span> <span class="n">ResolutionPolicy</span> <span class="n">resolutionPolicy</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CCASSERT</span><span class="p">(</span><span class="n">resolutionPolicy</span> <span class="o">!=</span> <span class="n">ResolutionPolicy</span><span class="o">::</span><span class="n">UNKNOWN</span><span class="p">,</span> <span class="s">&quot;should set resolutionPolicy&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">width</span> <span class="o">==</span> <span class="mf">0.0f</span> <span class="o">||</span> <span class="n">height</span> <span class="o">==</span> <span class="mf">0.0f</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_designResolutionSize</span><span class="p">.</span><span class="n">setSize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_resolutionPolicy</span> <span class="o">=</span> <span class="n">resolutionPolicy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">updateDesignResolutionSize</span><span class="p">();</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
从源码看我们不能将适配方式设置为UNKNOWN方式，之后对分辨率和适配方式变量赋值，调用updateDesignResolutionSize()函数。继续看updateDesignResolutionSize()函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">GLViewProtocol</span><span class="o">::</span><span class="n">updateDesignResolutionSize</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_screenSize</span><span class="p">.</span><span class="n">width</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">_screenSize</span><span class="p">.</span><span class="n">height</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>        <span class="o">&amp;&amp;</span> <span class="n">_designResolutionSize</span><span class="p">.</span><span class="n">width</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">_designResolutionSize</span><span class="p">.</span><span class="n">height</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_scaleX</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">_screenSize</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="n">_designResolutionSize</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_scaleY</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">_screenSize</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="n">_designResolutionSize</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">_resolutionPolicy</span> <span class="o">==</span> <span class="n">ResolutionPolicy</span><span class="o">::</span><span class="n">NO_BORDER</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">_scaleX</span> <span class="o">=</span> <span class="n">_scaleY</span> <span class="o">=</span> <span class="n">MAX</span><span class="p">(</span><span class="n">_scaleX</span><span class="p">,</span> <span class="n">_scaleY</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">_resolutionPolicy</span> <span class="o">==</span> <span class="n">ResolutionPolicy</span><span class="o">::</span><span class="n">SHOW_ALL</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">_scaleX</span> <span class="o">=</span> <span class="n">_scaleY</span> <span class="o">=</span> <span class="n">MIN</span><span class="p">(</span><span class="n">_scaleX</span><span class="p">,</span> <span class="n">_scaleY</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">_resolutionPolicy</span> <span class="o">==</span> <span class="n">ResolutionPolicy</span><span class="o">::</span><span class="n">FIXED_HEIGHT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_scaleX</span> <span class="o">=</span> <span class="n">_scaleY</span><span class="p">;</span>
</span><span class='line'>            <span class="n">_designResolutionSize</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">ceilf</span><span class="p">(</span><span class="n">_screenSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="n">_scaleX</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">_resolutionPolicy</span> <span class="o">==</span> <span class="n">ResolutionPolicy</span><span class="o">::</span><span class="n">FIXED_WIDTH</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_scaleY</span> <span class="o">=</span> <span class="n">_scaleX</span><span class="p">;</span>
</span><span class='line'>            <span class="n">_designResolutionSize</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">ceilf</span><span class="p">(</span><span class="n">_screenSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="n">_scaleY</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// calculate the rect of viewport</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">viewPortW</span> <span class="o">=</span> <span class="n">_designResolutionSize</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="n">_scaleX</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">viewPortH</span> <span class="o">=</span> <span class="n">_designResolutionSize</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="n">_scaleY</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//将显示区域在屏幕中居中显示</span>
</span><span class='line'>        <span class="n">_viewPortRect</span><span class="p">.</span><span class="n">setRect</span><span class="p">((</span><span class="n">_screenSize</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">viewPortW</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">_screenSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">viewPortH</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">viewPortW</span><span class="p">,</span> <span class="n">viewPortH</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// reset director&#39;s member variables to fit visible rect</span>
</span><span class='line'>        <span class="k">auto</span> <span class="n">director</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">();</span>
</span><span class='line'>        <span class="n">director</span><span class="o">-&gt;</span><span class="n">_winSizeInPoints</span> <span class="o">=</span> <span class="n">getDesignResolutionSize</span><span class="p">();</span>
</span><span class='line'>        <span class="n">director</span><span class="o">-&gt;</span><span class="n">createStatsLabel</span><span class="p">();</span>
</span><span class='line'>        <span class="n">director</span><span class="o">-&gt;</span><span class="n">setGLDefaultValues</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
在该方法中，</p>

<ol>
<li>先计算宽高比，（宽高比就是屏幕实际宽/设计分辨率宽, 实际分辨率高/设计分辨率高，这两个比值就是宽高比，此处用<em>scaleX和</em>scaleY两个变量表示）</li>
<li>然后根据不同适配方式，重新计算宽高比</li>
<li>再根据设计分辨率和缩放大小计算可视区域大小</li>
<li>之后设置了director中的一些变量。</li>
</ol>


<p>我们一个一个分析，来看看适配方式。 <br/>
其实在这里就可以清楚的看到设置适配方式的目的就是来按不同方式计算宽高比，及对设计分辨率大小重新定值。根据代码来解析下其中含义</p>

<h4>ResolutionPolicy::NO_BORDER</h4>

<p>次方式计算采用<em>scaleX和</em>scaleY中较大的对两者进行赋值，因为是按较大的进行赋值，所以在之后计算可视区域大小的时候，有一边会超出屏幕大小。 在实际应用中就是，有可能显示区域超过手机屏幕，使屏幕边缘图标不能完整显示。</p>

<h4>ResolutionPolicy::SHOW_ALL</h4>

<p>次方式计算采用<em>scaleX和</em>scaleY中较小的对两者进行赋值，因为是按较大的进行赋值，所以在之后计算可视区域大小的时候，会有一边小于屏幕大小。在实际手机中看，整个界面都能在屏幕中显示，但是会有黑边情况。</p>

<h4>ResolutionPolicy::FIXED_HEIGHT</h4>

<p>此方式以高比为基准，对<em>scaleX和</em>scaleY赋值都为_scaleY，用新的宽比重新计算了设计分辨率的宽，这样在计算可视区域的时候，保证高度完全适配，宽度根据高度进行调整。</p>

<h4>ResolutionPolicy::FIXED_HEIGHT</h4>

<p>此方式以宽比为基准，对<em>scaleX和</em>scaleY赋值都为_scaleX，用新的高比重新计算了设计分辨率的高，这样在计算可视区域的时候，保证宽度完全适配，高度根据高度进行调整。</p>

<h4>ResolutionPolicy::EXACT_FIT</h4>

<p>除了代码中看到的四种，其实还有一种EXACT_FIT，因为该方式对宽高比不做任何修改，所以在代码中看不到条件判断，但其实就是直接计算的。可视区域就是屏幕大小，这种方式因为是宽拉宽，高拉高，大多数情况宽高比都不一样，所以会出现图片拉伸的情况。</p>

<p>其实可以看到设计分辨率在屏幕分辨率和可视区域之间起到了一个桥梁的作用，我们所有的游戏布局都是在设计分辨率上进行的，之后根据适配方式，进行缩放。  <br/>
既然所有的布局都是在设计分辨率上进行的，那么图片分辨率和设计分辨率是如何关联，因为图片分辨率可能很大，设计分辨率可能小，这样在设计分辨率上岂不是放不下了，这个问题可以通过设置缩放因子进行解决。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">setContentScaleFactor</span><span class="p">(</span><span class="kt">float</span> <span class="n">scaleFactor</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这样我们就可以将图片分辨率调整到设计分辨率，在设计分辨率上进行完整布局。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2d-x -- 渲染流程]]></title>
    <link href="http://ypengju.github.io/blog/2014/10/19/cocos2d-x-xuan-ran-liu-cheng/"/>
    <updated>2014-10-19T20:52:49+08:00</updated>
    <id>http://ypengju.github.io/blog/2014/10/19/cocos2d-x-xuan-ran-liu-cheng</id>
    <content type="html"><![CDATA[<p>因为现在并不了解OpenGL ES的渲染过程，这里只能简单理清整个cocos2d-x 3.2版本的渲染顺序及调用过程，具体OpenGL ES实现，之后会学习总结。 <br/>
在3.0之前的版本中，cocos2d-x渲染每个节点都是放在节点的draw()方法中直接调用OpenGL命令来进行渲染的，比如2.2.5中的CCSprite::draw()<!-- more --></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">CCSprite</span><span class="o">::</span><span class="n">draw</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CC_PROFILER_START_CATEGORY</span><span class="p">(</span><span class="n">kCCProfilerCategorySprite</span><span class="p">,</span> <span class="s">&quot;CCSprite - draw&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CCAssert</span><span class="p">(</span><span class="o">!</span><span class="n">m_pobBatchNode</span><span class="p">,</span> <span class="s">&quot;If CCSprite is being rendered by CCSpriteBatchNode, CCSprite#draw SHOULD NOT be called&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CC_NODE_DRAW_SETUP</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ccGLBlendFunc</span><span class="p">(</span> <span class="n">m_sBlendFunc</span><span class="p">.</span><span class="n">src</span><span class="p">,</span> <span class="n">m_sBlendFunc</span><span class="p">.</span><span class="n">dst</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ccGLBindTexture2D</span><span class="p">(</span> <span class="n">m_pobTexture</span><span class="o">-&gt;</span><span class="n">getName</span><span class="p">()</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">ccGLEnableVertexAttribs</span><span class="p">(</span> <span class="n">kCCVertexAttribFlag_PosColorTex</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define kQuadSize sizeof(m_sQuad.bl)</span>
</span><span class='line'><span class="cp">#ifdef EMSCRIPTEN</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">setGLBufferData</span><span class="p">(</span><span class="o">&amp;</span><span class="n">m_sQuad</span><span class="p">,</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">kQuadSize</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">offset</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">&amp;</span><span class="n">m_sQuad</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif </span><span class="c1">// EMSCRIPTEN</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// vertex</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">diff</span> <span class="o">=</span> <span class="n">offsetof</span><span class="p">(</span> <span class="n">ccV3F_C4B_T2F</span><span class="p">,</span> <span class="n">vertices</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="n">kCCVertexAttrib_Position</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span> <span class="n">GL_FALSE</span><span class="p">,</span> <span class="n">kQuadSize</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">offset</span> <span class="o">+</span> <span class="n">diff</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// texCoods</span>
</span><span class='line'>    <span class="n">diff</span> <span class="o">=</span> <span class="n">offsetof</span><span class="p">(</span> <span class="n">ccV3F_C4B_T2F</span><span class="p">,</span> <span class="n">texCoords</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="n">kCCVertexAttrib_TexCoords</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span> <span class="n">GL_FALSE</span><span class="p">,</span> <span class="n">kQuadSize</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">offset</span> <span class="o">+</span> <span class="n">diff</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// color</span>
</span><span class='line'>    <span class="n">diff</span> <span class="o">=</span> <span class="n">offsetof</span><span class="p">(</span> <span class="n">ccV3F_C4B_T2F</span><span class="p">,</span> <span class="n">colors</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="n">kCCVertexAttrib_Color</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">GL_UNSIGNED_BYTE</span><span class="p">,</span> <span class="n">GL_TRUE</span><span class="p">,</span> <span class="n">kQuadSize</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">offset</span> <span class="o">+</span> <span class="n">diff</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">glDrawArrays</span><span class="p">(</span><span class="n">GL_TRIANGLE_STRIP</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CHECK_GL_ERROR_DEBUG</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#if CC_SPRITE_DEBUG_DRAW == 1</span>
</span><span class='line'>    <span class="c1">// draw bounding box</span>
</span><span class='line'>    <span class="n">CCPoint</span> <span class="n">vertices</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>        <span class="n">ccp</span><span class="p">(</span><span class="n">m_sQuad</span><span class="p">.</span><span class="n">tl</span><span class="p">.</span><span class="n">vertices</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="n">m_sQuad</span><span class="p">.</span><span class="n">tl</span><span class="p">.</span><span class="n">vertices</span><span class="p">.</span><span class="n">y</span><span class="p">),</span>
</span><span class='line'>        <span class="n">ccp</span><span class="p">(</span><span class="n">m_sQuad</span><span class="p">.</span><span class="n">bl</span><span class="p">.</span><span class="n">vertices</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="n">m_sQuad</span><span class="p">.</span><span class="n">bl</span><span class="p">.</span><span class="n">vertices</span><span class="p">.</span><span class="n">y</span><span class="p">),</span>
</span><span class='line'>        <span class="n">ccp</span><span class="p">(</span><span class="n">m_sQuad</span><span class="p">.</span><span class="n">br</span><span class="p">.</span><span class="n">vertices</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="n">m_sQuad</span><span class="p">.</span><span class="n">br</span><span class="p">.</span><span class="n">vertices</span><span class="p">.</span><span class="n">y</span><span class="p">),</span>
</span><span class='line'>        <span class="n">ccp</span><span class="p">(</span><span class="n">m_sQuad</span><span class="p">.</span><span class="n">tr</span><span class="p">.</span><span class="n">vertices</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="n">m_sQuad</span><span class="p">.</span><span class="n">tr</span><span class="p">.</span><span class="n">vertices</span><span class="p">.</span><span class="n">y</span><span class="p">),</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">ccDrawPoly</span><span class="p">(</span><span class="n">vertices</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'><span class="cp">#elif CC_SPRITE_DEBUG_DRAW == 2</span>
</span><span class='line'>    <span class="c1">// draw texture box</span>
</span><span class='line'>    <span class="n">CCSize</span> <span class="n">s</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">getTextureRect</span><span class="p">().</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CCPoint</span> <span class="n">offsetPix</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">getOffsetPosition</span><span class="p">();</span>
</span><span class='line'>    <span class="n">CCPoint</span> <span class="n">vertices</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ccp</span><span class="p">(</span><span class="n">offsetPix</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="n">offsetPix</span><span class="p">.</span><span class="n">y</span><span class="p">),</span> <span class="n">ccp</span><span class="p">(</span><span class="n">offsetPix</span><span class="p">.</span><span class="n">x</span><span class="o">+</span><span class="n">s</span><span class="p">.</span><span class="n">width</span><span class="p">,</span><span class="n">offsetPix</span><span class="p">.</span><span class="n">y</span><span class="p">),</span>
</span><span class='line'>        <span class="n">ccp</span><span class="p">(</span><span class="n">offsetPix</span><span class="p">.</span><span class="n">x</span><span class="o">+</span><span class="n">s</span><span class="p">.</span><span class="n">width</span><span class="p">,</span><span class="n">offsetPix</span><span class="p">.</span><span class="n">y</span><span class="o">+</span><span class="n">s</span><span class="p">.</span><span class="n">height</span><span class="p">),</span> <span class="n">ccp</span><span class="p">(</span><span class="n">offsetPix</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="n">offsetPix</span><span class="p">.</span><span class="n">y</span><span class="o">+</span><span class="n">s</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">ccDrawPoly</span><span class="p">(</span><span class="n">vertices</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif </span><span class="c1">// CC_SPRITE_DEBUG_DRAW</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CC_INCREMENT_GL_DRAWS</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CC_PROFILER_STOP_CATEGORY</span><span class="p">(</span><span class="n">kCCProfilerCategorySprite</span><span class="p">,</span> <span class="s">&quot;CCSprite - draw&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
可以看到其中是直接调用OpenGL命令glXXX等直接进行渲染的，但是在3.0之后的版本，cocos2d-x改变了渲染策略，这里主要记录3.2版本的渲染方式。     <br/>
每一帧的渲染都是由主循环开始</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">DisplayLinkDirector</span><span class="o">::</span><span class="n">mainLoop</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_purgeDirectorInNextLoop</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_purgeDirectorInNextLoop</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>        <span class="n">purgeDirector</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="n">_invalid</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="c1">//渲染场景</span>
</span><span class='line'>        <span class="n">drawScene</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// release the objects</span>
</span><span class='line'>        <span class="n">PoolManager</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getCurrentPool</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
其中每一帧都调用drawScene()方法，对当前场景进行渲染。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Draw the Scene</span>
</span><span class='line'><span class="kt">void</span> <span class="n">Director</span><span class="o">::</span><span class="n">drawScene</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// calculate &quot;global&quot; dt</span>
</span><span class='line'>    <span class="n">calculateDeltaTime</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// skip one flame when _deltaTime equal to zero.</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">_deltaTime</span> <span class="o">&lt;</span> <span class="n">FLT_EPSILON</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_openGLView</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_openGLView</span><span class="o">-&gt;</span><span class="n">pollInputEvents</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//tick before glClear: issue #533</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="n">_paused</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_scheduler</span><span class="o">-&gt;</span><span class="n">update</span><span class="p">(</span><span class="n">_deltaTime</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_eventDispatcher</span><span class="o">-&gt;</span><span class="n">dispatchEvent</span><span class="p">(</span><span class="n">_eventAfterUpdate</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glClear</span><span class="p">(</span><span class="n">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="n">GL_DEPTH_BUFFER_BIT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* to avoid flickr, nextScene MUST be here: after tick and before draw.</span>
</span><span class='line'><span class="cm">     XXX: Which bug is this one. It seems that it can&#39;t be reproduced with v0.9 */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_nextScene</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">setNextScene</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pushMatrix</span><span class="p">(</span><span class="n">MATRIX_STACK_TYPE</span><span class="o">::</span><span class="n">MATRIX_STACK_MODELVIEW</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// draw the scene</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_runningScene</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="c1">//调用当前场景的visit函数</span>
</span><span class='line'>        <span class="n">_runningScene</span><span class="o">-&gt;</span><span class="n">visit</span><span class="p">(</span><span class="n">_renderer</span><span class="p">,</span> <span class="n">Mat4</span><span class="o">::</span><span class="n">IDENTITY</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_eventDispatcher</span><span class="o">-&gt;</span><span class="n">dispatchEvent</span><span class="p">(</span><span class="n">_eventAfterVisit</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// draw the notifications node</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_notificationNode</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_notificationNode</span><span class="o">-&gt;</span><span class="n">visit</span><span class="p">(</span><span class="n">_renderer</span><span class="p">,</span> <span class="n">Mat4</span><span class="o">::</span><span class="n">IDENTITY</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_displayStats</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">showStats</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//进行渲染</span>
</span><span class='line'>    <span class="n">_renderer</span><span class="o">-&gt;</span><span class="n">render</span><span class="p">();</span>
</span><span class='line'>    <span class="n">_eventDispatcher</span><span class="o">-&gt;</span><span class="n">dispatchEvent</span><span class="p">(</span><span class="n">_eventAfterDraw</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">popMatrix</span><span class="p">(</span><span class="n">MATRIX_STACK_TYPE</span><span class="o">::</span><span class="n">MATRIX_STACK_MODELVIEW</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_totalFrames</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// swap buffers</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_openGLView</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_openGLView</span><span class="o">-&gt;</span><span class="n">swapBuffers</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_displayStats</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">calculateMPF</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
可以看到这里先调用了当前场景的visit函数，之后进行渲染，那先来看看当前场景的vivit函数。在Scene中并未实现visit函数，所以调用的是父类Node的visit函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">Node</span><span class="o">::</span><span class="n">visit</span><span class="p">(</span><span class="n">Renderer</span><span class="o">*</span> <span class="n">renderer</span><span class="p">,</span> <span class="k">const</span> <span class="n">Mat4</span> <span class="o">&amp;</span><span class="n">parentTransform</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">parentFlags</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// quick return if not visible. children won&#39;t be drawn.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_visible</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">flags</span> <span class="o">=</span> <span class="n">processParentFlags</span><span class="p">(</span><span class="n">parentTransform</span><span class="p">,</span> <span class="n">parentFlags</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// IMPORTANT:</span>
</span><span class='line'>    <span class="c1">// To ease the migration to v3.0, we still support the Mat4 stack,</span>
</span><span class='line'>    <span class="c1">// but it is deprecated and your code should not rely on it</span>
</span><span class='line'>    <span class="n">Director</span><span class="o">*</span> <span class="n">director</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">();</span>
</span><span class='line'>    <span class="n">director</span><span class="o">-&gt;</span><span class="n">pushMatrix</span><span class="p">(</span><span class="n">MATRIX_STACK_TYPE</span><span class="o">::</span><span class="n">MATRIX_STACK_MODELVIEW</span><span class="p">);</span>
</span><span class='line'>    <span class="n">director</span><span class="o">-&gt;</span><span class="n">loadMatrix</span><span class="p">(</span><span class="n">MATRIX_STACK_TYPE</span><span class="o">::</span><span class="n">MATRIX_STACK_MODELVIEW</span><span class="p">,</span> <span class="n">_modelViewTransform</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">_children</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">sortAllChildren</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">// draw children zOrder &lt; 0</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_children</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">auto</span> <span class="n">node</span> <span class="o">=</span> <span class="n">_children</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="n">node</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">_localZOrder</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>                <span class="n">node</span><span class="o">-&gt;</span><span class="n">visit</span><span class="p">(</span><span class="n">renderer</span><span class="p">,</span> <span class="n">_modelViewTransform</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// self draw</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">draw</span><span class="p">(</span><span class="n">renderer</span><span class="p">,</span> <span class="n">_modelViewTransform</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">it</span><span class="o">=</span><span class="n">_children</span><span class="p">.</span><span class="n">cbegin</span><span class="p">()</span><span class="o">+</span><span class="n">i</span><span class="p">;</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">_children</span><span class="p">.</span><span class="n">cend</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="o">*</span><span class="n">it</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">visit</span><span class="p">(</span><span class="n">renderer</span><span class="p">,</span> <span class="n">_modelViewTransform</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">draw</span><span class="p">(</span><span class="n">renderer</span><span class="p">,</span> <span class="n">_modelViewTransform</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">director</span><span class="o">-&gt;</span><span class="n">popMatrix</span><span class="p">(</span><span class="n">MATRIX_STACK_TYPE</span><span class="o">::</span><span class="n">MATRIX_STACK_MODELVIEW</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// FIX ME: Why need to set _orderOfArrival to 0??</span>
</span><span class='line'>    <span class="c1">// Please refer to https://github.com/cocos2d/cocos2d-x/pull/6920</span>
</span><span class='line'>    <span class="c1">// reset for next frame</span>
</span><span class='line'>    <span class="c1">// _orderOfArrival = 0;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
可以看到这里递归调用了所以子节点的visit函数，在visit函数中会调用所有节点的draw函数，在3.0之前的版本中draw函数具体实现OpenGL渲染，在3.0之后的版本中，draw函数中，向引擎发送了一个渲染命了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">Node</span><span class="o">::</span><span class="n">draw</span><span class="p">(</span><span class="n">Renderer</span><span class="o">*</span> <span class="n">renderer</span><span class="p">,</span> <span class="k">const</span> <span class="n">Mat4</span> <span class="o">&amp;</span><span class="n">transform</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">flags</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
Node的中的draw函数为虚函数，没有实现。以Sprite为例来看看具体流程。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">draw</span><span class="p">(</span><span class="n">Renderer</span> <span class="o">*</span><span class="n">renderer</span><span class="p">,</span> <span class="k">const</span> <span class="n">Mat4</span> <span class="o">&amp;</span><span class="n">transform</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">flags</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Don&#39;t do calculate the culling if the transform was not updated</span>
</span><span class='line'>    <span class="n">_insideBounds</span> <span class="o">=</span> <span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">FLAGS_TRANSFORM_DIRTY</span><span class="p">)</span> <span class="o">?</span> <span class="n">renderer</span><span class="o">-&gt;</span><span class="n">checkVisibility</span><span class="p">(</span><span class="n">transform</span><span class="p">,</span> <span class="n">_contentSize</span><span class="p">)</span> <span class="o">:</span> <span class="n">_insideBounds</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">_insideBounds</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_quadCommand</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="n">_globalZOrder</span><span class="p">,</span> <span class="n">_texture</span><span class="o">-&gt;</span><span class="n">getName</span><span class="p">(),</span> <span class="n">getGLProgramState</span><span class="p">(),</span> <span class="n">_blendFunc</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">_quad</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">transform</span><span class="p">);</span>
</span><span class='line'>        <span class="n">renderer</span><span class="o">-&gt;</span><span class="n">addCommand</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_quadCommand</span><span class="p">);</span>
</span><span class='line'><span class="cp">#if CC_SPRITE_DEBUG_DRAW</span>
</span><span class='line'>        <span class="n">_customDebugDrawCommand</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="n">_globalZOrder</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_customDebugDrawCommand</span><span class="p">.</span><span class="n">func</span> <span class="o">=</span> <span class="n">CC_CALLBACK_0</span><span class="p">(</span><span class="n">Sprite</span><span class="o">::</span><span class="n">drawDebugData</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>        <span class="n">renderer</span><span class="o">-&gt;</span><span class="n">addCommand</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_customDebugDrawCommand</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif </span><span class="c1">//CC_SPRITE_DEBUG_DRAW</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，Sprite的draw函数中，并没有进行具体的OpenGL操作，而是在renderer中添加了而一个渲染命令。而真正调用OpenGL命令进行渲染是在Renderer的render函数中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">Renderer</span><span class="o">::</span><span class="n">render</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//Uncomment this once everything is rendered by new renderer</span>
</span><span class='line'>    <span class="c1">//glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//TODO setup camera or MVP</span>
</span><span class='line'>    <span class="n">_isRendering</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_glViewAssigned</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// cleanup</span>
</span><span class='line'>        <span class="n">_drawnBatches</span> <span class="o">=</span> <span class="n">_drawnVertices</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Process render commands</span>
</span><span class='line'>        <span class="c1">//1. Sort render commands based on ID</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="nl">renderqueue</span> <span class="p">:</span> <span class="n">_renderGroups</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">renderqueue</span><span class="p">.</span><span class="n">sort</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">visitRenderQueue</span><span class="p">(</span><span class="n">_renderGroups</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">flush</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">clean</span><span class="p">();</span>
</span><span class='line'>    <span class="n">_isRendering</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
render函数中先对renderqueue进行了排序，renderqueue中存储这所有在节点draw函数加载进来的渲染命令。排序完之后，调用visitRenderQueue函数完成具体的渲染工作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">Renderer</span><span class="o">::</span><span class="n">visitRenderQueue</span><span class="p">(</span><span class="k">const</span> <span class="n">RenderQueue</span><span class="o">&amp;</span> <span class="n">queue</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">ssize_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">ssize_t</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">auto</span> <span class="n">command</span> <span class="o">=</span> <span class="n">queue</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
</span><span class='line'>        <span class="k">auto</span> <span class="n">commandType</span> <span class="o">=</span> <span class="n">command</span><span class="o">-&gt;</span><span class="n">getType</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">RenderCommand</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="n">QUAD_COMMAND</span> <span class="o">==</span> <span class="n">commandType</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">flush3D</span><span class="p">();</span>
</span><span class='line'>            <span class="k">auto</span> <span class="n">cmd</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">QuadCommand</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">//Batch quads</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">_numQuads</span> <span class="o">+</span> <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">getQuadCount</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">VBO_SIZE</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">CCASSERT</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">getQuadCount</span><span class="p">()</span><span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">getQuadCount</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">VBO_SIZE</span><span class="p">,</span> <span class="s">&quot;VBO is not big enough for quad data, please break the quad data down or use customized render command&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">//Draw batched quads if VBO is full</span>
</span><span class='line'>                <span class="n">drawBatchedQuads</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">_batchedQuadCommands</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">cmd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">memcpy</span><span class="p">(</span><span class="n">_quads</span> <span class="o">+</span> <span class="n">_numQuads</span><span class="p">,</span> <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">getQuads</span><span class="p">(),</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">V3F_C4B_T2F_Quad</span><span class="p">)</span> <span class="o">*</span> <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">getQuadCount</span><span class="p">());</span>
</span><span class='line'>            <span class="n">convertToWorldCoordinates</span><span class="p">(</span><span class="n">_quads</span> <span class="o">+</span> <span class="n">_numQuads</span><span class="p">,</span> <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">getQuadCount</span><span class="p">(),</span> <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">getModelView</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">_numQuads</span> <span class="o">+=</span> <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">getQuadCount</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">RenderCommand</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="n">GROUP_COMMAND</span> <span class="o">==</span> <span class="n">commandType</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">flush</span><span class="p">();</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">renderQueueID</span> <span class="o">=</span> <span class="p">((</span><span class="n">GroupCommand</span><span class="o">*</span><span class="p">)</span> <span class="n">command</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">getRenderQueueID</span><span class="p">();</span>
</span><span class='line'>            <span class="n">visitRenderQueue</span><span class="p">(</span><span class="n">_renderGroups</span><span class="p">[</span><span class="n">renderQueueID</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">RenderCommand</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="n">CUSTOM_COMMAND</span> <span class="o">==</span> <span class="n">commandType</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">flush</span><span class="p">();</span>
</span><span class='line'>            <span class="k">auto</span> <span class="n">cmd</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">CustomCommand</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
</span><span class='line'>            <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">execute</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">RenderCommand</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="n">BATCH_COMMAND</span> <span class="o">==</span> <span class="n">commandType</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">flush</span><span class="p">();</span>
</span><span class='line'>            <span class="k">auto</span> <span class="n">cmd</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">BatchCommand</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
</span><span class='line'>            <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">execute</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">RenderCommand</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="n">MESH_COMMAND</span> <span class="o">==</span> <span class="n">commandType</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">flush2D</span><span class="p">();</span>
</span><span class='line'>            <span class="k">auto</span> <span class="n">cmd</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">MeshCommand</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">_lastBatchedMeshCommand</span> <span class="o">==</span> <span class="k">nullptr</span> <span class="o">||</span> <span class="n">_lastBatchedMeshCommand</span><span class="o">-&gt;</span><span class="n">getMaterialID</span><span class="p">()</span> <span class="o">!=</span> <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">getMaterialID</span><span class="p">())</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">flush3D</span><span class="p">();</span>
</span><span class='line'>                <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">preBatchDraw</span><span class="p">();</span>
</span><span class='line'>                <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">batchDraw</span><span class="p">();</span>
</span><span class='line'>                <span class="n">_lastBatchedMeshCommand</span> <span class="o">=</span> <span class="n">cmd</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">batchDraw</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">CCLOGERROR</span><span class="p">(</span><span class="s">&quot;Unknown commands in renderQueue&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
可以看到针对不同渲染命令，会进行具体渲染操作。 <br/>
这里只简单整理了整个渲染流程的，理清思路，对具体操作并未深入研究，之后会研究渲染细节操作，及不同渲染命令分析。</p>

<h3>参考</h3>

<ul>
<li><a href="http://blog.csdn.net/cbbbc/article/details/39449945">Cocos2d-x 3.2与OpenGL渲染总结（一）：Cocos2d-x 3.2的渲染流程</a></li>
<li><a href="http://cn.cocos2d-x.org/tutorial/show?id=1025">从Cocos2d-x学习OpenGL &ndash; Cocos2d-x渲染结构</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2d-x -- 内存管理]]></title>
    <link href="http://ypengju.github.io/blog/2014/10/14/cocos2d-x-nei-cun-guan-li/"/>
    <updated>2014-10-14T22:13:24+08:00</updated>
    <id>http://ypengju.github.io/blog/2014/10/14/cocos2d-x-nei-cun-guan-li</id>
    <content type="html"><![CDATA[<p>cocos2d-x采用引用计数来对内存进行管理。在2.X版本中，所有类都继承CCObject类来完成内存的管理，而在3.X版本中，cocos2d-x将管理引用计数的内单独了处理命名为Ref，在这个类中对引用计数进行操作。<!-- more --></p>

<figure class='code'><figcaption><span>Ref.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">CC_DLL</span> <span class="n">Ref</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">retain</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">release</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Ref</span><span class="o">*</span> <span class="nf">autorelease</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">getReferenceCount</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Ref</span><span class="p">();</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Ref</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">_referenceCount</span><span class="p">;</span>
</span><span class='line'>    <span class="k">friend</span> <span class="k">class</span> <span class="nc">AutoreleasePool</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>去掉跟脚本有关的东西，其实就定义了一个引用计数变量<code>_referenceCount</code>，以及操作引用计数的retain()和release()方法和自动管理内存的autorelease()方法。所有引擎的提供的控件都提供了一个静态的create()方法，在内部实现了autorelease()调用，所以我们在调用Sprite::create()方法生成精灵时，并不需要对其内存释放进行过多考虑。引擎内部实现了引用计数加减操作，来完成对内存的释放工作。看着几个方法的内部实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Ref</span><span class="o">::</span><span class="n">Ref</span><span class="p">()</span>
</span><span class='line'><span class="o">:</span> <span class="n">_referenceCount</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// when the Ref is created, the reference count of it is 1</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#if CC_ENABLE_SCRIPT_BINDING</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">uObjectCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_luaID</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_ID</span> <span class="o">=</span> <span class="o">++</span><span class="n">uObjectCount</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_scriptObject</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if CC_USE_MEM_LEAK_DETECTION</span>
</span><span class='line'>    <span class="n">trackRef</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Ref</span><span class="o">::~</span><span class="n">Ref</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#if CC_ENABLE_SCRIPT_BINDING</span>
</span><span class='line'>    <span class="c1">// if the object is referenced by Lua engine, remove it</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_luaID</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ScriptEngineManager</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getScriptEngine</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">removeScriptObjectByObject</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ScriptEngineProtocol</span><span class="o">*</span> <span class="n">pEngine</span> <span class="o">=</span> <span class="n">ScriptEngineManager</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getScriptEngine</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pEngine</span> <span class="o">!=</span> <span class="k">nullptr</span> <span class="o">&amp;&amp;</span> <span class="n">pEngine</span><span class="o">-&gt;</span><span class="n">getScriptType</span><span class="p">()</span> <span class="o">==</span> <span class="n">kScriptTypeJavascript</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">pEngine</span><span class="o">-&gt;</span><span class="n">removeScriptObjectByObject</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#if CC_USE_MEM_LEAK_DETECTION</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_referenceCount</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">untrackRef</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Ref</span><span class="o">::</span><span class="n">retain</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CCASSERT</span><span class="p">(</span><span class="n">_referenceCount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&quot;reference count should greater than 0&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="o">++</span><span class="n">_referenceCount</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Ref</span><span class="o">::</span><span class="n">release</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CCASSERT</span><span class="p">(</span><span class="n">_referenceCount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&quot;reference count should greater than 0&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="o">--</span><span class="n">_referenceCount</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_referenceCount</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'><span class="cp">#if defined(COCOS2D_DEBUG) &amp;&amp; (COCOS2D_DEBUG &gt; 0)</span>
</span><span class='line'>        <span class="k">auto</span> <span class="n">poolManager</span> <span class="o">=</span> <span class="n">PoolManager</span><span class="o">::</span><span class="n">getInstance</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">poolManager</span><span class="o">-&gt;</span><span class="n">getCurrentPool</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">isClearing</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">poolManager</span><span class="o">-&gt;</span><span class="n">isObjectInPools</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">CCASSERT</span><span class="p">(</span><span class="nb">false</span><span class="p">,</span> <span class="s">&quot;The reference shouldn&#39;t be 0 because it is still in autorelease pool.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if CC_USE_MEM_LEAK_DETECTION</span>
</span><span class='line'>        <span class="n">untrackRef</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>        <span class="k">delete</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Ref</span><span class="o">*</span> <span class="n">Ref</span><span class="o">::</span><span class="n">autorelease</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">PoolManager</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getCurrentPool</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">addObject</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>特别注意构造函数中，对引用计数赋值为1，所以当我们new一个对象的时候，默认引用计数就是1了。</li>
<li>retain()方法对引用计数加一</li>
<li>release()方法对引用计数减一，当引用计数为0时，delete掉</li>
<li>autorelease()将引用添加到了管理池中，用引擎进行管理</li>
</ul>


<p>前两个方法比较简单直接，只是对引用计数的加减运算，现在来看下引擎是怎么进行自动管理的</p>

<figure class='code'><figcaption><span>PoolManager.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">CC_DLL</span> <span class="n">PoolManager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">PoolManager</span><span class="o">*</span> <span class="n">getInstance</span><span class="p">();</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">void</span> <span class="nf">destroyInstance</span><span class="p">();</span>
</span><span class='line'>    <span class="n">AutoreleasePool</span> <span class="o">*</span><span class="n">getCurrentPool</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">isObjectInPools</span><span class="p">(</span><span class="n">Ref</span><span class="o">*</span> <span class="n">obj</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>    <span class="k">friend</span> <span class="k">class</span> <span class="nc">AutoreleasePool</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">PoolManager</span><span class="p">();</span>
</span><span class='line'>    <span class="o">~</span><span class="n">PoolManager</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">push</span><span class="p">(</span><span class="n">AutoreleasePool</span> <span class="o">*</span><span class="n">pool</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">PoolManager</span><span class="o">*</span> <span class="n">s_singleInstance</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">AutoreleasePool</span><span class="o">*&gt;</span> <span class="n">_releasePoolStack</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>PoolManager是一个单例，其内部定义了一个保存<code>AutoreleasePool *</code>类型的栈，继续看AutoreleasePool</p>

<figure class='code'><figcaption><span>AutoreleasePool</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">class</span> <span class="nc">CC_DLL</span> <span class="n">AutoreleasePool</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * @warn Don&#39;t create an auto release pool in heap, create it in stack.</span>
</span><span class='line'><span class="cm">     * @js NA</span>
</span><span class='line'><span class="cm">     * @lua NA</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">AutoreleasePool</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Create an autorelease pool with specific name. This name is useful for debugging.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">AutoreleasePool</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * @js NA</span>
</span><span class='line'><span class="cm">     * @lua NA</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="o">~</span><span class="n">AutoreleasePool</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Add a given object to this pool.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * The same object may be added several times to the same pool; When the</span>
</span><span class='line'><span class="cm">     * pool is destructed, the object&#39;s Ref::release() method will be called</span>
</span><span class='line'><span class="cm">     * for each time it was added.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param object    The object to add to the pool.</span>
</span><span class='line'><span class="cm">     * @js NA</span>
</span><span class='line'><span class="cm">     * @lua NA</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">addObject</span><span class="p">(</span><span class="n">Ref</span> <span class="o">*</span><span class="n">object</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Clear the autorelease pool.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * Ref::release() will be called for each time the managed object is</span>
</span><span class='line'><span class="cm">     * added to the pool.</span>
</span><span class='line'><span class="cm">     * @js NA</span>
</span><span class='line'><span class="cm">     * @lua NA</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">clear</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(COCOS2D_DEBUG) &amp;&amp; (COCOS2D_DEBUG &gt; 0)</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Whether the pool is doing `clear` operation.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">isClearing</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_isClearing</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Checks whether the pool contains the specified object.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">contains</span><span class="p">(</span><span class="n">Ref</span><span class="o">*</span> <span class="n">object</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Dump the objects that are put into autorelease pool. It is used for debugging.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * The result will look like:</span>
</span><span class='line'><span class="cm">     * Object pointer address     object id     reference count</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">dump</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The underlying array of object managed by the pool.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * Although Array retains the object once when an object is added, proper</span>
</span><span class='line'><span class="cm">     * Ref::release() is called outside the array to make sure that the pool</span>
</span><span class='line'><span class="cm">     * does not affect the managed object&#39;s reference count. So an object can</span>
</span><span class='line'><span class="cm">     * be destructed properly by calling Ref::release() even if the object</span>
</span><span class='line'><span class="cm">     * is in the pool.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Ref</span><span class="o">*&gt;</span> <span class="n">_managedObjectArray</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">_name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(COCOS2D_DEBUG) &amp;&amp; (COCOS2D_DEBUG &gt; 0)</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     *  The flag for checking whether the pool is doing `clear` operation.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">_isClearing</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>也很简单清晰，内部管理着一个存储<code>Ref *</code>类型的容器，所以当调用autorelease()方法时，引擎是将调用对象添加到PoolManager中的<em>releasePoolStack栈最后一个AutoreleasePool的</em>managedObjectArray容器中。其他几个方法就是对这个容器的操作了。</p>

<p>这里引用官方文档的一段说明，更清晰的说明这个工作过程。  <a href="http://cn.cocos2d-x.org/article/index?type=cocos2d-x&amp;url=/doc/cocos-docs-master/manual/framework/native/v2/memory/refcount-autoreleasepool/zh.md">《官方文档》</a><br/>
CCAutoreleasePool不能被用在多线程中，所以假如你游戏需要网络线程，请仅仅在网络线程中接收数据，改变状态标志，不要这个线程里面调用cocos2d接口</p>

<p>CCAutoreleasePool的逻辑是，当你调用object->autorelease()，object就被放到自动释放池中。自动释放池能够帮助你保持这个object的生命周期，直到当前消息循环的结束。在这个消息循环的最后，假如这个object没有被其他类或容器retain过，那么它将自动释放掉。例如，layer->addChild(sprite)，这个sprite增加到这个layer的子节点列表中，他的声明周期就会持续到这个layer释放的时候，而不会在当前消息循环的最后被释放掉。 <br/>
这就是为什么你不能在网络线层中管理CCObject生命周期，因为在每一个UI线程的最后 ，自动释放对象将会被删除，所以当你调用这些被删掉的对象的时候，你就会遇到crash。 <br/>
简而言之，这只有两种情况你需要调用release（）方法</p>

<ol>
<li>你new一个cocos2d::CCObject子类的对象，例如CCSprite，CCLayer等。</li>
<li>你得到cocos2d::CCObject子类对象的指针，然后在你的代码中调用过retain方法。</li>
</ol>


<p>上边可以看到如何讲一个对象添加到自动释放池中，下边来看看引擎何时进行释放。
在CCDirector.cpp文件中，可以找到下边方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">DisplayLinkDirector</span><span class="o">::</span><span class="n">mainLoop</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_purgeDirectorInNextLoop</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_purgeDirectorInNextLoop</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>        <span class="n">purgeDirector</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="n">_invalid</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">drawScene</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// release the objects</span>
</span><span class='line'>        <span class="n">PoolManager</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getCurrentPool</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
可以看到，在绘制后调用了clear()方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">AutoreleasePool</span><span class="o">::</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#if defined(COCOS2D_DEBUG) &amp;&amp; (COCOS2D_DEBUG &gt; 0)</span>
</span><span class='line'>    <span class="n">_isClearing</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span> <span class="o">&amp;</span><span class="nl">obj</span> <span class="p">:</span> <span class="n">_managedObjectArray</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">obj</span><span class="o">-&gt;</span><span class="n">release</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">_managedObjectArray</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'><span class="cp">#if defined(COCOS2D_DEBUG) &amp;&amp; (COCOS2D_DEBUG &gt; 0)</span>
</span><span class='line'>    <span class="n">_isClearing</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
在clear()方法中会调用release()方法对容器中所有引用对象的引用计数减一，然后清空容器。 <br/>
以一个简单的例子来说明下我自己的理解，在HelloWorld::init()方法中生成一个精灵。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">bool</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//////////////////////////////</span>
</span><span class='line'>    <span class="c1">// 1. super init first</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">Layer</span><span class="o">::</span><span class="n">init</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Sprite</span><span class="o">*</span> <span class="n">s</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;CloseNormal.png&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">s</span><span class="o">-&gt;</span><span class="n">setTag</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'>    <span class="n">addChild</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot;---- count before %d&quot;</span><span class="p">,</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">getReferenceCount</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">scheduleUpdate</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">update</span><span class="p">(</span><span class="kt">float</span> <span class="n">dt</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Ref</span> <span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">getChildByTag</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot;-- after count %d&quot;</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">getReferenceCount</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>使用create方法创建精灵，此时s引用计数为1，并被添加到<code>AutoreleasePool</code>中</li>
<li>addChild(s)将s添加到HelloWorld层，此时引用计数加一，为2</li>
<li>然后调到mainLoop()函数，调用drawScene()进行绘制，此时会调到HelloWorld::update()函数，打印引用计数为2</li>
<li>绘制之后，对<code>AutoreleasePool</code>中对象的引用计数减一，并清空<code>AutoreleasePool</code></li>
<li>当下一帧调用到update()函数，打印的引用计数就为1了，当HelloWorld层从内从中移除时，s也会被移除。  <br/>
可以看到，在操作<code>AutoreleasePool</code>时，都是从<code>PoolManager</code>进行调用的，那什么时候在<code>PoolManager</code>的<code>_releasePoolStack</code>队列中添加<code>AutoreleasePool *</code>的？</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">AutoreleasePool</span><span class="o">::</span><span class="n">AutoreleasePool</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'><span class="o">:</span> <span class="n">_name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'><span class="cp">#if defined(COCOS2D_DEBUG) &amp;&amp; (COCOS2D_DEBUG &gt; 0)</span>
</span><span class='line'><span class="p">,</span> <span class="n">_isClearing</span><span class="p">(</span><span class="nb">false</span><span class="p">)</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_managedObjectArray</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="mi">150</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PoolManager</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">push</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">AutoreleasePool</span><span class="o">::~</span><span class="n">AutoreleasePool</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CCLOGINFO</span><span class="p">(</span><span class="s">&quot;deallocing AutoreleasePool: %p&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="n">clear</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PoolManager</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这个可以在<code>AutoreleasePool</code>的构造函数中看到，将自身添加到<code>PoolManager</code>的队列中，在析构的时候pop掉。</p>

<h3>参考</h3>

<ol>
<li><a href="http://cn.cocos2d-x.org/tutorial/show?id=1669">总结Cocos2d-x内存管理机制</a></li>
<li><a href="http://cn.cocos2d-x.org/article/index?type=cocos2d-x&amp;url=/doc/cocos-docs-master/manual/framework/native/v2/memory/refcount-autoreleasepool/zh.md">Cocos2d-x中的引用计数（Reference Count）和自动释放池（AutoReleasePool）</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua -- 面向对象编程]]></title>
    <link href="http://ypengju.github.io/blog/2014/10/13/lua-mian-xiang-dui-xiang-bian-cheng/"/>
    <updated>2014-10-13T22:08:10+08:00</updated>
    <id>http://ypengju.github.io/blog/2014/10/13/lua-mian-xiang-dui-xiang-bian-cheng</id>
    <content type="html"><![CDATA[<p>在了解表的使用，以及元表和元方法的使用后，就可以用表来实现面向对象编程了。</p>

<h3>类</h3>

<p>面向对象编程的核心就是类了，先来看看lua怎么实现类，并通过类生成不同实例。   <!-- more --></p>

<figure class='code'><figcaption><span>Class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="kd">local</span> <span class="n">Account</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">function</span> <span class="nf">Account</span><span class="p">:</span><span class="n">new</span><span class="p">(</span> <span class="n">o</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">o</span> <span class="o">=</span> <span class="n">o</span> <span class="ow">or</span> <span class="p">{}</span>
</span><span class='line'>  <span class="nb">setmetatable</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">__index</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">o</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">function</span> <span class="nf">Account</span><span class="p">:</span><span class="n">printBalance</span><span class="p">(</span>  <span class="p">)</span>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Account balance = &quot;</span> <span class="o">..</span> <span class="n">self</span><span class="p">.</span><span class="n">balance</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">Account</span><span class="p">:</span><span class="n">new</span><span class="p">{</span> <span class="n">balance</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">Account</span><span class="p">:</span><span class="n">new</span><span class="p">{</span> <span class="n">balance</span> <span class="o">=</span> <span class="mi">2</span><span class="p">}</span>
</span><span class='line'><span class="n">a</span><span class="p">:</span><span class="n">printBalance</span><span class="p">()</span> <span class="c1">-- Account balance = 1</span>
</span><span class='line'><span class="n">b</span><span class="p">:</span><span class="n">printBalance</span><span class="p">()</span> <span class="c1">-- Account balance = 2</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
生成了两个实例a，b，都可以调用printBalance()函数打印内容，那么就来分析一下：</p>

<ul>
<li>首先调用<code>Accout:new{ balance = 1 }</code>将一个表传入new()函数中，如果传入参数为空，赋值一个空的表</li>
<li>设置表o的元表为Account，此时的self代表Account</li>
<li>设置Account表的<code>__index</code>域为自己，然后返回表o，此时得到一个元表为Account的表</li>
<li>当调用printBalance()表的时候，在返回的表中没有定义此方法，所以会去访问返回表的元表    <code>__index</code>域，这个域是Account表,并在表Account定义了printBalance()方法，所以就调用了Account表中定义的printBalance()方法。</li>
<li>a:printBalance()时，此时self就是a表，所以self.balance就是a表中的balance，所以就打印1</li>
</ul>


<p>这样就定义了一个简单的类，使得new出来的实例，可以调用类中定义的方法。</p>

<h3>继承</h3>

<p>有类就要有继承，再看lua怎么实现继承</p>

<figure class='code'><figcaption><span>继承</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="kd">local</span> <span class="n">Account</span> <span class="o">=</span> <span class="p">{</span> <span class="n">balance</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="k">function</span> <span class="nf">Account</span><span class="p">:</span><span class="n">new</span><span class="p">(</span> <span class="n">o</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">o</span> <span class="o">=</span> <span class="n">o</span> <span class="ow">or</span> <span class="p">{}</span>
</span><span class='line'>  <span class="nb">setmetatable</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">__index</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">o</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">Account</span><span class="p">:</span><span class="n">printBalance</span><span class="p">(</span>  <span class="p">)</span>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Account balance = &quot;</span> <span class="o">..</span> <span class="n">self</span><span class="p">.</span><span class="n">balance</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">Account</span><span class="p">:</span><span class="n">addBalance</span><span class="p">(</span> <span class="n">v</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">tonumber</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">balance</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">balance</span> <span class="o">+</span> <span class="n">v</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">SubAccount</span> <span class="o">=</span> <span class="n">Account</span><span class="p">:</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">SubAccount</span><span class="p">:</span><span class="n">printSub</span><span class="p">(</span>  <span class="p">)</span>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">this is come from subAccount&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">SubAccount</span><span class="p">:</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'><span class="n">a</span><span class="p">:</span><span class="n">printSub</span><span class="p">()</span>      <span class="c1">-- this is come from subAccount</span>
</span><span class='line'><span class="n">a</span><span class="p">:</span><span class="n">printBalance</span><span class="p">()</span>    <span class="c1">-- Account balance = 0</span>
</span><span class='line'><span class="n">a</span><span class="p">:</span><span class="n">addBalance</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="n">a</span><span class="p">:</span><span class="n">printBalance</span><span class="p">()</span>    <span class="c1">-- Account balance = 10   </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>首先定义Account表，相当于父类，其中定义了一个成员变量及两个方法</li>
<li>通过<code>Account:new()</code>定义SubAccount，相当于子类，在子类中定义了printSub()方法。</li>
<li><code>a = SubAccount:new()</code>，用来生成子类的实例，可是SubAccount中并没有定义new()方法，但可以看到SubAccount就是<code>Account:new()</code>返回的一个表，因为传入参数为零，所以此时其实返回的是一个空表，空表中当然没有new()方法，但是这个空表的元表为Account表，并且<code>__index</code>域设置为Account表，所以追中<code>SubAccount:new()</code>调用的就是<code>Account:new()</code>，所以a就是一个表，表的元表就是Account表</li>
<li>当调用printSub()，因为SubAccount定义了printSub，直接调用，相当于子类有这个方法，直接调用子类的方法</li>
<li>调用printBalance()，SubAccount并未定义次方法，所以就会去访问<code>__index</code>域，就会调到<code>Account:printBalance()</code>方法，而在此方法中，调用了self.balance成员，此时的self是a，a中也没有balance定义，所以就会方位<code>__index</code>域，调用<code>Account.balance</code>,最后打印出0</li>
<li>调用addBalance(10)，相当于给Account中的balance加了10,所以再次打印的时候为10</li>
<li>上边两个方法的访问相当于子类中没有定义的方法和变量，会去长它的父类。</li>
</ul>


<h3>多继承</h3>

<p>除了单继承，lua还可以实现多重继承，继续看例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="kd">local</span> <span class="n">A</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">function</span> <span class="nf">A</span><span class="p">:</span><span class="n">hello</span><span class="p">(</span>  <span class="p">)</span>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">A hello method &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">B</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">function</span> <span class="nf">B</span><span class="p">:</span><span class="n">world</span><span class="p">(</span>  <span class="p">)</span>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">B world method &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">createClass</span><span class="p">(</span> <span class="o">...</span> <span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">c</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">parents</span> <span class="o">=</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="k">function</span> <span class="nf">search</span><span class="p">(</span> <span class="n">k</span><span class="p">,</span> <span class="n">parents</span> <span class="p">)</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="o">#</span><span class="n">parents</span> <span class="k">do</span>
</span><span class='line'>          <span class="kd">local</span> <span class="n">func</span> <span class="o">=</span> <span class="n">parents</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">func</span> <span class="k">then</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">func</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">setmetatable</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="p">{</span><span class="n">__index</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">search</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">parents</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">c</span><span class="p">.</span><span class="n">__index</span> <span class="o">=</span> <span class="n">c</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span> <span class="nf">c</span><span class="p">:</span><span class="n">new</span><span class="p">(</span> <span class="n">o</span> <span class="p">)</span>
</span><span class='line'>      <span class="n">o</span> <span class="o">=</span> <span class="n">o</span> <span class="ow">or</span> <span class="p">{}</span>
</span><span class='line'>      <span class="nb">setmetatable</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">o</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">c</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span> <span class="o">=</span> <span class="n">createClass</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>
</span><span class='line'><span class="n">c1</span> <span class="o">=</span> <span class="n">C</span><span class="p">:</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'><span class="n">c1</span><span class="p">:</span><span class="n">hello</span><span class="p">()</span> <span class="c1">-- A hello method </span>
</span><span class='line'><span class="n">c1</span><span class="p">:</span><span class="n">world</span><span class="p">()</span> <span class="c1">-- B world method </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>先定义基类A,B，并分别定义了了方法</li>
<li>然后使用createClass()方法实现多重继承，其实可以看到，只是遍历两个基类表，找到对应的方法，并调用</li>
<li>C相当于继承自A，B，实现了多重继承，来看具体调用过程</li>
<li><code>c1 = C:new()</code>生成C的实例，C其实就是createClass()方法中的表c，(具体是c的一个副本)，所以<code>C:new()</code>调用的是<code>function c:new( o )</code>函数，返回一个以c表为元表的表</li>
<li>调用<code>c1:hello()</code>方法，因为<code>C:new()</code>返回的表中并未定义hello()方法，所以会去访问反回表的元表<code>__idnex</code>域，即<code>c.__index = c</code>，多以访问了c表，在c表中，也没有定义hello()方法，所以会继续访问c表的元表<code>__index</code>域，可以看到c表元表<code>__index</code>与定义的是一个函数，在这个函数中调用了search()函数，search()函数完成的一个功能是根据一个k查找由<code>createClass(A, B)</code>传进来参数生成的表parents，遍历parents中所有表，查找为k的值，此时k就是方法名，这个hello()方法会在A中找到，所以返回，所以最终调用了A中的hello()方法。</li>
<li>c1:world()同上，调用了B中的world()方法</li>
<li>这样就实现了多重继承，使得子类可以访问父类方法。但这只是简单的模拟实现了多重继承，具体多重继承中的好多问题并未解决。</li>
</ul>


<h3>封装</h3>

<p>类的一大作用就是封装，使得我们可以选择性的对外暴露的借口。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">newAccount</span><span class="p">(</span> <span class="n">initValue</span> <span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">self</span> <span class="o">=</span> <span class="p">{</span> <span class="n">balance</span> <span class="o">=</span> <span class="n">initValue</span> <span class="p">}</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">hello</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span>  <span class="p">)</span>
</span><span class='line'>      <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">hello method&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">world</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span>  <span class="p">)</span>
</span><span class='line'>      <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">world method&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">getBalance</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span>  <span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">balance</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">hello</span> <span class="o">=</span> <span class="n">hello</span><span class="p">,</span>
</span><span class='line'>      <span class="n">getBalanceValue</span> <span class="o">=</span> <span class="n">getBalance</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="n">newAccount</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="n">n</span><span class="p">.</span><span class="n">hello</span><span class="p">()</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="n">getBalanceValue</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
可以看到在表的最后生成一个新表，只将需要的方法暴露给外边，像上边newAccount中的world()方法就只能在内部访问，外部无法访问。 <br/>
<a href="http://www.lua.org/pil/16.5.html">《Programming in Lua》</a>中讲到一种使用闭包实现更高效的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">newObject</span><span class="p">(</span> <span class="n">value</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="n">action</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">action</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="s">get&quot;</span> <span class="k">then</span> <span class="k">return</span> <span class="n">value</span>
</span><span class='line'>      <span class="k">elseif</span> <span class="n">action</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="s">set&quot;</span> <span class="k">then</span> <span class="n">value</span> <span class="o">=</span> <span class="n">v</span>
</span><span class='line'>      <span class="k">else</span> <span class="nb">error</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">invalid action&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="n">newObject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">d</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">get&quot;</span><span class="p">))</span>    <span class="c1">--&gt; 0</span>
</span><span class='line'><span class="n">d</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">set&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">d</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">get&quot;</span><span class="p">))</span>    <span class="c1">--&gt; 10</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2d-x -- 事件分发机制]]></title>
    <link href="http://ypengju.github.io/blog/2014/10/07/cocos2d-x-shi-jian-fen-fa-ji-zhi/"/>
    <updated>2014-10-07T23:21:25+08:00</updated>
    <id>http://ypengju.github.io/blog/2014/10/07/cocos2d-x-shi-jian-fen-fa-ji-zhi</id>
    <content type="html"><![CDATA[<p>cocos2d-x 3.2中关于事件分发机制的类都位于base目录下，其中主要三大类：</p>

<ul>
<li>以Event为基类的，事件类</li>
<li>以EventListener为基类的，事件监听类</li>
<li>EventDispatcher，事件分发类</li>
</ul>


<p>一般我们只注册事件监听类，当发生相应事件时，由事件分发器分发事件，调用我们注册的回调函数，完成事件。  <!-- more --></p>

<h3>事件类型</h3>

<p>在Event.h中我们可以看到有以下七种事件类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">enum</span> <span class="k">class</span> <span class="nc">Type</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TOUCH</span><span class="p">,</span>                  <span class="c1">//触摸事件</span>
</span><span class='line'>    <span class="n">KEYBOARD</span><span class="p">,</span>           <span class="c1">//键盘事件</span>
</span><span class='line'>    <span class="n">ACCELERATION</span><span class="p">,</span>       <span class="c1">//加速器事件</span>
</span><span class='line'>    <span class="n">MOUSE</span><span class="p">,</span>              <span class="c1">//鼠标事件</span>
</span><span class='line'>    <span class="n">FOCUS</span><span class="p">,</span>              <span class="c1">//UI控件事件</span>
</span><span class='line'><span class="cp">#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID || CC_TARGET_PLATFORM == CC_PLATFORM_IOS)</span>
</span><span class='line'>    <span class="n">GAME_CONTROLLER</span><span class="p">,</span>    <span class="c1">//游戏手柄事件</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="n">CUSTOM</span>             <span class="c1">//自定义事件</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
对应的也有七种事件监听，都已CCEventListenerXXX命名，分别用于注册对应事件处理代码。</p>

<h3>使用方法</h3>

<p>先来看一个完整的单点事件触摸例子。</p>

<figure class='code'><figcaption><span>单点触摸</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">auto</span> <span class="n">listener</span> <span class="o">=</span> <span class="n">EventListenerTouchOneByOne</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>   <span class="c1">//生成监听器</span>
</span><span class='line'><span class="c1">//添加touchBegan方法，手指接触屏幕是调用</span>
</span><span class='line'><span class="n">listener</span><span class="o">-&gt;</span><span class="n">onTouchBegan</span> <span class="o">=</span> <span class="p">[](</span><span class="n">Touch</span> <span class="o">*</span><span class="n">touch</span><span class="p">,</span> <span class="n">Event</span> <span class="o">*</span><span class="n">unused_event</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot;you touch begin method&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//添加touchMoved方法，手指在屏幕滑动时调用</span>
</span><span class='line'><span class="n">listener</span><span class="o">-&gt;</span><span class="n">onTouchMoved</span> <span class="o">=</span> <span class="p">[](</span><span class="n">Touch</span> <span class="o">*</span><span class="n">touch</span><span class="p">,</span> <span class="n">Event</span> <span class="o">*</span><span class="n">unused_event</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot;you touch moved method&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//添加touchEnded方法，手指离开屏幕时调用</span>
</span><span class='line'><span class="n">listener</span><span class="o">-&gt;</span><span class="n">onTouchEnded</span> <span class="o">=</span> <span class="p">[](</span><span class="n">Touch</span> <span class="o">*</span><span class="n">touch</span><span class="p">,</span> <span class="n">Event</span> <span class="o">*</span><span class="n">unused_event</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot;you touch ended method&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//添加touchCancelled，点击事件被打断是调用</span>
</span><span class='line'><span class="n">listener</span><span class="o">-&gt;</span><span class="n">onTouchCancelled</span> <span class="o">=</span> <span class="p">[](</span><span class="n">Touch</span> <span class="o">*</span><span class="n">touch</span><span class="p">,</span> <span class="n">Event</span> <span class="o">*</span><span class="n">unused_event</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot;you touch cancenlled method&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//添加监听器</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">getEventDispatcher</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">addEventListenerWithSceneGraphPriority</span><span class="p">(</span><span class="n">listener</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ol>
<li>首先生成单点触摸监听器，对应的还有一个多点触摸监听器。</li>
<li>注册事件发生时，不同阶段的回调函数。</li>
<li>将监听器添加到事件分发器中，有系统在事件发生时，完成事件分发</li>
</ol>


<p>这就是基本的事见监听注册过程，其他事件类型，也都按照这个过程来做。</p>

<h3>剖析</h3>

<p>上边的例子，注册了一个点击事件，了解了事件监听的使用方法，但是并不知道从手指点击屏幕到成功调用注册函数之间到底发生了哪些事情，接下来主要剖析下整个调用过程，看引擎是怎么完成一个事件分发的。</p>

<h4>事件</h4>

<p>事件基类Event类中，主要由三个属性</p>

<figure class='code'><figcaption><span>Event.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">Type</span> <span class="n">_type</span><span class="p">;</span>     <span class="c1">///&lt; Event type</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">_isStopped</span><span class="p">;</span>       <span class="c1">///&lt; whether the event has been stopped.</span>
</span><span class='line'><span class="n">Node</span><span class="o">*</span> <span class="n">_currentTarget</span><span class="p">;</span>  <span class="c1">///&lt; Current target</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>前后不重要代码省略，三个属性主要说明了事件的类型，调用时事件是否以完成，以及调用事件的当前节点。其子类也基本类似，只是添加新的属性来说明新的事件特性及对应的set、get方法。</p>

<h4>事件监听</h4>

<figure class='code'><figcaption><span>EventListener.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'> <span class="p">...</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="n">Event</span><span class="o">*</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">_onEvent</span><span class="p">;</span>   <span class="c1">/// Event callback function</span>
</span><span class='line'>
</span><span class='line'><span class="n">Type</span> <span class="n">_type</span><span class="p">;</span>                             <span class="c1">/// Event listener type</span>
</span><span class='line'><span class="n">ListenerID</span> <span class="n">_listenerID</span><span class="p">;</span>                 <span class="c1">/// Event listener ID</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">_isRegistered</span><span class="p">;</span>                     <span class="c1">/// Whether the listener has been added to dispatcher.</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>   <span class="n">_fixedPriority</span><span class="p">;</span>   <span class="c1">// The higher the number, the higher the priority, 0 is for scene graph base priority.</span>
</span><span class='line'><span class="n">Node</span><span class="o">*</span> <span class="n">_node</span><span class="p">;</span>            <span class="c1">// scene graph based priority</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">_paused</span><span class="p">;</span>           <span class="c1">// Whether the listener is paused</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">_isEnabled</span><span class="p">;</span>        <span class="c1">// Whether the listener is enabled</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
<code>_onEvent</code> - 注册的监听回调函数，<code>_type</code> - 事件监听类型，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">enum</span> <span class="k">class</span> <span class="nc">Type</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">UNKNOWN</span><span class="p">,</span>
</span><span class='line'>        <span class="n">TOUCH_ONE_BY_ONE</span><span class="p">,</span>
</span><span class='line'>        <span class="n">TOUCH_ALL_AT_ONCE</span><span class="p">,</span>
</span><span class='line'>        <span class="n">KEYBOARD</span><span class="p">,</span>
</span><span class='line'>        <span class="n">MOUSE</span><span class="p">,</span>
</span><span class='line'>        <span class="n">ACCELERATION</span><span class="p">,</span>
</span><span class='line'>        <span class="n">FOCUS</span><span class="p">,</span>
</span><span class='line'><span class="cp">#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID || CC_TARGET_PLATFORM == CC_PLATFORM_IOS)</span>
</span><span class='line'>      <span class="n">GAME_CONTROLLER</span><span class="p">,</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>        <span class="n">CUSTOM</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
这里多了一个默认类型和对单点触摸和多点触摸的监听事件进行了区分。<code>_listenerID</code> - 监听ID，在分发中会用到，<code>_fixedPriority</code> - 优先级，优先级高的会先被调用，<code>_node</code> - 监听节点，<code>_paused</code> - 是否暂停，<code>_isEnabled</code> - 是否可用。其他子类，也基本类似，只是针对不同事件类型，添加了对应的回调函数。每个listen类中都有clone方法，当为其他节点添加监听时，可以使用已有监听的clone来为其添加监听，并在原有监听回调中进行逻辑处理。</p>

<h4>事件分发</h4>

<p>了解了事件和监听后，来具体看下cocos2d-x是怎么注册监听的，已经如何将事件传递给监听调用回调。先来看注册监听。</p>

<h5>注册监听</h5>

<p>前面例子的最后一句话，将我们生成的监听类添加到了分发器中，在3.2中有三类方法，添加监听</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">getEventDispatcher</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">addCustomEventListener</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">eventName</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span> <span class="p">(</span><span class="n">EventCustom</span> <span class="o">*</span><span class="p">)</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">callback</span><span class="p">);</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">getEventDispatcher</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">addEventListenerWithFixedPriority</span><span class="p">(</span><span class="n">cocos2d</span><span class="o">::</span><span class="n">EventListener</span> <span class="o">*</span><span class="n">listener</span><span class="p">,</span> <span class="o">&lt;</span><span class="err">#</span><span class="kt">int</span> <span class="n">fixedPriority</span><span class="p">);</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">getEventDispatcher</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">addEventListenerWithSceneGraphPriority</span><span class="p">(</span><span class="n">cocos2d</span><span class="o">::</span><span class="n">EventListener</span> <span class="o">*</span><span class="n">listener</span><span class="p">,</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">Node</span> <span class="o">*</span><span class="n">node</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
依次来看看这三种方法的具体实现。</p>

<ol>
<li>addCustomEventListener(const std::string &amp;eventName, const std::function<void (EventCustom *)> &amp;callback);
它接受两个参数，一个事件名，一个回调函数。看看内部实现：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">EventListenerCustom</span><span class="o">*</span> <span class="n">EventDispatcher</span><span class="o">::</span><span class="n">addCustomEventListener</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">eventName</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="n">EventCustom</span><span class="o">*</span><span class="p">)</span><span class="o">&gt;&amp;</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">EventListenerCustom</span> <span class="o">*</span><span class="n">listener</span> <span class="o">=</span> <span class="n">EventListenerCustom</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">eventName</span><span class="p">,</span> <span class="n">callback</span><span class="p">);</span>
</span><span class='line'>    <span class="n">addEventListenerWithFixedPriority</span><span class="p">(</span><span class="n">listener</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">listener</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>oh，调到addEventListenerWithFixedPriority了，那还是直接看addEventListenerWithFixedPriority吧。 <br/>
2. addEventListenerWithFixedPriority(cocos2d::EventListener *listener, &lt;#int fixedPriority);
接两个参数，一个监听器，一个优先级，继续看内部实现</p>

<figure class='code'><figcaption><span>addEventListenerWithFixedPriority</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">EventDispatcher</span><span class="o">::</span><span class="n">addEventListenerWithFixedPriority</span><span class="p">(</span><span class="n">EventListener</span><span class="o">*</span> <span class="n">listener</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fixedPriority</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CCASSERT</span><span class="p">(</span><span class="n">listener</span><span class="p">,</span> <span class="s">&quot;Invalid parameters.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CCASSERT</span><span class="p">(</span><span class="o">!</span><span class="n">listener</span><span class="o">-&gt;</span><span class="n">isRegistered</span><span class="p">(),</span> <span class="s">&quot;The listener has been registered.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CCASSERT</span><span class="p">(</span><span class="n">fixedPriority</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&quot;0 priority is forbidden for fixed priority since it&#39;s used for scene graph based priority.&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">listener</span><span class="o">-&gt;</span><span class="n">checkAvailable</span><span class="p">())</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">listener</span><span class="o">-&gt;</span><span class="n">setAssociatedNode</span><span class="p">(</span><span class="k">nullptr</span><span class="p">);</span>
</span><span class='line'>    <span class="n">listener</span><span class="o">-&gt;</span><span class="n">setFixedPriority</span><span class="p">(</span><span class="n">fixedPriority</span><span class="p">);</span>
</span><span class='line'>    <span class="n">listener</span><span class="o">-&gt;</span><span class="n">setRegistered</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span><span class='line'>    <span class="n">listener</span><span class="o">-&gt;</span><span class="n">setPaused</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">addEventListener</span><span class="p">(</span><span class="n">listener</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
首先断言进行验证，判断是否已经注册过，每个监听类只能注册一次。传入的优先级不能为0，因为0是场景的默认处理优先级。然后检测监听器是否可以，针对不同的监听器，有不同的检测条件，比如单点触摸检测是否注册了touchBegan回调函数，键盘事件是否注册了按下抬起事件等。之后关联节点，因为这里没有节点出入，所以为nullptr，然后设置优先级，设置注册、暂停标志，最后调用addEventListener方法，我们继续看源码</p>

<figure class='code'><figcaption><span>addEventListener</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">EventDispatcher</span><span class="o">::</span><span class="n">addEventListener</span><span class="p">(</span><span class="n">EventListener</span><span class="o">*</span> <span class="n">listener</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_inDispatch</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">forceAddEventListener</span><span class="p">(</span><span class="n">listener</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_toAddedListeners</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">listener</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">listener</span><span class="o">-&gt;</span><span class="n">retain</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
可以看到，根据事件是否在分发中，对监听器进行了不同的处理。首先看<code>_inDispatch == 0</code>时的调用过程。</p>

<figure class='code'><figcaption><span>forceAddEventListener</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">EventDispatcher</span><span class="o">::</span><span class="n">forceAddEventListener</span><span class="p">(</span><span class="n">EventListener</span><span class="o">*</span> <span class="n">listener</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">EventListenerVector</span><span class="o">*</span> <span class="n">listeners</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">EventListener</span><span class="o">::</span><span class="n">ListenerID</span> <span class="n">listenerID</span> <span class="o">=</span> <span class="n">listener</span><span class="o">-&gt;</span><span class="n">getListenerID</span><span class="p">();</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">_listenerMap</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">listenerID</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">itr</span> <span class="o">==</span> <span class="n">_listenerMap</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">listeners</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EventListenerVector</span><span class="p">();</span>
</span><span class='line'>        <span class="n">_listenerMap</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">listenerID</span><span class="p">,</span> <span class="n">listeners</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">listeners</span> <span class="o">=</span> <span class="n">itr</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">listeners</span><span class="o">-&gt;</span><span class="n">push_back</span><span class="p">(</span><span class="n">listener</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">listener</span><span class="o">-&gt;</span><span class="n">getFixedPriority</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">setDirty</span><span class="p">(</span><span class="n">listenerID</span><span class="p">,</span> <span class="n">DirtyFlag</span><span class="o">::</span><span class="n">SCENE_GRAPH_PRIORITY</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">auto</span> <span class="n">node</span> <span class="o">=</span> <span class="n">listener</span><span class="o">-&gt;</span><span class="n">getAssociatedNode</span><span class="p">();</span>
</span><span class='line'>        <span class="n">CCASSERT</span><span class="p">(</span><span class="n">node</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">,</span> <span class="s">&quot;Invalid scene graph priority!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">associateNodeAndEventListener</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">listener</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">isRunning</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">resumeEventListenersForTarget</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">setDirty</span><span class="p">(</span><span class="n">listenerID</span><span class="p">,</span> <span class="n">DirtyFlag</span><span class="o">::</span><span class="n">FIXED_PRIORITY</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>生成一个零时数据容器</li>
<li>获取监听器ID，在_listenerMap监听器容器中进行查找</li>
<li>如果_listenerMap监听器容器中没有对应的ID的监听容器，穿件一个新的添加进去。</li>
<li>如果有，将对应ID的注册过的监听器容器赋值给零时容器</li>
<li>判断传进参数监听器优先级是否为0，然后进行处理，如果为0，设置为脏，至于什么才是脏下边继续分析，此时获得关联节点，然后将节点与监听类进行关联。不为0时，只设置为了脏，下边继续看怎么设置的</li>
</ul>


<figure class='code'><figcaption><span>setDirty   </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">EventDispatcher</span><span class="o">::</span><span class="n">setDirty</span><span class="p">(</span><span class="k">const</span> <span class="n">EventListener</span><span class="o">::</span><span class="n">ListenerID</span><span class="o">&amp;</span> <span class="n">listenerID</span><span class="p">,</span> <span class="n">DirtyFlag</span> <span class="n">flag</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">_priorityDirtyFlagMap</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">listenerID</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">iter</span> <span class="o">==</span> <span class="n">_priorityDirtyFlagMap</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_priorityDirtyFlagMap</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">listenerID</span><span class="p">,</span> <span class="n">flag</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">flag</span> <span class="o">|</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">iter</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>        <span class="n">iter</span><span class="o">-&gt;</span><span class="n">second</span> <span class="o">=</span> <span class="p">(</span><span class="n">DirtyFlag</span><span class="p">)</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
在<em>priorityDirtyFlagMap中，对对应事件类型ID添加标志，所有添加到</em>priorityDirtyFlagMap中的事件类型都为脏数据。接下来看看怎么关联节点和监听类的</p>

<figure class='code'><figcaption><span>associateNodeAndEventListener</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">EventDispatcher</span><span class="o">::</span><span class="n">associateNodeAndEventListener</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">node</span><span class="p">,</span> <span class="n">EventListener</span><span class="o">*</span> <span class="n">listener</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">EventListener</span><span class="o">*&gt;*</span> <span class="n">listeners</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">found</span> <span class="o">=</span> <span class="n">_nodeListenersMap</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">found</span> <span class="o">!=</span> <span class="n">_nodeListenersMap</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">listeners</span> <span class="o">=</span> <span class="n">found</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">listeners</span> <span class="o">=</span> <span class="k">new</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">EventListener</span><span class="o">*&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="n">_nodeListenersMap</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">listeners</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">listeners</span><span class="o">-&gt;</span><span class="n">push_back</span><span class="p">(</span><span class="n">listener</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
由代码可知一个节点的对应注册事件都存储在<code>_nodeListenersMap</code>容器类中。此时将新的监听类添加到节点的监听类容器中。然后递归调用节点的所有类，使节点处于监听状态即设置暂停标志为false。</p>

<figure class='code'><figcaption><span>resumeEventListenersForTarget</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">EventDispatcher</span><span class="o">::</span><span class="n">resumeEventListenersForTarget</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">target</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">recursive</span><span class="cm">/* = false */</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">listenerIter</span> <span class="o">=</span> <span class="n">_nodeListenersMap</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">target</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">listenerIter</span> <span class="o">!=</span> <span class="n">_nodeListenersMap</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">auto</span> <span class="n">listeners</span> <span class="o">=</span> <span class="n">listenerIter</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">auto</span><span class="o">&amp;</span> <span class="nl">l</span> <span class="p">:</span> <span class="o">*</span><span class="n">listeners</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">l</span><span class="o">-&gt;</span><span class="n">setPaused</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span><span class="o">&amp;</span> <span class="nl">listener</span> <span class="p">:</span> <span class="n">_toAddedListeners</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">listener</span><span class="o">-&gt;</span><span class="n">getAssociatedNode</span><span class="p">()</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">listener</span><span class="o">-&gt;</span><span class="n">setPaused</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setDirtyForNode</span><span class="p">(</span><span class="n">target</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">recursive</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">children</span> <span class="o">=</span> <span class="n">target</span><span class="o">-&gt;</span><span class="n">getChildren</span><span class="p">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="nl">child</span> <span class="p">:</span> <span class="n">children</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">resumeEventListenersForTarget</span><span class="p">(</span><span class="n">child</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果<code>_inDispatch == 0</code>不成立是，调用<code>_toAddedListeners.push_back(listener);</code>说明此时分发器正在工作，则直接将监听器添加到分发表中。</p>

<p>再看addEventListenerWithSceneGraphPriority的注册过程  <br/>
也接受两个参数，一个监听器，一个监听节点。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">EventDispatcher</span><span class="o">::</span><span class="n">addEventListenerWithSceneGraphPriority</span><span class="p">(</span><span class="n">EventListener</span><span class="o">*</span> <span class="n">listener</span><span class="p">,</span> <span class="n">Node</span><span class="o">*</span> <span class="n">node</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CCASSERT</span><span class="p">(</span><span class="n">listener</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="p">,</span> <span class="s">&quot;Invalid parameters.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CCASSERT</span><span class="p">(</span><span class="o">!</span><span class="n">listener</span><span class="o">-&gt;</span><span class="n">isRegistered</span><span class="p">(),</span> <span class="s">&quot;The listener has been registered.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">listener</span><span class="o">-&gt;</span><span class="n">checkAvailable</span><span class="p">())</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="n">listener</span><span class="o">-&gt;</span><span class="n">setAssociatedNode</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>    <span class="n">listener</span><span class="o">-&gt;</span><span class="n">setFixedPriority</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">listener</span><span class="o">-&gt;</span><span class="n">setRegistered</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span><span class='line'>    <span class="n">addEventListener</span><span class="p">(</span><span class="n">listener</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
和addEventListenerWithFixedPriority最大不同就在于设置关联节点和设置优先级上，其他都是调到addEventListener方法进行处理，上边以进行了调用分析。</p>

<h5>响应事件</h5>

<p>上边已注册了监听，接下来看看一个事件发生时的处里过程，我以一个单点触摸为例，进行说明。  <br/>
cocos2d-x点击事件并不是直接从硬件获得的，而是通过不同平台原生点击事件，当点击事件发生时，调用原生点击事件处理器，之后再将点击事件传递给引擎，引擎再对点击事件进行分发处理。如下简单分析下android和ios的点击调用过程。<br/>
andoird： <br/>
android的原生点击事件注册在platform/android/java/src/org/cocos2dx/lib/Cocos2dxGLSurfaceView类中的onTouchEvent()方法中。在此方法中对不同点击事件进行处理，然后传递给Cocos2dxRenderer.java类中的对应的handleActionXXX()函数中，在此方法中，通过jni调用注册的c++函数，这些函数具体实现都在android/jni/TouchesJni.cpp这个类中，然后统一调到platform/GLViewProtocol类中的handleTouchesXXX()类中进行事件处理，最后进行事件分发。 <br/>
ios： <br/>
是从ios/CCEAGLView.mm类中的ios的touchBegin等方法，调到GLViewProtocol类中，因为oc和c++可以直接调用，所以这里没有android那么复杂。<br/>
可以看到所有的点击事件都是统一到GLViewProtocol类来进行事件处理的。</p>

<figure class='code'><figcaption><span>GLViewProtocol::handleTouchesBegin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">GLViewProtocol</span><span class="o">::</span><span class="n">handleTouchesBegin</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">,</span> <span class="kt">intptr_t</span> <span class="n">ids</span><span class="p">[],</span> <span class="kt">float</span> <span class="n">xs</span><span class="p">[],</span> <span class="kt">float</span> <span class="n">ys</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">intptr_t</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">unusedIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">EventTouch</span> <span class="n">touchEvent</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">id</span> <span class="o">=</span> <span class="n">ids</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="n">xs</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="n">y</span> <span class="o">=</span> <span class="n">ys</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">auto</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">g_touchIdReorderMap</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// it is a new touch</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">iter</span> <span class="o">==</span> <span class="n">g_touchIdReorderMap</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">unusedIndex</span> <span class="o">=</span> <span class="n">getUnUsedIndex</span><span class="p">();</span>
</span><span class='line'>            <span class="c1">// The touches is more than MAX_TOUCHES ?</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">unusedIndex</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;The touches is more than MAX_TOUCHES, unusedIndex = %d&quot;</span><span class="p">,</span> <span class="n">unusedIndex</span><span class="p">);</span>
</span><span class='line'>                <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">Touch</span><span class="o">*</span> <span class="n">touch</span> <span class="o">=</span> <span class="n">g_touches</span><span class="p">[</span><span class="n">unusedIndex</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Touch</span><span class="p">();</span>
</span><span class='line'>          <span class="n">touch</span><span class="o">-&gt;</span><span class="n">setTouchInfo</span><span class="p">(</span><span class="n">unusedIndex</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">_viewPortRect</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">/</span> <span class="n">_scaleX</span><span class="p">,</span>
</span><span class='line'>                                     <span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">_viewPortRect</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">/</span> <span class="n">_scaleY</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">CCLOGINFO</span><span class="p">(</span><span class="s">&quot;x = %f y = %f&quot;</span><span class="p">,</span> <span class="n">touch</span><span class="o">-&gt;</span><span class="n">getLocationInView</span><span class="p">().</span><span class="n">x</span><span class="p">,</span> <span class="n">touch</span><span class="o">-&gt;</span><span class="n">getLocationInView</span><span class="p">().</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>            <span class="n">g_touchIdReorderMap</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">unusedIndex</span><span class="p">));</span>
</span><span class='line'>            <span class="n">touchEvent</span><span class="p">.</span><span class="n">_touches</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">touch</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">touchEvent</span><span class="p">.</span><span class="n">_touches</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;touchesBegan: size = 0&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">touchEvent</span><span class="p">.</span><span class="n">_eventCode</span> <span class="o">=</span> <span class="n">EventTouch</span><span class="o">::</span><span class="n">EventCode</span><span class="o">::</span><span class="n">BEGAN</span><span class="p">;</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getEventDispatcher</span><span class="p">();</span>
</span><span class='line'>    <span class="n">dispatcher</span><span class="o">-&gt;</span><span class="n">dispatchEvent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">touchEvent</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>   <br/>
以GLViewProtocol::handleTouchesBegin为例，可以看到，所有的触摸点都包装在类Touch中，然后再将Touch点全部放置到EventTouch事件中，然后由引擎进行分发调用。 <br/>
接着具体看看引擎是如何分发的，从dispatchEvent()方法开始。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">EventDispatcher</span><span class="o">::</span><span class="n">dispatchEvent</span><span class="p">(</span><span class="n">Event</span><span class="o">*</span> <span class="n">event</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_isEnabled</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">updateDirtyFlagForSceneGraph</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">DispatchGuard</span> <span class="nf">guard</span><span class="p">(</span><span class="n">_inDispatch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="o">-&gt;</span><span class="n">getType</span><span class="p">()</span> <span class="o">==</span> <span class="n">Event</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="n">TOUCH</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">dispatchTouchEvent</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">EventTouch</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">event</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">auto</span> <span class="n">listenerID</span> <span class="o">=</span> <span class="n">__getListenerID</span><span class="p">(</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sortEventListeners</span><span class="p">(</span><span class="n">listenerID</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">auto</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">_listenerMap</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">listenerID</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">iter</span> <span class="o">!=</span> <span class="n">_listenerMap</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">auto</span> <span class="n">listeners</span> <span class="o">=</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">auto</span> <span class="n">onEvent</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">event</span><span class="p">](</span><span class="n">EventListener</span><span class="o">*</span> <span class="n">listener</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span><span class="p">{</span>
</span><span class='line'>            <span class="n">event</span><span class="o">-&gt;</span><span class="n">setCurrentTarget</span><span class="p">(</span><span class="n">listener</span><span class="o">-&gt;</span><span class="n">getAssociatedNode</span><span class="p">());</span>
</span><span class='line'>            <span class="n">listener</span><span class="o">-&gt;</span><span class="n">_onEvent</span><span class="p">(</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">event</span><span class="o">-&gt;</span><span class="n">isStopped</span><span class="p">();</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">dispatchEventToListeners</span><span class="p">(</span><span class="n">listeners</span><span class="p">,</span> <span class="n">onEvent</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">updateListeners</span><span class="p">(</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
* 首先更新了脏数据标志
* 然后对_inDispatch标志进行了操作
* 对触摸事件进行了单独处理
* 获取事件监听器ID，根据ID排序后对事件进行处理，然后调用注册的回调函数</p>

<p>dispatchTouchEvent中分别对单点触摸和多点触摸分别进行了处理，然后调用不同的注册回调函数。完成事件的触摸。 <br/>
这就是点击事件的整个处理流程，由于对EventDispatcher中的处理，有些地方还是理解的不投透彻，所以后续还会根据理解进行更新。</p>

<p>其他类型的事件与点击事件的处理也都大同小异，比如键盘事件，它只在桌面程序及安卓程序上有效，基本情况也类似，都是在不同平台调用，然后传递给引擎处理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua -- Metatables]]></title>
    <link href="http://ypengju.github.io/blog/2014/10/04/lua-metatables/"/>
    <updated>2014-10-04T17:10:37+08:00</updated>
    <id>http://ypengju.github.io/blog/2014/10/04/lua-metatables</id>
    <content type="html"><![CDATA[<p>通过lua中的元表及元方法，我们可以定义一些原本在lua中不存在的操作，比如两个表的相加，相减，大小比较，而且lua中的类的继承，类的封装这些面向对象操作也是借助于元表来完成的。</p>

<h3>设置获取元表</h3>

<p>lua中是通过setmetatable()和getmetatable()方法来分别设置和获取一个表的元表的。<!--more-->一个表默认是没有元表的，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="nb">getmetatable</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
打印为nil，说明表t没有元表。但当我们设置元表后，就可以获得元表地址了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="nb">setmetatable</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="nb">getmetatable</span><span class="p">(</span><span class="n">t</span><span class="p">))</span> <span class="c1">-- table: 0x7fc4aa408580</span>
</span></code></pre></td></tr></table></div></figure>


<h3>元方法</h3>

<p>一个表拥有元表后，就可以添加元方法了。</p>

<h4>算术元方法</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">mt</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1">--元表</span>
</span><span class='line'><span class="c1">--生成新表</span>
</span><span class='line'><span class="k">function</span> <span class="nf">new</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">set</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="nb">setmetatable</span><span class="p">(</span><span class="n">set</span><span class="p">,</span> <span class="n">mt</span><span class="p">)</span>    <span class="c1">-- 设置元表</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="k">in</span> <span class="nb">pairs</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">set</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">set</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">--打印表中元素</span>
</span><span class='line'><span class="k">function</span> <span class="nf">tabletostring</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">res</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="k">in</span> <span class="nb">pairs</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">res</span><span class="p">[</span><span class="o">#</span><span class="n">res</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">k</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;</span><span class="s">{&quot;</span> <span class="o">..</span> <span class="nb">table.concat</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">, &quot;</span><span class="p">)</span> <span class="o">..</span> <span class="s2">&quot;</span><span class="s">}&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">--定义 +操作</span>
</span><span class='line'><span class="n">mt</span><span class="p">.</span><span class="n">__add</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span> <span class="n">a</span> <span class="p">,</span> <span class="n">b</span> <span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">res</span> <span class="o">=</span> <span class="n">new</span><span class="p">{}</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">k</span> <span class="k">in</span> <span class="nb">pairs</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">res</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">k</span> <span class="k">in</span> <span class="nb">pairs</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">res</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">res</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="n">new</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">}</span>
</span><span class='line'><span class="n">t2</span> <span class="o">=</span> <span class="n">new</span><span class="p">{</span><span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">}</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">t1</span> <span class="o">+</span> <span class="n">t2</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">tabletostring</span><span class="p">(</span><span class="n">t</span><span class="p">))</span> <span class="c1">-- {20, 30, 40 10}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
先申明一个元表mt，new方法用于生成新的表，所有用new方法生成的表都有相同的元表，然后在元表中实现<code>__add</code>方法，用于计算表的相加。这里用于将相加的两个表中元素统一到一个新表中。当t1 + t2时，会调用<code>__add</code>定义的方法，最后用tabletostring方法打印新表中的内容，这里可以看到，新表中统一了两个表的元素。 <br/>
当lua调用<code>+</code>操作时，首先查找左参数是否定义了<code>__add</code>域，如果定义了，调用这个<code>__add</code>操作，如果没定义，查找第二个参数，是否定义了<code>__add</code>域，如果定义了，调用第二个参数的<code>__add</code>域，如果两个参数都没有定义，就会报错。<br/>
与__add域一样，还可以定义其他域来完成表的<code>-</code>,<code>*</code>,<code>/</code>等操作</p>

<ul>
<li>__sub 减</li>
<li>__mul 乘</li>
<li>__div 除</li>
<li>__mod 取余</li>
<li>__unm 负值</li>
</ul>


<h4>逻辑元方法</h4>

<p>除了定义算数运算外，还可以定义逻辑运算，用来比较两个表的大小，但是lua中只制定了<code>__eq</code>,<code>__lt</code>,<code>__le</code>来分别代表，等于、小于、小于等于这三种操作，像其他的操作，比如不等，大于等操作，lua会基于上边三种进行转换，比如不等就是 not (a==b)。</p>

<figure class='code'><figcaption><span>小于等于</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">mt</span><span class="p">.</span><span class="n">__le</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="k">in</span> <span class="nb">pairs</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">if</span>  <span class="ow">not</span> <span class="n">b</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="k">then</span> <span class="k">return</span> <span class="kc">false</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="n">new</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">}</span>
</span><span class='line'><span class="n">t2</span> <span class="o">=</span> <span class="n">new</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">}</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">t1</span> <span class="o">&lt;=</span> <span class="n">t2</span><span class="p">)</span> <span class="c1">-- false</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">t2</span> <span class="o">&lt;=</span> <span class="n">t1</span><span class="p">)</span> <span class="c1">-- true</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
遍历a表，如果a对应元素b表都有，说明a表小于等于b表，否则不小于等于。则根据上边，小于可定义如下</p>

<figure class='code'><figcaption><span>小于</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">mt</span><span class="p">.</span><span class="n">__le</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="k">in</span> <span class="nb">pairs</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">if</span>  <span class="ow">not</span> <span class="n">b</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="k">then</span> <span class="k">return</span> <span class="kc">false</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">mt</span><span class="p">.</span><span class="n">__lt</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span> <span class="o">&lt;=</span> <span class="n">b</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">b</span> <span class="o">&lt;=</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="n">new</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">}</span>
</span><span class='line'><span class="n">t2</span> <span class="o">=</span> <span class="n">new</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">}</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">t1</span> <span class="o">&lt;</span> <span class="n">t2</span><span class="p">)</span>  <span class="c1">--false</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">t2</span> <span class="o">&lt;</span> <span class="n">t1</span><span class="p">)</span>  <span class="c1">--true</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">t1</span> <span class="o">&gt;</span> <span class="n">t2</span><span class="p">)</span>  <span class="c1">--true</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">t1</span> <span class="o">&gt;=</span> <span class="n">t2</span><span class="p">)</span> <span class="c1">--true</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
如果a&lt;b，则a&lt;=b必然成立，但b&lt;=a肯定不成立。同时可以看到可以用<code>&gt;</code>、<code>&gt;=</code>操作，这是因为lua帮我们自动转换了。</p>

<figure class='code'><figcaption><span>等于</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">mt</span><span class="p">.</span><span class="n">__eq</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span> <span class="o">&lt;=</span> <span class="n">b</span> <span class="ow">and</span> <span class="n">b</span> <span class="o">&lt;=</span> <span class="n">a</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="n">new</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">}</span>
</span><span class='line'><span class="n">t2</span> <span class="o">=</span> <span class="n">new</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">}</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">t1</span> <span class="o">==</span> <span class="n">t2</span><span class="p">)</span> <span class="c1">--false</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">t1</span> <span class="o">~=</span> <span class="n">t2</span><span class="p">)</span> <span class="c1">--true </span>
</span></code></pre></td></tr></table></div></figure>


<p>同时我们可以根据小于等于快速定义等于操作，此时我们也可以使用<code>~=</code>不等于操作。</p>

<h4>库定义元方法</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="nb">print</span><span class="p">({})</span> <span class="c1">-- table: 0x7fad7bc03c80</span>
</span></code></pre></td></tr></table></div></figure>


<p>默认情况下，使用print函数单元一个表的时候，打印的是他的地址。我们可以定义元表中的<code>__tostring</code>域来自定义打印的内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">tabletostring</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">res</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="k">in</span> <span class="nb">pairs</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">res</span><span class="p">[</span><span class="o">#</span><span class="n">res</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">k</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;</span><span class="s">{&quot;</span> <span class="o">..</span> <span class="nb">table.concat</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">, &quot;</span><span class="p">)</span> <span class="o">..</span> <span class="s2">&quot;</span><span class="s">}&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">mt</span><span class="p">.</span><span class="n">__tostring</span> <span class="o">=</span> <span class="n">tabletostring</span>
</span><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="n">new</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">}</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">t1</span><span class="p">)</span> <span class="c1">--{10, 20, 30}   </span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
将tabletostring方法赋值给<code>__tostring</code>域，当我们再次使用print函数打印new生成的表的时候，就讲真个表的内容打印出来了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="n">new</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">}</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="nb">getmetatable</span><span class="p">(</span><span class="n">t1</span><span class="p">))</span> <span class="c1">--table: 0x7f9851408c20</span>
</span><span class='line'><span class="nb">setmetatable</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="nb">getmetatable</span><span class="p">(</span><span class="n">t1</span><span class="p">))</span> <span class="c1">--table: 0x7faef2409ea0</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
像上边这样，当再次给原来的表设置元表后，原来的设置的元表就失效了，为了防止这种情况发生，使得设置一次元表后不能更改，我们可以实现元表的<code>__metatable</code>域，来防止元表被更改。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">mt</span><span class="p">.</span><span class="n">__metatable</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">this is metatable&quot;</span>
</span><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="n">new</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">}</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="nb">getmetatable</span><span class="p">(</span><span class="n">t1</span><span class="p">))</span> <span class="c1">--this is metatable</span>
</span><span class='line'><span class="nb">setmetatable</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span> <span class="p">{})</span>  <span class="c1">-- 报错 cannot change a protected metatable</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
当调用getmetatable时，将放回我们定义的<code>__metatable</code>域的值，当再次设置元表时，就会报错，提示元表是被保护的。</p>

<h4>表访问元方法</h4>

<p>当访问表中不存在的元素时，lua会返回nil，其实我们可以利用元表，自定义返回的值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">mt</span><span class="p">.</span><span class="n">__index</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">300</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="n">new</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">}</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">t1</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="c1">-- 300</span>
</span></code></pre></td></tr></table></div></figure>


<p>
像上边这样，当访问下标为5的元素时，元表中是没有的，本来应该返回的是nil，但当我们定义了<code>__index</code>域时，返回值就是300了。 <br/>
<code>__index</code>的定义有两种，一种是像上边这样使用函数，一种是使用表</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">t2</span> <span class="o">=</span> <span class="p">{</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">400</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">600</span><span class="p">}</span>
</span><span class='line'><span class="n">mt</span><span class="p">.</span><span class="n">__index</span> <span class="o">=</span> <span class="n">t2</span>
</span><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="n">new</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">}</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">t1</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="c1">-- 500</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
像上边这样直接使用表定义<code>__index</code>域，当访问t1中下标为5的元素时，t1中并不存在，但我们定义元表中的<code>__index</code>域，此时就会访问t2中下标为5的元素，并返回，所以t1[5]返回的值就是500。<br/>
还可以定义<code>__newindex</code>域操作给表中不存在的元素赋值时的操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="n">new</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">}</span>
</span><span class='line'><span class="n">mt</span><span class="p">.</span><span class="n">__newindex</span> <span class="o">=</span> <span class="k">function</span> <span class="p">()</span>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">new index&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">t1</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1">-- new index</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
当对不存在的元素赋值时，就会调用<code>__newindex</code>域定义的方法。</p>

<p>像上边这样用new生成的所有新表都共享同一个元表，这就有点像c++中类生成无数实例一样，而访问不存在的元素，就会查找<code>__index</code>域，这就有点像在c++中，访问子类没有的方法，就去父类查找。而lua就是用这种特性来实现面向对象编程的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua -- Table]]></title>
    <link href="http://ypengju.github.io/blog/2014/10/03/lua-table/"/>
    <updated>2014-10-03T20:43:27+08:00</updated>
    <id>http://ypengju.github.io/blog/2014/10/03/lua-table</id>
    <content type="html"><![CDATA[<p>lua并不像其他语言一样提供了Array，List，Set，Queue等各种数据结构来完成各种不同数据操作，相比，lua只提供了一种数据结构 &ndash; Table，可谓以不变应万变了。 <br/>
lua的table可以以整数和字符串为下标，但是我们可以在一个table中存储各种数据，可以存储数据，字符串，函数，甚至表等各种结构，</p>

<h3>整数索引</h3>

<p>lua以整数为下标时，我们就可以像数组一样直接使用，其实lua底层，table是由两部分组成的，一部分是数组，用来存储像整数下标的这些值，一部分用哈希表来实现，用来存储像字符串这样索引的值。lua对table的大小没有限制，也就是说我们可以在使用过程中，在table中添加元素。  <!--more--></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>table1 = {10, 30, 50, 70, 90}
</span><span class='line'>print(table1[0])   -- nil
</span><span class='line'>print(table1[1])   -- 10</span></code></pre></td></tr></table></div></figure>


<p> <br/>
可以看到访问table1[0]返回nil，而table1[1]访问表中第一个值。当我们访问表中不存在的值时会返回nil值，默认table下标是从1开始的，而不是我们熟悉的像其他语言中从0开始，table可以使用任意整数为下标。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>table2 = {10, 30, 50, 70, 90}
</span><span class='line'>table3 = {[1] = 10, [2] = 30, [3] = 50, [4] = 70, [5] = 90}</span></code></pre></td></tr></table></div></figure>


<p>
上边这两种形式是等价的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>table2 = {10, 30, 50, 70, 90}
</span><span class='line'>table3 = {[1] = 10, [2] = 30, [3] = 50, [40] = 70, [5] = 90}
</span><span class='line'>table5 = {[2] = 30, [3] = 50}
</span><span class='line'>print(#table2)  -- 5
</span><span class='line'>print(#table3)  -- 3
</span><span class='line'>print(#table4)  -- 2
</span><span class='line'>print(#table5)  -- 0</span></code></pre></td></tr></table></div></figure>


<p> <br/>
可以使用#操作来计算下标从1开始并连续的table的大小，从上边例子可以看到，如果数组从零开始或者中间有下标不连续，计算的talbe的大小就只是从1到连续结束的元素的个数，如果table元素不是以1下标开始的计算结果为0。</p>

<h3>字符串索引</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>table1 = {one = 0, two = true, three = "hello"}
</span><span class='line'>table2 = {["one"] = 0, ["two"] = true, ["three"] = "hello"}
</span><span class='line'>table3 = {}
</span><span class='line'>table3.one = 0
</span><span class='line'>table3.two = true
</span><span class='line'>table3.three = "hello"</span></code></pre></td></tr></table></div></figure>


<p> <br/>
上边这三种形式创建的表都是一样的。但是有字符串索引的时候，就不能直接采用#操作求table的大小了。如果需要知道table的大小，肯能就需要一个计数器了。</p>

<h3>遍历</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>table1 = {10, 30, 50, 70, 90}
</span><span class='line'>for i=1, #table1 do
</span><span class='line'>  print(table1[i])
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p> <br/>
像上边这样，当table使用整数索引的时候，我们可以像在其他语言中使用数组一样访问表中的元素。但是当下标不为整数，或者整数下标不连续时，我们就无法求得table的大小，上边这种遍历table的方法就行不通了，为了能够方便的遍历table，lua为我们提供了两个有用的方法pairs和ipairs。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>table2 = {10, 30, [4] = 50, [10] = 70, [14] = 90, hello = "world"}
</span><span class='line'>for k,v in pairs(table2) do
</span><span class='line'>  print(k,v)
</span><span class='line'>end  </span></code></pre></td></tr></table></div></figure>


<p> <br/>
使用pairs以key-valued的形式遍历了table2中所有的元素，就像我们在c++中使用迭代器一样。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>table2 = {10, 30, [4] = 50, [10] = 70, [14] = 90, hello = "world"}
</span><span class='line'>for i,v in ipairs(table2) do
</span><span class='line'>  print(i,v)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p> <br/>
但是当使用ipairs遍历时，只是访问了前两个元素，这是因为ipairs只遍历下标从1开始，连续增长的表。像上边table1这样的表，ipairs可以完全遍历，所以在使用的时候需要注意，当下标不连续，或者索引不是整数时，ipairs就停止遍历接下来的元素。</p>

<h3>库方法</h3>

<p>为了方便操作表，lua提供了几个对表操作的库方法</p>

<h4>table.concat(list [, sep [, i [, j]]]) - 链接表中的元素，返回字符串。</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tab = {"hello", "world", "lua"}
</span><span class='line'>print(table.concat(tab, ":"))  -- hello:world:lua</span></code></pre></td></tr></table></div></figure>


<p>
有四个参数，后三个可选，第一个参数是表， 第二个参数分隔符，像上边的冒号，默认为空字符， 第三个参数，开始字符位置，默认下标为1， 第四个参数，结束下标，默认为表的大小。所以默认是链接整个表，我们也可以指定链接表中指定下标区域内的元素。</p>

<h4>table.insert(list, [pos,] value) - 插入元素</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tab = {"hello", "world", "lua"}
</span><span class='line'>table.insert(tab, 100)
</span><span class='line'>print(table.concat(tab, ": ")) -- hello: world: lua: 100</span></code></pre></td></tr></table></div></figure>


<p> <br/>
有三个参数，第一个表，第二个参数可选，插入的位置，默认是#table+1，第三个参数要插入的值，所以默认是讲元素插入到表最后的。像上边这样只有两个参数的，其实是省略掉了中间第二个元素，插值在最后。</p>

<h4>table.pack(···) - 将所有参数打包到一个表中</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tab = table.pack("hello", "world", "lua", 1, 4)
</span><span class='line'>for k,v in pairs(tab) do
</span><span class='line'>  print(k,v)
</span><span class='line'>end
</span><span class='line'>print(table.concat(tab, ": "))</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
接收任意多个参数，将所有参数打包到一个下标从1开始的表中，像上边，打包完后<code>tab1 = {"hello", "world", "lua", 1, 4}</code>但是不一定所有参数都是顺序打包的。</p>

<h4>table.unpack (list [, i [, j]]) - 跟table.pack相反</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tab = {"hello", "world", "lua", 1, 4}
</span><span class='line'>a, b, c, d, e = table.unpack(tab)
</span><span class='line'>print(a) -- hello
</span><span class='line'>print(b) -- world
</span><span class='line'>print(c) -- lua
</span><span class='line'>print(d) -- 1
</span><span class='line'>print(e) -- 4</span></code></pre></td></tr></table></div></figure>


<p> <br/>
返回多个参数，也可以指定需要的坐标范围，比如只返回第二到第四个元素，那么就返回3个元素。</p>

<h4>table.remove(list [, pos]) - 移除表中元素</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tab = {"hello", "world", "lua", 1, 4}
</span><span class='line'>table.remove(tab, 2)
</span><span class='line'>print(table.concat(tab, ": ")) -- hello: lua: 1: 4
</span><span class='line'>print(tab[2]) -- lua</span></code></pre></td></tr></table></div></figure>


<p> <br/>
移除表中指定位置元素，有两个参数，第一个表，第二个移除元素的下标，可选，默认值是表中最后一个元素位置。第二个参数要在表的大小范围内，移除后指定位置元素后，下标后边元素向前移动。</p>

<h4>table.sort (list [, comp]) - 排序</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tab = {4, 10, 2, 1, 40, 6}
</span><span class='line'>table.sort(tab)
</span><span class='line'>print(table.concat(tab, " "))</span></code></pre></td></tr></table></div></figure>


<p> <br/>
对表中元素进行排序，默认从小到大，在第二个参数中也可以实现自己的排序条件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tab = {4, 10, 2, 1, 40, 6}
</span><span class='line'>table.sort(tab, function(a, b)
</span><span class='line'>  return a &gt; b
</span><span class='line'>end)
</span><span class='line'>print(table.concat(tab, " "))</span></code></pre></td></tr></table></div></figure>


<p> <br/>
talbe除了像数组这种操作外，还可以用来实现其他数据结构，但是在lua中像List，Set这种数据结构，不一定比table方便，除了数据结构的操作外，lua还可以用表实现类的封装，继承等面向对象特性，而这一切都是基于元表的，感觉Lua的table无所不能啊。</p>

<p>List，Set实现看见<a href="http://www.lua.org/pil/11.3.html">《Programming in lua》</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress搭建博客]]></title>
    <link href="http://ypengju.github.io/blog/2014/09/28/octopressda-jian-bo-ke/"/>
    <updated>2014-09-28T20:11:47+08:00</updated>
    <id>http://ypengju.github.io/blog/2014/09/28/octopressda-jian-bo-ke</id>
    <content type="html"><![CDATA[<p>像黑客一样写博客！</p>

<p>OK，终于有自己的博客站点了，这里记下怎么倒置的。</p>

<p>octopress 官网：<a href="http://octopress.org/">http://octopress.org/</a></p>

<p>首先各种配置ruby，git，github等就不赘述，百度或者官网都有具体步奏，照做即可。或者可以看下这个<a href="http://happycasts.net/episodes/36">视频</a>，happypeter老师讲的很清楚，同时这个网站上有非常精彩的其他工具教程视频，很值得学习。   <!-- more -->
配置好后，就可以使用自己配置的github page地址来访问了。我基本是按照视频的方式来搭建以及管理的。如果喜欢我的博客也可直接clone，然后修改下就可以了，当然博客内容还是得删掉的。</p>

<p>搭建好后就需要进行一些配置了，比如title,subtitle,author，这样以后你发表的博文才会以你的名义嘛。这些配置都在博客根目录_config.yml文件中，打开进行编辑，我用的是mac，所以这些操作都是很方便的，vim直接打开就可以了，window可以使用相应工具就行。这是一个配置文件，像刚才说到的博客名称，作者，以及第三方插件等都是在这个文件中配置的。这里先改下title，subtitle，author，保存退出然后rake preview， 打开浏览器，输入localhost:4000应该就能看到效果了。</p>

<h3>文章编写</h3>

<p>使用下边这条命令就可以生产一片新的博文，博文位于<code>source/_post</code>文件夹下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["博客名称"] </span></code></pre></td></tr></table></div></figure>


<p>octopress使用Markdown进行编写，所以有一个合适的Markdown编辑器就很重要了，我在Mac下使用的是Mou编辑器，它可以是对编写文件进行对照，非常方便，如图所示，当然有其他的编辑器可选。
<img src="http://ypengju.github.io/images/1.png">
编辑完成后，我们就可以使用下边两个命令将其推送到github中。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rake generate
</span><span class='line'>$rake deploy</span></code></pre></td></tr></table></div></figure>


<h3>换主题</h3>

<p>默认主题其实也蛮好的，要是自己想弄的不一样一点的，那就自己动手，改一通代码，或者像我这样即懒又不会多少前端的，当然第三方主题最省事了。 <br/>
这里有收集的octopress第三方主题：<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">octopress theme</a>  <br/>
里边有很多漂亮的主题，看上自己喜欢的，clone搞定。每个主题github主页都有相应的安装步奏，照做即可。然后你就可以看到自己想要的主题了。比如foxslide</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd blog
</span><span class='line'>$ git submodule add https://github.com/sevenadrian/foxslide .themes/foxslide
</span><span class='line'>$ git submodule update --init
</span><span class='line'>$ rake install['foxslide']
</span><span class='line'>$ rake generate</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>换域名</h3>

<p>如果使用github page托管octopress，都可通过github page地址进行访问，比如我的ypengju.github.com，就可访问。要是想通过自己的域名访问，那只需简单的配置即可。</p>

<ol>
<li>在source目录下创建CNAME文件，在其中添加域名。比如我的CNAME文件中是ypengju.com</li>
<li>添加域名解析，在你的域名服务商网站中，对你申请的域名添加解析，添加A解析，设值为207.97.227.245</li>
<li>再添加CNAME解析，其值为你的github page地址，如我的ypengju.github.com</li>
</ol>


<p>之后将你的修改使用rake generate，rake deploy推送到github上，等上一段时间，就可通过绑定的域名进行访问了。</p>

<h3>加评论</h3>

<p>octopress默认是支持disqus评论工具的。只需在_config.yml文件中，在disqus_short_name：后添加你的disqus账号名就可以在每篇博文后添加评论功能。但是dispus在国内并不好用，所以我采用的是友言评论，与其相同的还有多说等。</p>

<ol>
<li>注册友言账号，注册地址：<a href="http://www.uyan.cc/">友言</a></li>
<li>获取代码，将其添加到<code>source/_includes/post/share_comment.html</code>文件中。默认没有此html文件，创建一个即可。</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- UY BEGIN --&gt;
</span><span class='line'>&lt;div id="uyan_frame"&gt;&lt;/div&gt;
</span><span class='line'>&lt;script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=xxxxxxx"&gt;&lt;/script&gt;
</span><span class='line'>&lt;!-- UY END --&gt;</span></code></pre></td></tr></table></div></figure>


<p>
3. 在<code>source/_includes/post/share.html</code>使用<code>include</code>将share_comment.html文件包含进来，在引入时先判断有没有定义comment_share变量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% if site.comment_share %}
</span><span class='line'>  {% include post/share_comment.html %}
</span><span class='line'>{% endif %}</span></code></pre></td></tr></table></div></figure>


<ol>
<li>在<code>_config.ymb</code>中添加comment_share变量 设置为true。如<code>comment_share: true</code>这样就可以在配置文件中控制是否需要评论系统。

<h3>加分类</h3>

<p>当文章多了，有一个分类对于查阅就非常方便了，我是使用了github上的一个插件，只需简单配置。插件地址<a href="https://github.com/ctdk/octopress-category-list">octopress-category-list</a> <br/>
根据README提示，将文件拷贝到相应目录。然后在<code>_config.yml</code>进行配置。这个插件提供了三种category类型，根据自己喜好，将相应插件路径配置在<code>default_asides</code>这一项中即可。</p></li>
</ol>


<p>octopress还支持其他很多插件，比如分类，tag，微博分享等，可根据自己需要，对其进行配置。这里是github上有人整理的octopress插件。 <br/>
octopress 插件：<a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">octopress plugin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2d-x -- Rapidjson]]></title>
    <link href="http://ypengju.github.io/blog/2014/09/28/cocos2d-x-rapidjson/"/>
    <updated>2014-09-28T16:10:30+08:00</updated>
    <id>http://ypengju.github.io/blog/2014/09/28/cocos2d-x-rapidjson</id>
    <content type="html"><![CDATA[<p>rapidjson是一个c++中的json解析库，其实还有其他的工具如jsoncpp，但是号称rapidjson效率更高一些，并且cocos2d-x3.x版本中都添加rapidjson支持，所以学习了解了下rapidjson的使用。</p>

<h5>rapidjson 主页：<a href="https://code.google.com/p/rapidjson/">https://code.google.com/p/rapidjson/</a></h5>

<p>下载后在源码中example中可以找到使用方法，在cocos2d-x 3.2中，位于external/json   <!-- more --></p>

<ul>
<li>document.h</li>
<li>filestream.h</li>
<li>prettywriter.h</li>
<li>rapidjson.h</li>
<li>reader.h</li>
<li>stringbuffer.h</li>
<li>writer.h</li>
</ul>


<p>在使用的时候，我们根据需要,包含进来我们需要的文件，以下是在cocos2d-x中的使用：</p>

<figure class='code'><figcaption><span>引入头文件</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &quot;../cocos2d/external/json/rapidjson.h&quot;   </span>
</span><span class='line'><span class="cp">#include &quot;../cocos2d/external/json/document.h&quot;   </span>
</span><span class='line'><span class="cp">#include &quot;../cocos2d/external/json/stringbuffer.h&quot;   </span>
</span><span class='line'><span class="cp">#include &quot;../cocos2d/external/json/writer.h&quot;   </span>
</span><span class='line'><span class="cp">#include &quot;../cocos2d/external/json/filestream.h&quot;   </span>
</span><span class='line'><span class="cp">#include &quot;../cocos2d/external/json/prettywriter.h&quot;   </span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">rapidjson</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>解析</h2>

<p>rapidjson中的所有类型都位于rapidjson命名空间中。以下根据官方使用说明，例句一些具体的使用例子，帮助理解。</p>

<figure class='code'><figcaption><span>简单解析  </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="n">json</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;{ </span><span class="se">\&quot;</span><span class="s">hello</span><span class="se">\&quot;</span><span class="s"> : </span><span class="se">\&quot;</span><span class="s">world</span><span class="se">\&quot;</span><span class="s"> }&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">rapidjson</span><span class="o">::</span><span class="n">Document</span> <span class="n">doc</span><span class="p">;</span>
</span><span class='line'><span class="n">doc</span><span class="p">.</span><span class="n">Parse</span><span class="o">&lt;</span><span class="n">kParseDefaultFlags</span><span class="o">&gt;</span><span class="p">(</span><span class="n">json</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">doc</span><span class="p">[</span><span class="s">&quot;hello&quot;</span><span class="p">].</span><span class="n">GetString</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
运行程序，在输出台中就可以看到打印的 <code>world</code> 了。上边的例子将一个json文本解析成为一个DOM树，其中Parse<kParseDefaultFlags>,中的kParseDefaultFlags是一个默认解析标志。解析的数据默认是以UTF-8的编码格式存储，同时rapidjson还支持UTF-16,UTF-32。</p>

<h4>Document 类型</h4>

<p>Document代表json对象，我们可以下边方式生成一个rapidjson队像。</p>

<figure class='code'><figcaption><span>json对象</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">rapidjson</span><span class="o">::</span><span class="n">Document</span> <span class="n">doc</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>Value 类型</h4>

<p>Value是用于存储json值或者键值对，它可以存储false， true， number， string， array或者object等数据格式。上边讲到的Document类型其实派生自Value。 <br/>
下边来看个例子：
json数据 <br/>
{ <br/>
　　　&#8221;hello&#8221;:&ldquo;world&rdquo;, <br/>
　　　&#8221;t&#8221;:true, <br/>
　　　&#8221;f&#8221;:false, <br/>
　　　&#8221;n&#8221;:null, <br/>
　　　&#8221;i&#8221;:123, <br/>
　　　&#8221;pi&#8221;:3.1416, <br/>
　　　&#8221;a&#8221;:[1,2,3,4] <br/>
}</p>

<figure class='code'><figcaption><span>解析例子</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="n">json1</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot; { </span><span class="se">\&quot;</span><span class="s">hello</span><span class="se">\&quot;</span><span class="s"> : </span><span class="se">\&quot;</span><span class="s">world</span><span class="se">\&quot;</span><span class="s">, </span><span class="se">\&quot;</span><span class="s">t</span><span class="se">\&quot;</span><span class="s"> : true , </span><span class="se">\&quot;</span><span class="s">f</span><span class="se">\&quot;</span><span class="s"> : false, </span><span class="se">\&quot;</span><span class="s">n</span><span class="se">\&quot;</span><span class="s">: null, </span><span class="se">\&quot;</span><span class="s">i</span><span class="se">\&quot;</span><span class="s">:123, </span><span class="se">\&quot;</span><span class="s">pi</span><span class="se">\&quot;</span><span class="s">: 3.1416, </span><span class="se">\&quot;</span><span class="s">a</span><span class="se">\&quot;</span><span class="s">:[1, 2, 3, 4] } &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//解析数据到document中</span>
</span><span class='line'>    <span class="n">rapidjson</span><span class="o">::</span><span class="n">Document</span> <span class="n">document</span><span class="p">;</span>
</span><span class='line'>    <span class="n">document</span><span class="p">.</span><span class="n">Parse</span><span class="o">&lt;</span><span class="n">kParseDefaultFlags</span><span class="o">&gt;</span><span class="p">(</span><span class="n">json1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">document</span><span class="p">.</span><span class="n">IsObject</span><span class="p">());</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">document</span><span class="p">.</span><span class="n">HasMember</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">document</span><span class="p">[</span><span class="s">&quot;hello&quot;</span><span class="p">].</span><span class="n">IsString</span><span class="p">());</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello = %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">document</span><span class="p">[</span><span class="s">&quot;hello&quot;</span><span class="p">].</span><span class="n">GetString</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">document</span><span class="p">[</span><span class="s">&quot;t&quot;</span><span class="p">].</span><span class="n">IsBool</span><span class="p">());</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;t = %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">document</span><span class="p">[</span><span class="s">&quot;t&quot;</span><span class="p">].</span><span class="n">GetBool</span><span class="p">()</span> <span class="o">?</span> <span class="s">&quot;true&quot;</span> <span class="o">:</span> <span class="s">&quot;false&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">document</span><span class="p">[</span><span class="s">&quot;f&quot;</span><span class="p">].</span><span class="n">IsBool</span><span class="p">());</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;f = %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">document</span><span class="p">[</span><span class="s">&quot;f&quot;</span><span class="p">].</span><span class="n">GetBool</span><span class="p">()</span> <span class="o">?</span> <span class="s">&quot;true&quot;</span> <span class="o">:</span> <span class="s">&quot;false&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;n = %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">document</span><span class="p">[</span><span class="s">&quot;n&quot;</span><span class="p">].</span><span class="n">IsNull</span><span class="p">()</span> <span class="o">?</span> <span class="s">&quot;null&quot;</span> <span class="o">:</span> <span class="s">&quot;?&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">document</span><span class="p">[</span><span class="s">&quot;i&quot;</span><span class="p">].</span><span class="n">IsNumber</span><span class="p">());</span> <span class="c1">// Number is a JSON type, but C++ needs more specific type.</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">document</span><span class="p">[</span><span class="s">&quot;i&quot;</span><span class="p">].</span><span class="n">IsInt</span><span class="p">());</span>    <span class="c1">// In this case, IsUint()/IsInt64()/IsUInt64() also return true.</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;i = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">document</span><span class="p">[</span><span class="s">&quot;i&quot;</span><span class="p">].</span><span class="n">GetInt</span><span class="p">());</span>  <span class="c1">// Alternative (int)document[&quot;i&quot;]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">document</span><span class="p">[</span><span class="s">&quot;pi&quot;</span><span class="p">].</span><span class="n">IsNumber</span><span class="p">());</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">document</span><span class="p">[</span><span class="s">&quot;pi&quot;</span><span class="p">].</span><span class="n">IsDouble</span><span class="p">());</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;pi = %g</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">document</span><span class="p">[</span><span class="s">&quot;pi&quot;</span><span class="p">].</span><span class="n">GetDouble</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//解析数组</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>         <span class="k">const</span> <span class="n">rapidjson</span><span class="o">::</span><span class="n">Value</span><span class="o">&amp;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">document</span><span class="p">[</span><span class="s">&quot;a&quot;</span><span class="p">];</span> <span class="c1">//handy and faster.</span>
</span><span class='line'>         <span class="n">assert</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">IsArray</span><span class="p">());</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">SizeType</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">.</span><span class="n">Size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>   <span class="p">{</span><span class="c1">// rapidjson uses SizeType instead of size_t.</span>
</span><span class='line'>             <span class="n">printf</span><span class="p">(</span><span class="s">&quot;a[%d] = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">GetInt</span><span class="p">());</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
此例可在官方例子程序中找到，尤其注意程序中对于数组成员的访问，我们不能直接使用下标访问数组成员，因为[]操作符在c++中是模糊不清的，它也可代表一个const char *的空指针，如果这样写，编辑器会直接提示错误，如上所示，我们在rapidjson中访问数组成员变量时，对类型进行包装，即SizeType(0)，或者在下标后添加u字符， SizeType在rapidjson中代表size_t类型。 <br/>
运行程序，可在输出看到如下打印： <br/>
hello = world <br/>
t = true <br/>
f = false <br/>
n = null <br/>
i = 123 <br/>
pi = 3.1416 <br/>
a[0] = 1 <br/>
a[1] = 2 <br/>
a[2] = 3 <br/>
a[3] = 4 <br/>
此外，调用HasMember()方法可以确定是否包含此值。</p>

<h4>数据遍历</h4>

<p>上边已经说过，因为0在c++中可以代表数值也可以代表空指针，所以我们在遍历数组成员的时候使用下边形式代替：</p>

<ul>
<li>a[SizeType(0)]</li>
<li>a[0u]</li>
</ul>


<p>其实我们还可以像遍历std::vector一样，用迭代器，遍历rapidjson数组成员。</p>

<figure class='code'><figcaption><span>遍历数组</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">rapidjson</span><span class="o">::</span><span class="n">Value</span><span class="o">::</span><span class="n">ConstValueIterator</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">onBegin</span><span class="p">();</span> <span class="n">itr</span> <span class="o">!=</span> <span class="n">a</span><span class="p">.</span><span class="n">onEnd</span><span class="p">();</span> <span class="o">++</span><span class="n">itr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">printf</span><span class="p">(</span><span class="s">&quot;-------%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">itr</span><span class="o">-&gt;</span><span class="n">GetInt</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>官方例子给的是a.Begin()和a.End();但在cocos2d-x3.2中使用时调用的是a.onBegin()和a.onEnd()</h5>

<h4>遍历对象</h4>

<p>除了对数组可以使用迭代器进行遍历外，我们还可以用迭代器对对象进行遍历，如下：</p>

<figure class='code'><figcaption><span>遍历对象</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">rapidjson</span><span class="o">::</span><span class="n">Value</span><span class="o">::</span><span class="n">ConstMemberIterator</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">document</span><span class="p">.</span><span class="n">MemberonBegin</span><span class="p">();</span> <span class="n">itr</span> <span class="o">!=</span>                <span class="n">document</span><span class="p">.</span><span class="n">MemberonEnd</span><span class="p">();</span> <span class="o">++</span><span class="n">itr</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;-----type of member %s </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">itr</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">.</span><span class="n">GetString</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h5>此处注意是document.MemberonBegin()而不是官方文档中的document.MemberBegin()</h5>

<p>在rapidjson中可以判断一个数是是有符号整数，还是无符号整数，是单精度数还是双精度数等方法，如下：</p>

<ul>
<li>IsNumber() whether the value is a number</li>
<li>IsInt() whether the number is a int</li>
<li>IsUint() whether the number is a uint</li>
<li>IsInt64() whether the number is a int64_t</li>
<li>IsUint64() whether the number is a uint64_t</li>
<li>IsDouble() whether the number is a double</li>
</ul>


<p>对于字符串的操作，rapidjson除了可以使用getString()获取字符内容外，还可以使用getStringLength()获取字符串长度。</p>

<h2>生成</h2>

<p>先来看个简单的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">rapidjson</span><span class="o">::</span><span class="n">Document</span> <span class="n">docWrite</span><span class="p">;</span>
</span><span class='line'><span class="n">docWrite</span><span class="p">.</span><span class="n">SetObject</span><span class="p">();</span>
</span><span class='line'><span class="c1">//    或者</span>
</span><span class='line'><span class="c1">//    rapidjson::Value doc;</span>
</span><span class='line'><span class="c1">//    doc.SetObject();</span>
</span><span class='line'><span class="n">FileStream</span> <span class="nf">f</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'><span class="n">PrettyWriter</span><span class="o">&lt;</span><span class="n">FileStream</span><span class="o">&gt;</span> <span class="n">writer</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'><span class="n">docWrite</span><span class="p">.</span><span class="n">Accept</span><span class="p">(</span><span class="n">writer</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
上边我们生成了一个空对象，并把它写到控制台中，这样我们就可以在控制台中看到一个{}了，我们可以用两种方式来生成一个对象，即rapidjson::Document 或者 rapidjson::Value，因为Document是派生自Value的，所以Value能干的事，它也能干。至于写入流程，现在还不是懂，等懂了再说。<br/>
除了这种SetXXX()的方式外，我们换可以使用构造的方式来完成，rapidjson::Value doc(kObjectType);</p>

<h4>对象操作：</h4>

<p>如果给对象添加成员时，我们可以调用AddMember()方法在其中添加成员，与其对应的还有一个RemoveMember()方法用于删除对象中成员。</p>

<figure class='code'><figcaption><span>对象添加成员</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Document</span> <span class="n">doc</span><span class="p">;</span>
</span><span class='line'><span class="n">doc</span><span class="p">.</span><span class="n">SetObject</span><span class="p">();</span>
</span><span class='line'><span class="n">doc</span><span class="p">.</span><span class="n">AddMember</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="s">&quot;Milo&quot;</span><span class="p">,</span> <span class="n">doc</span><span class="p">.</span><span class="n">GetAllocator</span><span class="p">());</span>
</span><span class='line'><span class="n">doc</span><span class="p">.</span><span class="n">AddMember</span><span class="p">(</span><span class="s">&quot;married&quot;</span><span class="p">,</span> <span class="nb">true</span><span class="p">,</span> <span class="n">doc</span><span class="p">.</span><span class="n">GetAllocator</span><span class="p">());</span>
</span><span class='line'><span class="c1">//    doc.RemoveMember(&quot;married&quot;);    </span>
</span><span class='line'><span class="n">FileStream</span> <span class="nf">f</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'><span class="n">PrettyWriter</span><span class="o">&lt;</span><span class="n">FileStream</span><span class="o">&gt;</span> <span class="n">writer</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'><span class="n">doc</span><span class="p">.</span><span class="n">Accept</span><span class="p">(</span><span class="n">writer</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成格式： <br/>
{ <br/>
　　　&#8221;name&#8221;: &ldquo;Milo&rdquo;, <br/>
　　　&#8221;married&#8221;: true <br/>
}</p>

<h4>字符串操作</h4>

<p>rapidjson对于字符串的操作提供了两种方案。</p>

<ol>
<li>copy-string</li>
<li>const-string</li>
</ol>


<p>第一种是将原字符串拷贝了一份，然后，对拷贝后的字符串进行操作，这样做安全很多，但是对于长字符串就比较耗时间了。 <br/>
另一种只是存储了一份指向原字符串的指针，这样就大大减少了对内存使用。</p>

<figure class='code'><figcaption><span>对象添加成员</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Document</span> <span class="n">docWriteStr</span><span class="p">;</span>
</span><span class='line'><span class="n">docWriteStr</span><span class="p">.</span><span class="n">SetObject</span><span class="p">();</span>
</span><span class='line'><span class="n">rapidjson</span><span class="o">::</span><span class="n">Value</span> <span class="n">author</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">sprintf</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">&quot;%s %s&quot;</span><span class="p">,</span> <span class="s">&quot;Milo&quot;</span><span class="p">,</span> <span class="s">&quot;Yip&quot;</span><span class="p">);</span> <span class="c1">// dynamically created string.</span>
</span><span class='line'><span class="n">author</span><span class="p">.</span><span class="n">SetString</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">docWriteStr</span><span class="p">.</span><span class="n">GetAllocator</span><span class="p">());</span>
</span><span class='line'><span class="n">memset</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffer</span><span class="p">));</span>
</span><span class='line'><span class="n">docWriteStr</span><span class="p">.</span><span class="n">AddMember</span><span class="p">(</span><span class="s">&quot;author&quot;</span><span class="p">,</span> <span class="n">author</span><span class="p">,</span> <span class="n">docWriteStr</span><span class="p">.</span><span class="n">GetAllocator</span><span class="p">());</span>
</span><span class='line'><span class="n">FileStream</span> <span class="nf">fs</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'><span class="n">PrettyWriter</span><span class="o">&lt;</span><span class="n">FileStream</span><span class="o">&gt;</span> <span class="n">writerStr</span><span class="p">(</span><span class="n">fs</span><span class="p">);</span>
</span><span class='line'><span class="n">docWriteStr</span><span class="p">.</span><span class="n">Accept</span><span class="p">(</span><span class="n">writerStr</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种在SetString()的时候，先使用零时buffer，对字符传进行了拷贝，计算字符长度，然后使用doc.GetAllocator()进行了内存分配。生成Value成员，然后使用AddMember方法将其添加到docWriteStr对象中。</p>

<p>另一方面，我们不需要生成零时字符串，可直接对字符串进行操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">rapidjson</span><span class="o">::</span><span class="n">Value</span> <span class="n">author</span><span class="p">;</span>
</span><span class='line'><span class="n">author</span><span class="p">.</span><span class="n">SetString</span><span class="p">(</span><span class="s">&quot;rapidjson&quot;</span><span class="p">,</span> <span class="mi">9</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式比上边的效率更高。还可以使用下边这两种形式，但由于不知道字符长度，效率会比较低一点。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">author</span><span class="p">.</span><span class="n">SetString</span><span class="p">(</span><span class="s">&quot;rapidjson&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">author</span> <span class="o">=</span> <span class="s">&quot;rapidjson&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>数组操作：</h4>

<figure class='code'><figcaption><span>生成数组</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Document</span> <span class="n">docWriteArray</span><span class="p">;</span>
</span><span class='line'><span class="n">docWriteArray</span><span class="p">.</span><span class="n">SetObject</span><span class="p">();</span>
</span><span class='line'><span class="n">rapidjson</span><span class="o">::</span><span class="n">Value</span> <span class="n">array</span><span class="p">(</span><span class="n">kArrayType</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">array</span><span class="p">.</span><span class="n">PushBack</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">docWriteArray</span><span class="p">.</span><span class="n">GetAllocator</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">docWriteArray</span><span class="p">.</span><span class="n">AddMember</span><span class="p">(</span><span class="s">&quot;array&quot;</span><span class="p">,</span> <span class="n">array</span><span class="p">,</span> <span class="n">doc</span><span class="p">.</span><span class="n">GetAllocator</span><span class="p">());</span>
</span><span class='line'><span class="n">FileStream</span> <span class="nf">fArray</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'><span class="n">PrettyWriter</span><span class="o">&lt;</span><span class="n">FileStream</span><span class="o">&gt;</span> <span class="n">writerArray</span><span class="p">(</span><span class="n">fArray</span><span class="p">);</span>
</span><span class='line'><span class="n">docWriteArray</span><span class="p">.</span><span class="n">Accept</span><span class="p">(</span><span class="n">writerArray</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成格式： <br/>
{ <br/>
　　　&#8221;array&#8221;: [0,1,2,3,4] <br/>
}  <br/>
在rapidjson::Value array(kArrayType);中，使用kArrayType声明Value类型为数组，我们也可以使用 array.SetArray();的方式。然后使用PushBack()方法将值加载到数组中，最后将Value添加到对象中。 <br/>
如果我们想在数组中生成对象，只要将生成新的Value,然后添加就行，像下边这样：</p>

<figure class='code'><figcaption><span>数组中添加对象</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Document</span> <span class="n">doc</span><span class="p">;</span>
</span><span class='line'><span class="n">doc</span><span class="p">.</span><span class="n">SetObject</span><span class="p">();</span>
</span><span class='line'><span class="n">rapidjson</span><span class="o">::</span><span class="n">Value</span> <span class="n">array</span><span class="p">(</span><span class="n">kArrayType</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">rapidjson</span><span class="o">::</span><span class="n">Value</span> <span class="n">tmp</span><span class="p">(</span><span class="n">kObjectType</span><span class="p">);</span>
</span><span class='line'>    <span class="n">tmp</span><span class="p">.</span><span class="n">AddMember</span><span class="p">(</span><span class="s">&quot;class1&quot;</span><span class="p">,</span> <span class="s">&quot;ypengju&quot;</span><span class="p">,</span> <span class="n">doc</span><span class="p">.</span><span class="n">GetAllocator</span><span class="p">());</span>
</span><span class='line'>    <span class="n">tmp</span><span class="p">.</span><span class="n">AddMember</span><span class="p">(</span><span class="s">&quot;class2&quot;</span><span class="p">,</span> <span class="s">&quot;xcode&quot;</span><span class="p">,</span> <span class="n">doc</span><span class="p">.</span><span class="n">GetAllocator</span><span class="p">());</span>
</span><span class='line'>    <span class="n">array</span><span class="p">.</span><span class="n">PushBack</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">doc</span><span class="p">.</span><span class="n">GetAllocator</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">doc</span><span class="p">.</span><span class="n">AddMember</span><span class="p">(</span><span class="s">&quot;array&quot;</span><span class="p">,</span> <span class="n">array</span><span class="p">,</span> <span class="n">doc</span><span class="p">.</span><span class="n">GetAllocator</span><span class="p">());</span>
</span><span class='line'><span class="n">FileStream</span> <span class="nf">f</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'><span class="n">PrettyWriter</span><span class="o">&lt;</span><span class="n">FileStream</span><span class="o">&gt;</span> <span class="n">writer</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'><span class="n">doc</span><span class="p">.</span><span class="n">Accept</span><span class="p">(</span><span class="n">writer</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成格式： <br/>
{ <br/>
　　　&#8221;array&#8221;: [ <br/>
　　　　　　{ <br/>
　　　　　　　　　&#8221;class1&#8221;: &ldquo;ypengju&rdquo;, <br/>
　　　　　　　　　&#8221;class2&#8221;: &ldquo;xcode&rdquo; <br/>
　　　　　　}, <br/>
　　　　　　{ <br/>
　　　　　　　　　&#8221;class1&#8221;: &ldquo;ypengju&rdquo;, <br/>
　　　　　　　　　&#8221;class2&#8221;: &ldquo;xcode&rdquo; <br/>
　　　　　　}, <br/>
　　　　　　{ <br/>
　　　　　　　　　&#8221;class1&#8221;: &ldquo;ypengju&rdquo;, <br/>
　　　　　　　　　&#8221;class2&#8221;: &ldquo;xcode&rdquo; <br/>
　　　　　　} <br/>
　　　] <br/>
}</p>

<h5>例子程序地址：<a href="https://github.com/ypengju/cocos2d-xTest">https://github.com/ypengju/cocos2d-xTest</a></h5>
]]></content>
  </entry>
  
</feed>
